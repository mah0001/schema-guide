[["index.html", "[DRAFT - WORK IN PROGRESS] Metadata Standards and Schemas for Improved Data Discoverability and Usability Preface Acknowledgments", " [DRAFT - WORK IN PROGRESS] Metadata Standards and Schemas for Improved Data Discoverability and Usability Olivier Dupriez and Mehmood Asghar 2023-11-23 Preface Numerous organizations –government agencies, international organizations, the private sector, the academia, and others– invest in data collection and creation. Their datasets often possess intrinsic value not only for their creators but also for a broader community of secondary users and researchers. By repurposing and reusing data, this community adds value to the data. However, many valuable datasets remain difficult to find, access, and use, and are therefore underexploited. A dedicated and concerted effort to improve the discoverability, accessibility, and usability of data is needed. Such effort would largely hinge on the quality of the metadata associated with the data. This Guide aims to promote and facilitate the production and use of rich and structured metadata, ultimately promoting the responsible use and repurposing of data. The primary audience for the Guide are data producers and curators, data librarians and catalogs administrators, and the developers of data management and dissemination platforms, who seek to maximize the value of existing data in a responsible and technically proficient manner. The Guide applies mainly to socio-economic data of different types (indicators, microdata, geographic datasets, publications, and others). The Guide is part of a broader toolset that also includes specialized software applications – a specialized metadata editor and a cataloging tool. This toolset covers the technical aspects of data documentation and dissemination. Legal and ethical considerations are equally important, but are adressed in other guidelines and are supported by different tools. Acknowledgments The Guide was written by Olivier Dupriez (Deputy Chief Statistician, World Bank) and Mehmood Asghar (Senior Data Engineer, World Bank). Kamwoo Lee (Data Scientist, World Bank) produced some of the examples of the use of metadata schemas included in the Guide and contributed to the testing of the schemas. Emmanuel Blondel (consultant) contributed much of chapter 6. Geoffrey Greenwell (consultant) provided input to chapter 9. Tefera Bekele Degefu and Cathrine Machingauta (Data Scientists, World Bank) participated in the testing of the metadata schemas. The production of the Guide and related tools has been made possible by financial contributions from: The World Bank-UNHCR Joint Data Center Microdata Library project P174080, Grant No TF0B4772, administered by the World Bank Development Data Group. The UK Aid-UNHCR-World Bank research program Building the Evidence on Protracted Forced Displacement, funded by the UK government (FCV Data Platform component, project P174529, Grant No TF0B4149). This project supported the development of a data platform which led to the improvement and testing of some of the metadata schemas described in the Guide. The World Bank administrative budget. The Guide was created using R Bookdown and is licensed under a Creative Commons Attribution- NonCommercial- NoDerivatives 4.0 International License. chatGPT was used as a copy editor, but not for substantive content suggestion or creation. Feedback and suggestions on the Guide are welcome. They can be sent to […] or submitted on GitHub where the Guide’s source code is stored (https://github.com/mah0001/schema-guide). "],["introduction.html", "Introduction", " Introduction Over the last decade, the supply of socio-economic data available to researchers and policy makers has increased considerably, along with advances in the tools and methods available to exploit these data. This provides the research community and development practitioners with unprecedented opportunities to increase the use and value of existing data. #Note: Data that were initially collected with one intention can be reused for a completely different purpose. (…) Because the potential of data to serve a productive use is essentially limitless, enabling the reuse and repurposing of data is critical if data are to lead to better lives. (World Bank, World Development Report 2021) But data can be challenging to find, access, and use, resulting in many valuable datasets remaining underutilized. Data repositories and libraries, and the data catalogs they maintain, play a crucial role in making data more discoverable, visible, and usable. But many of these catalogs are built on sub-optimal standards and technological solutions, resulting in limited findability and visibility of their assets. To address such market failures, a better market place for data is needed. A better market place for data can be developed on the model of large e-commerce platforms, which are designed to effectively and efficiently serve both buyers and sellers. In a market place for data, the “buyers” are the data users, and the “sellers” are the organizations who own or curate datasets and seek to make them available to users – preferably free of charge to maximize the use of data. Data platforms must be optimized to provide data users with convenient ways of identifying, locating, and acquiring data (which requires the implementation of a user-friendly search and recommendation system), and to provide data owners with a trustable mechanism to make their datasets visible and discoverable and to share them in a cost-effective, convenient, and safe manner. Achieving such objectives requires detailed and structured metadata that properly describe the data products. Indeed, search algorithms and recommender systems exploit metadata, not data. Metadata are essential to the credibility, discoverability, visibility, and usability of the data. Adopting metadata standards and schemas is a practical and efficient solution to achieve completeness and quality of the metadata. This Guide presents a set of recommended standards and schemas covering multiple types of data along with guidance for their implementation. The data types covered include microdata, statistical tables, indicators and time series, geographic datasets, text, images, video recordings, and programs and scripts. Chapter 1 of the Guide outlines the challenges associated with finding and using data. Chapter 2 describes the essential features of a modern data catalog, and Chapter 3 explains how rich and structured metadata, compliant with the metadata standards and schemas we describe in the Guide, can enable advanced search algorithms and recommender systems. Finally, Chapters 4 to 13 present the recommended standards and schemas, along with examples of their use. This Guide was produced by the Office of the World Bank Chief Statistician as a reference guide for World Bank staff and for partners involved in the curation and dissemination of data related to social and economic development. The standards and schemas it describes are used by the World Bank in its data management and dissemination systems, and for the development of systems and tools for the acquisition, documentation, cataloguing, and dissemination of data. Among these tools is a specialized Metadata Editor designed to facilitate the documentation of datasets in compliance with the recommended standards and schemas, and a cataloguing application (“NADA”). Both applications are openly available. "],["chapter01.html", "Chapter 1 The challenge of finding, accessing, and using data 1.1 Finding data 1.2 Accessing data 1.3 Using data 1.4 A FAIR solution", " Chapter 1 The challenge of finding, accessing, and using data In the realm of data sharing policies adopted by numerous national and international organizations, a common challenge arises for researchers and other data users: the practicality of finding, accessing, and using data. Navigating through an extensive and continually expanding pool of data sources and types can be a complex, time-consuming, and occasionally frustrating undertaking. It entails identifying relevant sources, acquiring and comprehending pertinent datasets, and effectively analyzing them. This challenge is characterized by issues such as insufficient metadata, limitations of data discovery algorithms and systems, and the limited visibility of valuable data repositories and cataloging systems. Addressing the technical hurdles to data discoverability, accessibility, and usability is vital to enhance the effectiveness of data sharing policies and maximize the utility of collected data. In the following sections, we will delve into these challenges. 1.1 Finding data Researchers and data users employ various methods to identify and acquire data. Some rely on personal networks or tribal knowledge to locate and obtain the data they require, or identify datasets of interest in academic publications. This may lead to the use of data that may not be the most relevant for the researcher’s specific purpose. Many other data users rely on general search engines or turn to specialized data catalogs to discover relevant data resources. Prominent internet search engines possess notable capabilities in locating and ranking pertinent resources available online. The algorithms powering these search engines incorporate lexical and semantic capabilities. Straightforward data queries, for example a search for population of India in 2023, will yield an instant answer to the prompt (though not always from the most authoritative source). Less specific queries, for example a search for malnutrition indicators for Yemen, will not return a direct answer, but will provide adequate information and links to useful resources, as the search engine has semantic capability and can associate anthropometric indicators like percentage of stunting, wasting, and underweight population to the concept of malnutrition. Generative artificial intelligence has added the capability of these search engines to engage with data users using natural language, which may be suitable for addressing simple queries, although not without risk of errors and inaccuracies. But internet search engines are not be optimized to identify the most relevant data when the user’s requirements cannot be expressed in the form of a straightforward query. And the answers they return to users’ queries is constrained by the quality of metadata attached to data available online. Specialized online data catalogs and platforms managed by national or international organizations, academic data centers, data archives, or data libraries may be better suited for researchers seeking data. Unfortunately, the search algorithms integrated into these specialized data catalogs are often limited to simple, poorly optimized keyword-based systems, and many rely on sub-optimal metadata. They have lexical search capability – although not always adequately optmized – but often lack advanced semantic search capability and fail to operate as recommender systems. With the rapid advancements of technology and the availability of powerful open-source solutions, the search performance of specialized data catalogs can be significantly enhanced, transforming data catalogs into effective data recommender systems. The solution necessitates not only the adoption of better technology, but also high-quality, comprehensive, and structured metadata. Metadata, which offers a detailed description of datasets, is what search engines rely upon to identify and locate data of interest. “Metadata is structured information that describes, explains, locates, or otherwise makes it easier to retrieve, use, or manage an information resource. Metadata is often called data about data or information about information.” National Information Standards Organization, 2004 “Good metadata enables you to understand, use, and share your own data now and in the future and helps other researchers discover, access, use, repurpose, and cite your data in the long term. It also facilitates long-term archival preservation of the data.” Harvard Medical SChool. https://datamanagement.hms.harvard.edu/collect-analyze/documentation-metadata Metadata are not only needed to enable the data discovery systems. They are also required to allow users to assess the relevance, or fitness-for-purpose, of a dataset. Metadata is the first element that data users examine to assess whether the data align with their requirements. Acquiring a dataset can be time-consuming and occasionally costly activity. Users should be provided with the necessary information to assess the relevance of a dataset prior to acquiring it. 1.2 Accessing data Accessing data is a multifaceted challenge that encompasses legal, ethical, and practical considerations. To ensure that data access is lawful, ethical, efficient, and enables relevant and responsible use of the data, data providers and users must adhere to specific principles and practices: Data providers must ensure that they possess the legal rights to share the data and define clear usage rights for data users. Data users must understand how they can use the data, whether for research, commercial purposes, or other applications, and they must strictly adhere to the terms of use. Data access must comply with data privacy laws and ethical standards. Sensitive or personally identifiable information must be handled with care to protect individuals’ privacy. Data providers must furnish comprehensive metadata that provides context and a full understanding of the data. Metadata should include details about the data’s provenance, encompassing its history, transformations, and processing steps. Understanding how the data was created and modified is essential for accurate and responsible analysis. Data should be available in user-friendly formats compatible with common data analysis tools, such as CSV, JSON, or Excel. Data should be accessible through various means, accommodating users’ preferences and capacities. This may involve offering downloadable files, providing access through web-based tools, and supporting data streaming. - APIs are essential for enabling programmable data access, allowing researchers to retrieve and manipulate data programmatically for integration into their research workflows and applications. 1.3 Using data The challenge for data users extends beyond discovering data to obtaining all the necessary information for a comprehensive understanding of the data and for responsible and appropriate use. For example, a single indicator label such as “unemployment rate (%)” can obscure significant variations by country, source, and time. The international recommendations for the definition and calculation of the “unemployment rate” have evolved over time, and not all countries employ the same data collection instrument (e.g., labor force surveys) to gather the underlying data. Detailed metadata should always accompany data on online data dissemination platforms. This association should be close; relevant metadata should ideally be no more than one click away from the data. This is particularly crucial when a platform publishes data from multiple sources that are not fully harmonized. The scope and meaning of labor statistics, in general, are determined by their source and methodology, which holds true for the unemployment rate. To interpret the data accurately, it is crucial to understand what the data convey, how they were collected and constructed, and to have information on the relevant metadata. The design and characteristics of the data source, typically a labor force survey or a similar household survey for the unemployment rate, especially in terms of definitions and concepts used, geographical and age coverage, and reference periods, have significant implications for the resulting data. Taking these aspects into account is essential when analyzing the statistics. Additionally, it is crucial to seek information on any methodological changes and breaks in series to assess their impact on trend analysis and to keep in mind methodological differences across countries when conducting cross-country studies. (From Quick guide on interpreting the unemployment rate, International Labour Office – Geneva: ILO, 2019, ISBN: 978-92-2-133323-4 (web pdf)). Whenever possible, reproducible or replicable scripts used with the data, along with the analytical output of these scripts, should be published alongside the data. These scripts can be highly valuable to researchers who wish to expand the scope of previous data analysis or reuse parts of the code, and to students who can learn from reading and replicating the work of experienced analysts. To enhance data usability, we have developed a specific metadata schema for documenting research projects and scripts. 1.4 A FAIR solution Improving search capabilities and increasing the accessibility of data requires a combination of enhanced data curation, search engines, and increased accessibility. Adhering to the FAIR principles (Findable, Accessible, Interoperable, and Reusable) is an effective approach to data management (https://doi.org/10.1371/journal.pcbi.1008469). It is essential to focus on the entire data curation process, from acquisition to dissemination, to optimize data analysis by streamlining the process of finding, assessing, accessing, and preparing data. This involves anticipating user needs and investing in data curation for reuse. To ensure data is findable, libraries should implement advanced search algorithms and filters, including full-text, advanced, semantic, and recommendation-based search options. Search engine optimization is also crucial for making catalogs more accessible. Moreover, multiple modes of data access should be available to enhance accessibility, while data should be made interoperable to promote data sharing and reusability. Detailed metadata, including fitness-for-purpose assessments, should be displayed alongside scripts and permanent availability options, such as a DOI, to encourage reuse. "],["chapter02.html", "Chapter 2 The features of a modern data dissemination platform 2.1 Features for data users 2.2 Features for data providers 2.3 Features for catalog administrators 2.4 Machine learning for a better user experience", " Chapter 2 The features of a modern data dissemination platform In the introductory section of this Guide, we proposed that modern data dissemination platforms should be modeled after the most successful e-commerce platforms. These platforms are optimized to serve both buyers (in our context, the data users) and sellers (in our context, the data providers) in the most efficient manner. In this chapter, we outline features that a modern online data catalog should incorporate to adhere to this model. We provide recommendations for developing data catalogs that encompass lexical search and semantic search, filtering, advanced search functionality, interactive user interfaces, and the capability to operate as recommender systems. We approach the topic from three distinct perspectives: the viewpoint of data users, who represent a highly diverse community with varying needs, preferences, expectations, and capabilities; the standpoint of data suppliers, who either publish their data or delegate the task to a data library; and the perspective of catalog administrators, responsible for curating and disseminating data in a responsible, effective, and efficient manner while optimizing both user and supplier satisfaction. The creation of a contemporary data dissemination platform is a collaborative endeavor, engaging data curators, user experience (UX) experts, designers, search engineers, and subject matter specialists with a profound understanding of both the data and the users’ requirements and preferences. Inclusive in this development process should be the active participation of the users, allowing them to provide feedback that directly influences the system’s design. The examples we provided in this chapter are taken from our NADA cataloguing application. Other open-source cataloguing applications are available. 2.1 Features for data users In order to cultivate a favorable user experience, online data catalogs must offer an intuitive and efficient interface, allowing users to effortlessly access the most pertinent datasets. To meet user expectations effectively, one should emphasize simplicity, predictability, relevance, speed, and reliability. Integrating these principles into the design of data catalogs can deliver a seamless and user-friendly experience, akin to the convenience and ease provided by internet search engines and e-commerce platforms. This, in turn, streamlines the process of discovering and obtaining the necessary data, making it quick and hassle-free for users. 2.1.1 Browser Some users will just want to browse a catalog. This should be made easy. The use of cards is recommended. For images, a mosaic view can be provided. For microdata, a variable view. 2.1.2 Simple search interface The default option to search for data in a specialized data catalog must be a single search box. Not all users can be expected to provide ideal queries. The search engine must be able to tolerate spelling mistakes. Auto-completion and spell checkers of queries can be enabled using indexing tools such as Solr or ElasticSearch. The query can be entered using the keyboard or audio. image The search engine must be able to “understand” the user’s query and to return the most relevant results ranked in order of importance. This may require an automated process of query parsing and enhancement. AMong other things, the query parsing may derive information on: - the type of data that are of interest - whether the query is related to one or a few specific indicators available in the catalog assets - whether a geographic location is mentioned - whether a time is mentioned - whether a keyword search or a semantic search is most appropriate - detect the language of the query, and translate if appropriate Based on this information, the application should be able to determine whether an immediate answer could be provided, and whether the answer should be textual, a data grid, or a visualization. 2.1.3 Document as a query A search engine with semantic search capability should be able to process short or long queries, even accepting a document (a PDF or a TXT file) as a query. The search engine will then first analyze the semantic content of the document, convert it into an embedding vector, and identify the closest resources available in the catalog. image 2.1.4 Suggested queries After processing a user query, the application can provide suggestions for related keywords. This can be implemented using a graph of related words generated by natural language processing (NLP) models. Access to an API is necessary to implement keyword suggestions based on such graphs. The example below shows a related words graph for the terms “climate change” as returned by an NLP model. A search interface could retrieve such information via API and display it as follows: 2.1.5 Advanced search It is useful also to provide users with an option to build a more advanced search, targetted to specific metadata elements and with boolean operators. Advanced search are enabled by structured metadata, i.e., by the use of metadata standards and schemas. The advanced search should be available as a user interface and using a syntax option. The interface could be as follows: image This would correspond to the following syntax that the user could enter directly in the search box (and save and/or share with others): title:“demographic transition” AND country:(Kenya) AND body:(poverty) 2.1.6 Geographic search Data catalogs receive numerous queries that are related to a particular geography. Analysis of millions of queries from the World Bank (WB) and International Monetary Fund (IMF) data catalogs revealed that a significant percentage of queries consist of a single country name. For data catalogs that cover multiple countries, creating a “Country page” can provide a quick overview of the most recent and popular datasets of different types, which many users may find helpful. However, geography is not limited to countries alone. Many users may be interested in sub-national data or geographic areas that do not correspond to administrative areas, such as a watershed or an ocean. Especially when a data catalog contains geographic datasets, it is recommended to provide specialized search tools. Most metadata standards allow the use of bounding boxes to specify geographic coverage, which could be used to develop a “search” tool that enables a user to draw a box on a map. But this option is very imperfect (explain why). Example from data.gov (https://catalog.data.gov/dataset/?metadata_type=geospatial) image For geographic datasets, geographic indexing is recommended. The H3 index is a powerful option. (describe) Also, one must take into account that many users will rely on a keywords search to identify data. For example, a raster image of the Philippines (e.g., dataset from a satellite imagery) will contain the country name in the metadata, but the metadata cannot contain the name of all geographic areas coveregd by the data. A user looking for “Iloilo” for example would not find this relevant dataset based on a simple keyword search. The solution would be for the search engine to parse the query, detect if it contains the name of a geographic area, automatically identify the area (polygon of geographic coordinates) that corresponds to it (possibly using an API built around Nominatim), and retrieve resources in the catalog that cover the area (which requires that the datasets in the catalog be indexed geographically). (describe how this works - illustrate from our KCP project “Indexing the world”). image Example of use of Nominatim: The Nominatim application shows the polygon boundary for the search query “Iloilo City” automatically provided by the API. image The search API endpoint of Nominatim returns this JSON data which can be processed to generate search cell(s). image 2.1.7 Query user interface For time series only 2.1.8 Semantic search and recommendations There are two types of search engines: lexical and semantic. The former matches literal terms in the query to the search engine’s index, while the latter aims to identify datasets that have semantically similar metadata to the query. While an ideal data catalog would offer both types of search engines, implementing semantic searchability can be complex. (explain how semantic search workd for different data types - with embeddings and vector indexing and cosine similarity - use of API) For microdata: embeddings based on thematic variable groupings - an option to implement semantic search and recommendations Discovery of microdata poses specific challenges. Typically, a data dictionary will be available, with variables organized by data file. A “virtual” organization of variables by thematic group, with a pre-defined ontology, can significantly improve data discoverability. AI solutions can be used to generate such groupings and map variables to them. The DDI metadata standard provides the metadata elements needed to store information on variable groups. 2.1.9 Latest additions and history The catalog must provide a list of the most recent additions, and a history of additions and updates. For each entry, information must be available on the date the entry was first added to the catalog, and when it was last updated. When a dataset is replaced with a new version, the versioning must be clear. 2.1.10 Customized views Build your own dashboards - Allo users to set preferences: thematic, data type, geographies, search query - Have a page where pre-designed dashboards (country/thematic pages) and custom dashboard are accessible - Allow sharing of dashboards - Core idea: all data and metadata accessible via API; platform operates as a service to feed dashboards (within the platform or external) 2.1.11 Data and metadata as a service Maintain a data service: let external users build dashboards/poaltorms dynamically connected via API; one organization cannot customize to all communities of users. 2.1.12 Ranking results A search engine not only needs to identify relevant datasets but also must return the results in a proper order of relevance, with the most relevant results at the top of the list. If users fail to find a relevant response among the top results, they may choose to search for data elsewhere. The ability of a search engine to return relevant results in the optimal rank depends on the metadata’s content and structure. To optimize the ranking of results, a lot of relevance engineering is required, including tuning advanced search tools like Solr or ElasticSearch. Large data catalogs managed by well-resourced agencies can leverage data scientists to explore the possibility of using machine learning solutions such as “learn-to-rank” to improve result ranking. See section “Improving results ranking” below. For more detailed information, see D. Turnbull and J. Berryman’s (2016) in-depth description of tools and methods. Keyword-based searches can be optimized using tools like Solr or ElasticSearch. Out-of-the-box solutions, such as those provided by SQL databases, rarely deliver satisfactory results. Structured metadata can help optimize search engines and the ranking of results by allowing for the boosting of specific metadata elements. For instance, a query term found in the title of a dataset would carry more weight than if it were found in the notes element, and the results would be ranked accordingly. Similarly, a country name found in the nation or reference country metadata elements should be given more weight than if it were found in a variable description. Advanced indexing tools like Solr and ElasticSearch provide boosting functionalities to fine-tune search engines and enhance result relevancy. 2.1.13 Filtering results Facets or filters are useful for narrowing down datasets based on specific metadata categories. For instance, in a data catalog with datasets from different countries, a “country” facet can help users find relevant datasets quickly. To be effective, filters should be based on metadata elements that have a limited number of categories and a predictable set of options. Controlled vocabularies can be used to enable such filters. Furthermore, as some metadata elements are specific to particular data types, contextual facets should be integrated into the catalog’s user interface to offer relevant filters based on the type of data being searched. Tags and tag groups (which are available in all schemas we recommend) provide much flexibility to implement facets, as we showed in section 1.7. (use pills / …) 2.1.14 Sorting results Sorting results 2.1.15 Collections Organize entries by collections Thematic or other 2.1.16 Linking results Not all data catalog users know exactly what they are looking for and may need to explore the catalog to find relevant resources. E-commerce platforms use recommender systems to suggest products to customers, and data catalogs should have a similar commitment to bringing relevant resources to users’ attention. To achieve this, modern data catalogs display relationships between entries, which may involve data of different types, such as microdata files, analytical scripts, and working papers. These relationships can be documented in the metadata, such as identifying datasets as part of a series or new versions of a previous dataset. When relationships are not known or documented, machine learning tools such as topic models and word embedding models can be used to establish the topical or semantic closeness between resources of different types. This can be used to implement a recommender system in data catalogs, which automatically identifies and displays related documents and data for a given resource. The image below shows how “related documents” and “related data” can be automatically identified and displayed for a resource (in this case a document). 2.1.17 Organized results When a data catalog contains multiple types of data, it should offer an easy way for users to filter and display query results by data type. For example, when searching for “US population,” one user may only be interested in knowing the total population of the USA, while another may need the public use census microdata sample, and a third may be searching for a publication. To cater to such needs, presenting query results in type-specific tabs (with an “All” option) and/or providing a filter (facet) by type will allow users to focus on the types of data relevant to them. This is similar to commercial platforms that offer search results organized by department, allowing users to search for “keyboard” in either the “music” or “electronics” department. 2.1.18 Saving and sharing results URL / API query ; export list ; social networks, etc. 2.1.19 Personalized results Option for user to set a profile with preferences that may be used to display results. 2.1.20 Metadata display and formats To make metadata easily accessible to users, it’s important to display it in a convenient way. The display of metadata will vary depending on the data type being used, as each type uses a specific metadata schema. For online catalogs, style sheets can be utilized to control the appearance of the HTML pages. In addition to being displayed in HTML format, metadata should be available as electronic files in JSON, XML, and potentially PDF format. Structured metadata provides greater control and flexibility to automatically generate JSON and XML files, as well as format and create PDF outputs. It’s important that the JSON and XML files generated by the data catalog comply with the underlying metadata schema and are properly validated. This ensures that the metadata files can be easily and reliably reused and repurposed. 2.1.21 Variable-level comparison E-commerce platforms commonly allow customers to compare products by displaying their pictures and descriptions (i.e., metadata) side-by-side. Similarly, for data users, the ability to compare datasets can be valuable to evaluate the consistency or comparability of a variable or an indicator over time or across sources and countries. However, to implement this functionality, detailed and structured metadata at the variable level are necessary. These metadata standards, such as DDI and ISO 19110/19139, enable the implementation of this feature. In the example below, we show how a query for water returns not only a list of seven datasets, but also a list of variables in each dataset that match the query. The variable view shows that a total of 90 variables match the searched keyword. After selecting the variables of interest, users should be able to display their metadata in a format that facilitates comparison. The availability of detailed metadata is crucial to ensure the quality and usefulness of these comparisons. For example, when working with a survey dataset, capturing information on the variable universe, categories, questions, interviewer instructions, and summary statistics would be ideal. This comprehensive metadata will enable users to make informed decisions about which variables to use and how to analyze them. 2.1.22 Transparency in access policies The terms of use (ideally provided in the form of a standard license) and the conditions of access to data should be made transparent and visible in the data catalog. The access policy will preferably be provided using a controlled vocabulary, which can be used to enable a facet (filter) as shown in the screenshot below. 2.1.23 Data and metadata API To keep up with modern data management needs, a comprehensive data catalog must provide users with convenient access to both data and metadata through an application programming interface (API). The structured metadata in a catalog allows users to extract specific components of the metadata they need, such as the identifier and title of all microdata and geographic datasets conducted after a certain year. With an API, users can easily and automatically access datasets or subsets of datasets they require. This enables internal features of the catalog such as dynamic visualizations and data previews, making data management more efficient. It is crucial that detailed documentation and guidelines on the use of the data and metadata API are provided to users to maximize the benefits of this feature. Metadata (and data) should be accessible via API The API should be well documented with examples. API query builder: UI for building an API query 2.1.24 Online data access forms Make the process of registration, requests fully digital, easy, and fully traceable. 2.1.24.1 Bulk download option Even when UI or visualizations etc are shown, many users just want to downlaod the data and metadata. (…) 2.1.25 Data preview When the data (time series and tabular data, possibly also microdata) are made available via API, the data catalog can also provide a data preview option, and possibly a data extraction option, to the users. Multiple JavaScript tools, some of them open-source, are available to easily embed data grids in catalog pages. For a document, the “data preview” would consist of a document viewer that would allow the user to view the document within the application (even when the document is not stored in the catalog itself but in an external website). When implementing such a feature, check that the terms of use of the origination source allows that. image 2.1.26 Data extraction For some data (microdata / time series), provide a simple way for users to extract specific variables / observations. 2.1.27 Data visualizations Embedding visualizations in a data catalog can greatly enhance its usefulness. Different types of data require different types of visualizations. For instance, time series data can be effectively displayed using a line chart, while images with geographic information can be displayed on a map that shows the location of the image capture. For more complex data, other types of charts can be created as well. However, in order to embed dynamic charts in a catalog page, the data needs to be available via API. A good data catalog should offer flexibility in the types of charts and maps that can be embedded in a metadata page. For instance, the NADA catalog provides catalog administrators with the ability to create visualizations using various tools. By including visualizations in a data catalog, users are able to quickly and easily understand the data and gain insights from it. The NADA catalog allows catalog adinistrators to generate such visualizations using different tools of their choice. The example below were generated using the open-source Apache eCharts library. Example: Line chart for a time series Example: Geo-location of an image 2.1.28 Permanent URLs To ensure efficient management and organization of datasets within a data catalog, it is essential to assign a unique identifier to each dataset. This identifier should not only meet technical requirements but also serve other purposes such as facilitating dataset citation. To achieve maximum effectiveness, it is recommended that datasets have a globally unique identifier, which can be accomplished through the assignment of a Digital Object Identifier (DOI). DOIs can be generated in addition to a catalog-specific unique identifier and provide a permanent and persistent identifier for the dataset. For more information about the process of generating DOIs and the reasons to use them, visit the DataCite website. Include a citation requirement in metadata. 2.1.29 Archive / tombstone When a dataset is removed or replaced, the reproducibility of some analysis may become impossible. This may be a problem for some users. Unless there is a reason for not making them accessible, old versions of datasets should be kept accessible. But they should not be the ones indexed and dislayed in the catalog, to avoid cnfusion or the risk that a user would exploit a version other than the latest. Moving datasts that are replaced to an archive section of the catalog (not indexed) is an option. Note that DOIs require a permanent web page. 2.1.30 Catalog of citations A data catalog should not be limited to data. Ideally, the scripts produced by researchers to analyze the data, and the output of their analysis, should also be available. An ideal data catalog will allow a user to: search for data, and find/access the related scripts and citations search for a document (analytical output), and find/access the related data and scripts search for a script, and find/access the data and analytical output Maintain a catalog of citations of datasets. image 2.1.31 Reproducible and replicable scripts Document, catalog, and publish reproducible/replicable scripts. image 2.1.32 Notifications or alerts Users may want to be automatically notified (by email) when new entries of interest are added, or when change are made to a specific resource. A system allowing users to set criteria for automatic notification can be developed. Example of Google SCholar alerts: image 2.1.33 Providing feedback Feedback on catalog certainly. In the form of a “Contact” email and possibly a “feedback form”. Also, if the platform itself is open source, GitHub for issues and suggestions on the application itself. BUT: Users forum, “reviews” as in e-commerce platforms, is not always recommended. Not all users are ’constructive” and qualified. Requires moderation, which can be costly and controversial. May create dis-incentives for data producers to publish their data. Could be a good option for data platforms that are internal to an organization (where comments are attributed, and an authentication system controls who can provide feedback), but not for public data platforms. 2.1.34 Getting support Contact, responsive FAQs 2.1.35 Web content accessibility Web Content Accessibility Guidelines (WCAG) international standard. WCAG documents explain how to make web content more accessible to people with disabilities. ADA provides people with disabilities the same opportunities, free of discrimination. WCAG is a compilation of accessibility guidelines for websites, whereas ADA is a civil rights law in the same ambit. 2.2 Features for data providers When the data catalog is not administered by the producer of the data but by an entrusted repository, data providers want: 2.2.1 Safety Safety, protection against reputation risk (responsible use of data) Guarantee that regulations and terms of use will be strictly complied with; reputation of the organization that manages the catalog (Seal of Approval or other accreditation; properly staffed) 2.2.2 Visibility Visibility to maximize the use of data (including options to share/publicize on social media) - screenshot from data.gov image 2.2.3 Low burden “do not disturb”: low burden of deposit and no burden of serving users (minimum interaction with users; providing detailed metadata helps) 2.2.4 Real time information on usage Monitoring of usage (downloads and citations) to assess demand; reports on this (automatically generated) 2.2.5 Feedback from users Feedback on quality issues 2.3 Features for catalog administrators In addition to meeting the needs of its users, a modern data catalog should also offer features that a catalog administrator can appreciate or expect. The features listed below can serve as checklist for choice of an application or development of features. These features may include: 2.3.1 Data deposit User friendly interface for data deposit. Compliant with metadata stadards. With embedded quality gateways and clearance procedures. 2.3.2 Privacy protection Tools for privacy protection control (e.g., tools to identify direct identifiers) 2.3.3 Free software Availability of the application as an open-source software, accompanied by detailed technical documentation 2.3.4 Security Robust security measures, such as compatibility with advanced authentication systems, flexible role/profile definitions, regular upgrades and security patches, and accreditation by information security experts 2.3.5 IT affordability Reasonable IT requirements, such as shared server operability and sufficient memory capacity 2.3.6 Ease of maintenance Ease of upgrading to the latest version 2.3.7 Interoperability Interoperability with other catalogs and applications, as well as compliance with metadata standards. By publishing metadata across multiple catalogs and hubs, data visibility can be increased, and the service provided to users can be maximized. This requires automation to ensure proper synchronization between catalogs (with only one catalog serving as the “owner” of a dataset), which necessitates interoperability between the catalogs, enabled by compliance with common formats and metadata standards and schemas. 2.3.8 Flexibility on access policies Flexibility in implementing data access policies that conform to the specific procedures and protocols of the organization managing the catalog 2.3.9 API based system for automation and efficiency Availability of APIs for catalog administration Easy automation of procedures (harvesting, migration of formats, editing, etc.) This means API-based system. 2.3.10 Featuring tools Ability to feature datasets 2.3.11 Usage monitoring and analytics Easy activation of usage analytics (using Google Analytics, Omniture, or other) 2.3.12 Multilingual capability Multilingual capability, including internationalization of the code and the option for catalog administrators to translate or adapt software translations 2.3.13 Embedded SEO Embedded Search Engine Optimization (SEO) procedures 2.3.14 Widgets and plugins Ability to use widgets to embed custom charts, maps, and data grids in the catalog 2.3.15 Feedback to developers Ability to provide feedback and suggestions to the application developers. 2.4 Machine learning for a better user experience In Chapter 1, we emphasized the importance of generating comprehensive metadata and how machine learning can be leveraged to enrich it. Natural language processing (NLP) tools and models, in particular, have been employed to enhance the performance of search engines. By utilizing machine learning models, semantic search engines and recommender systems can be developed to aid users in locating relevant data. Moreover, machine learning can improve the ranking of search results to ensure that the most pertinent results are brought to users’ attention. Google, Bing, and other leading search engines have employed machine learning for years. While specialized data catalogs may not have the resources to implement such advanced systems, catalog administrators should explore opportunities to utilize machine learning to enhance their users’ experience. Catalogs can make use of external APIs to exploit machine learning solutions without requiring administrators to develop machine learning expertise or train their own models. For instance, APIs can be used to automatically and instantly translate queries or convert queries into embeddings. Ideally, a global community of practice will develop such APIs, including training NLP models, and provide them as a global public good. 2.4.1 Improved discoverability In 2019, Google introduced their NLP model, BERT (Biderectional Encoder Representations from Transformers), as a component of their search engine. Other major companies, such as Amazon, Apple, and Microsoft, are also developing similar models to enhance their search engines. One of the objectives of these companies is to create search engines that can support digital assistants like Siri, Alexa, Cortana, and Hey Google, which operate on a conversational mode and provide answers to users rather than just links to resources. Improving NLP models is a continuous and strategic priority for these companies, as not all answers can be found in textual resources. Google is also conducting research to develop solutions for extracting answers from tabular data. Specialized data catalogs maintained by data centers, statistical agencies, and other data producers still rely almost exclusively on full-text search engines. The search engine within these catalogs looks for matches between keywords submitted by the user and keywords found in an index, without attempting to understand or improve the user’s query. This can result in issues such as misinterpretation of the query, as discussed in Chapter 1, where a search for “dutch disease” may be mistakenly interpreted as a health-related query rather than an economic concept. The administrators of these specialized data catalogs often lack the resources to develop and implement the most advanced NLP solutions, and should not be required to do so. To assist them in transitioning from keyword-based search systems to semantic search and recommender systems, open solutions should be developed and published, such as pre-trained NLP models, open source tools, and open APIs. This would necessitate the creation and publishing of global public goods, including specialized corpora and the training of embedding models on these corpora, open NLP models and APIs that data catalogs can utilize to generate embeddings for their metadata, query parsers that can automatically improve/optimize queries and convert them into numeric vectors, and guidelines for implementing semantic search and recommender systems using tools like Solr, ElasticSearch, and Milvus. Simple models created from open source tools and publicly-available documents can provide straightforward solutions. In the example below, we demonstrate how these models can “understand” the concept of “dutch disease” and correctly associate it with relevant economic concepts. 2.4.2 Improved results ranking Effective search engines not only identify relevant resources, but also rank and present them to users in an optimal order of relevance. As highlighted in Chapter 1, research shows that 75% of search engine users do not click past the first page, emphasizing the importance of ranking and presenting results effectively. Data catalog administrators face two challenges in improving their search engine performance. Firstly, they need to improve their ranking in search engines such as Google by enriching metadata and embedding metadata compliant with DCAT or schema.org standards on catalog pages. Secondly, they need to improve the ranking of results returned by their own search engines in response to user queries. Google’s success in 1996 was largely attributed to their revolutionary approach to ranking search results called PageRank. Since then, they and other leading search engines have invested heavily in improving ranking methodologies with advanced techniques like RankBrain (introduced in 2015). These approaches include primary, contextual, and user-specific ranking, which utilize machine learning models referred to as Learn to Rank models. Lucidworks provides a clear description of this approach, noting that “Learning to rank (LTR) is a class of algorithmic techniques that apply supervised machine learning to solve ranking problems in search relevancy. In other words, it’s what orders query results. Done well, you have happy employees and customers; done poorly, at best you have frustrations, and worse, they will never return. To perform learning to rank you need access to training data, user behaviors, user profiles, and a powerful search engine such as SOLR. The training data for a learning to rank model consists of a list of results for a query and a relevance rating for each of those results with respect to the query. Data scientists create this training data by examining results and deciding to include or exclude each result from the data set.” Implementing Learn to Rank models can be challenging for data catalog administrators due to the resource-intensive nature of building the training dataset, fitting models, and implementing them. An alternative solution is to optimize the implementation of Solr or ElasticSearch, which can often contribute significantly to improving the ranking of search results. For more information on the challenge and available tools and methods for relevancy engineering, refer to D. Turnbull and J. Berryman’s 2016 publication. "],["chapter03.html", "Chapter 3 The power of rich, structured metadata 3.1 Rich metadata 3.2 Structured metadata 3.3 Augmenting metadata 3.4 Recommended standards and schemas 3.5 Search engine optimization: schema.org 3.6 Where to find the schemas’ documentation 3.7 Generating structured metadata", " Chapter 3 The power of rich, structured metadata The previous chapter defined the features of an advanced data discoverability and dissemination solution. What enables such a solution is not only the algorithms and technology, but also the quality of the metadata available to enable them. Metadata is defined as “… structured information that describes, explains, locates, or otherwise makes it easier to retrieve, use or manage that resource” (Data thesaurus, NIH, https://nnlm/gov/data/thesaurus) Metadata must be findable by machines and usable by humans. This chapter describes what metadata are needed, and how they can be organized and improved to fully enable the search and recommender tools. The metadata must be rich and structured. To make them rich, machine learning can be used. To ensure consistent structure, the use of metadata standards and schemas is highly recommended. In this chapter, we build the case for rich, augmented, structured metadata and for the adoption of metadata standard and schemas. The second part of this Guide will provide a detailed description of each recommended standard or schema, for different data types. 3.1 Rich metadata Rich metadata means detailed and comprehensive metadata. Rich metadata are beneficial to both the users and the providers (producers and curators) of data. 3.1.1 Benefits for data users Being provided with rich metadata helps data users: Find data of interest. The metadata provide much of the content that the search engine will be able to index and discover. The richer the metadata, the better the search engine will be able to help users identify relevant data. Understand what the data are measuring and how they have been created. Without a proper description of the data, the risk is high that a user will misunderstand and possibly misuse them, or simply decide not to make use of them. Assess the quality of the data, including their reliability, fitness for purpose, and consistency with other datasets when the purpose requires integration of multiple datasets. 3.1.2 Benefits for data producers For the data producers, rich metadata will contribute to: Ensure transparency, auditability, and credibility of the data and of the derived products. Increase the visibility of the data, and thus the demand for, and use of the data. Reduce the cost of operating a data dissemination service by lowering the burden of responding to users’ requests for information. Support the preservation of institutional memory. Provide the meta-database needed to harmonize data collection methods and instruments, e.g., by providing convenient tools to compare variables across datasets. A compelling case for rich metadata for transparency and harmonization can be found in “The Struggle for Integration and Harmonization of Social Statistics in a Statistical Agency - A Case Study of Statistics Canada” by Gordon Priest (2010). 3.1.3 Scope of the metadata What makes metadata “rich and comprehensive” is not always easy to define, and is specific to each data type. Microdata and geospatial datasets for example will require much more – and different– metadata than a document or an image. Metadata standards and schemas provide data curators with detailed lists of elements (or fields), specific to each data type, that must or may be provided to document a dataset. The metadata elements included in a standard or schema will typically cover cataloguing material, contextual information, and explanatory materials. 3.1.3.1 Cataloguing material Cataloguing material includes elements such as a title, a unique identifier for the dataset, a version number and description, as well as information related to the data curation (including who generated the metadata and when, or where and when metadata may have been harvested from an external catalog). This information allows the dataset to be uniquely identified within a collection/catalog, and serves as a bibliographic record of the dataset, allowing it to be properly acknowledged and cited in publications. 3.1.3.2 Contextual information Contextual information describes the context in which the data were collected and how they were put to use. It enables secondary users to understand the background and processes behind the data production. Contextual information should cover topics such as: What justified or required the data collection (the objectives of the data production exercise); Who or what was being studied; The geographic and temporal coverage of the data; Changes and developments that occurred over time in the data collection methodology and in the dataset, if relevant. For repeated cross-section, panel, or time series datasets, this may include information describing changes in the question text, variable labeling, sampling procedures, or others; What are the key output of the data collection, such as a publication, the design or implementation of a policy or project, etc. Problems encountered in the process of data collection, entry, checking, and cleaning; Other useful information on the life cycle of the dataset. 3.1.3.3 Explanatory material Explanatory materials are the information that should be created and preserved to ensure the long-term functionality of a dataset and its contents. This applies mostly to microdata, geospatial data, and to some extent to tabulations and to time series and indicators databases. It is less relevant for images, videos, and documents. Explanatory materials include: Information about the data collection methods: This section should describe the instruments used and methods employed, and how they were developed. If applicable, details of the sampling design and sampling frames should be included. It is also useful to include information on any monitoring process undertaken during the data collection as well as details of quality controls. Information about the structure of the dataset: Key to this information is a detailed data dictionary describing the structure of the dataset, including information about relationships between individual files or records within the study. For example, it should include key variables required for unique identification of subjects across files (required to properly merge data files), the number of cases and variables in each file, and the number of files in the dataset. For relational models, the structure and relations between datasets records and elements should be described. Technical information: This information relates to the technical framework and should include the computer system used to generate the data and related files; the software packages with which the files were created. Variables and values, coding and classification schemes (for microdata and geospatial data): The documentation should contain an exhaustive list of variables in the dataset, including a complete explanation and full details about the coding and classifications used for the information allocated to those fields. It is especially important to have blank and missing fields explained and accounted for. It is helpful to identify variables to which standard coding classifications apply, and to record the version of the classification scheme used. Information about derived variables (for microdata and geospatial data, and tabulations): Many data producers derive new variables from original data. This may be as simple as grouping raw age (in years) data according to groups of years appropriate for the survey, or it may be much more complex and require the use of sophisticated algorithms. When grouped or derived variables are created, it is important that the logic for the grouping or derivation is clear. Simple grouping, such as for age, can be included within the data dictionary. More complex derivations require other means of recording the information. Sufficient supporting information should be provided to allow an easy link between the core variables used and the resultant variables. In addition, computer algorithms used to create the derivations should be saved together with information on the software. Weighting and grossing (for sample survey microdata): Weighting and grossing variables must be fully documented, with explanations of the construction of the variables and clear indications of the circumstances in which they should be used. The latter is particularly important when different weights are applied for different purposes. Data source: Details about the source from which the data is derived should be included. For example, when the data source consists of responses to survey questionnaires, each question should be carefully recorded in the documentation. Ideally, the text will include a reference to the generated variable(s). It is also useful to explain the conditions under which a question would be asked, including, if possible, the cases to which it applies and, ideally, a summary of response statistics. Confidentiality and anonymization: It is important to determine whether the data contains any confidential information on individuals, households, organizations, or institutions. If so, such information should be recorded together with any agreement on how to use the data, such as with survey respondents. Issues of confidentiality may restrict the analyses to be undertaken or results to be published, particularly if the data is to be made available for secondary use. If the data were anonymized to prevent identification, it is wise to record the anonymization procedure (taking care of not providing information that would enable a reverse-engineering of the procedure) and its impact on the data, as such modification may restrict subsequent analysis. 3.1.4 Controlled vocabularies Metadata standards and schemas provide lists of elements with a description of the expected content to be captured in each element. For some elements, it may be appropriate to restrict the valid content to pre-selected options or “controlled vocabularies”. A controlled vocabulary is a pre-defined list of values that can be accepted as valid content for some elements. For example. a metadata element “data type” should not be populated with free text, but should make use of a pre-defined taxonomy of data types. The use of controlled vocabularies (for selected metadata elements) will be particularly useful to implement search and filter features in data catalogs (see section 3.1.1 of this Guide), and to foster inter-operability of data catalogs. In library and information science, controlled vocabulary is a carefully selected list of words and phrases, which are used to tag units of information (document or work) so that they may be more easily retrieved by a search.Wikipedia Controlled vocabularies can be specific to an agency, or be developed by a community of practice. For example, the list of countries and codes provided by the ISO 3166 can be used as a controlled vocabulary for a metadata element country or nation; the ISO 639 list of languages can be used as a controlled vocabulary for a metadata element language. Or the CESSDA topics classification can be used as a controlled vocabulary for the element topics found in most metadata schemas. When a controlled vocabulary is used in a metadata standard or schema, it is good practice to include an identification of its origin and version. Some recommended controlled vocabularies are included in the description of the ISO 19139 standard for geographic data and services (see chapter 6). Most standards and schemas we recommend also include a topics element. Annex 1 provides a description of the CESSDA topics classification. Ideally, controlled vocabulary will be developed in compliance with the FAIR principles for scientific data management and stewardship: Findability, Accessibility, Interoperability, and Reuse. 3.1.5 Tags All metadata standards and schemas described in this guide include a tags element, even when this element is not part of a standard. This element enables the implementation of filters (facets) in data cataloguing applications, in a flexible manner. The tags metadata element is repeatable (meaning that more than one tag can be attached to a dataset) and contains two sub-elements to capture a tag (word or phrase), and the tag_group (if any) it belongs to. To illustrate the use of tags, let’s assume that a catalog contains datasets that are available freely, and others that are available for a fee. The catalog administrator may want to provide a filter (facet) in the user interface that would allow users to filter datasets based on their free or not free status. None of the metadata schemas we describe in the Guide contains an element specifically designed to indicate the “free” or “for a fee” nature of the data. But this information can be captured in a tag “Free” or “For a fee” that would be added to each dataset in the catalog, with a tag group that could be named “free_or_fee”. In R, this would be done as follows (for a “Free” dataset): # ... , tags = list( list(tag = &quot;Free&quot;, tag_group = &quot;free_or_fee&quot;) ) # ... In the NADA catalog, a facet titled “Free or for a fee” can then be created based on the information found in the tags element where tag_group = “free_or_fee”. 3.2 Structured metadata 3.2.1 What structure? Metadata should not only be comprehensive and detailed, they should also be organized in a structured manner, preferably using a standardized structure. Structured metadata means that the metadata are stored in specific fields (or elements) organized in a metadata schema. Standardized means that the list and description of elements are commonly agreed by a community of practice. “A metadata schema is a system that defines the data elements needed to describe a particular object, such as a certain type of research data.” (Ten rules data discovert - add ref) Some metadata standards have originated from academic data centers, like the Data Documentation Initiative (DDI), maintained by the Inter-University Consortium for Political and Social Research (ICPSR) at the University of Michigan. Other found their origins in specialized communities of practice (like the ISO 19139 for geospatial resources). The private sector also contributes to the development of standards, like the International Press Telecommunications Council (IPTC) standard developed by and for news media. Metadata compliant with standards and schemas will typically be stored as JSON or XML files (described in Chapter 2), which are plain text files. The example below show how a simple free-text content would be structured and stored in JSON and XML formats, using metadata elements from the DDI Codebook metadata standard: Free text version: The Child Mortality Survey (CMS) was conducted by the National Statistics Office of Popstan from July 2010 to June 2011, with financial support from the Child Health Trust Fund (TF123_456). Structured, machine-readable (JSON) version: &quot;title&quot; : &quot;Child Mortality Survey 2010-2011&quot;, &quot;alternate_title&quot; : &quot;CMS 2010-2011&quot;, &quot;authoring_entity&quot;: &quot;National Statistics Office (NSO)&quot;, &quot;funding_agencies&quot;: [{&quot;name&quot;:&quot;Child Health Trust Fund (CHTF)&quot;, &quot;grant&quot;:&quot;TF123_456&quot;}], &quot;coll_dates&quot; : [{&quot;start&quot;:&quot;2010-07&quot;, &quot;end&quot;:&quot;2011-06&quot;}], &quot;nation&quot; : [{&quot;name&quot;:&quot;Popstan&quot;, &quot;abbreviation&quot;:&quot;POP&quot;}] } In XML format: &lt;titl&gt;Child Mortality Survey 2010-2011&lt;/titl&gt; &lt;altTitl&gt;CMS 2010-2011&lt;/altTitl&gt; &lt;rspStmt&gt;&lt;AuthEnty&gt;National Statistics Office&lt;/AuthEnty&gt;&lt;/rspStmt&gt; &lt;fundAg abbr=CHTF&gt;Child Health Trust Fund&lt;/fundAg&gt; &lt;collDate date=&quot;2010-07&quot; event=&quot;start&quot;/&gt; &lt;collDate date=&quot;2011-06&quot; event=&quot;end&quot;/&gt; &lt;nation abbr=&quot;POP&quot;&gt;Popstan&lt;/nation&gt; All three versions contain (almost) the same information. In the structured version, we have added acronyms and the ISO country code. This does not create new information but will help make the existing information more discoverable and inter-operable. The structured version is clearly more suitable for publishing in a meta-database (or catalog). Organizing and storing metadata in such a structured manner will enable all kinds of applications. For example, when metadata for a collection of surveys are stored in a database, it becomes straightforward to apply filters (for example, a filter by country using the nation/name element) and targeted searches to answer questions like “What data are available that cover the month of December 2010?” or “What surveys did the CHTF sponsor?”. 3.2.2 Formats for structured metadata: JSON and XML Metadata standards and schemas consist of structured lists of metadata fields. They serve multiple purposes. First, they help data curators generate complete and usable documentation of their datasets. Metadata standards that are intuitive and human-readable better serve this purpose. Second, they help generate machine-readable metadata that are the input to software applications like on-line data catalogs. Metadata available in open file formats like JSON (JavaScript Object Notation) and XML (eXtended Markup Language) are most suitable for this purposes. Some international metadata standards like the Data Documentation Initative (DDI Codebook, for microdata), the ISO 19139 (for geospatial data), or the Dublin Core (a more generic metadata specification) are described and published as XML specifications. Any XML standard or schema can be “translated” into JSON, which is our preferred format (a choice we justify in the next section). JSON and XML formats have similarities: Both are non-proprietary text files Both are hierarchical (they may contain values within values) Both can be parsed and used by many programming languages including R and Python JSON files are however easier to parse than XML, easier to generate programmatically, and easier to read by humans. This makes them our preferred choice for describing and using metadata standards and schemas. Metadata in JSON are stored as key/value pairs, where the keys correspond to the names of the metadata elements in the standard. Values can be string, numeric, boolean, arrays, null, or JSON objects (for a more detailed description of the JSON format, see www.w3schools.com). Metadata in XML are stored within named tags. The example below shows how the JSON and XML formats are used to document the list of authors of a document, using elements from the Dublin Core metadata standard. In the documents schema, authors are documented in the metadata element authors which contains the following sub-elements: first_name, initial, last_name, and affiliation. In JSON, this information will be stored in key/value pairs as follows. &quot;authors&quot; : [ {&quot;first_name&quot; : &quot;Dieter&quot;, &quot;last_name&quot; : &quot;Wang&quot;, &quot;affiliation&quot;: &quot;World Bank Group; Fragility, Conflict and Violence&quot;}, {&quot;first_name&quot; : &quot;Bo&quot;, &quot;initial&quot; : &quot;P.J.&quot;, &quot;last_name&quot; : &quot;Andrée&quot;, &quot;affiliation&quot;: &quot;World Bank Group; Fragility, Conflict and Violence&quot;}, {&quot;first_name&quot; : &quot;Andres&quot;, &quot;initial&quot; : &quot;F.&quot;, &quot;last_name&quot; : &quot;Chamorro&quot;, &quot;affiliation&quot;: &quot;World Bank Group; Development Data Analytics and Tools&quot;}, {&quot;first_name&quot; : &quot;Phoebe&quot;, &quot;initial&quot; : &quot;G.&quot;, &quot;last_name&quot; : &quot;Spencer&quot;, &quot;affiliation&quot;:&quot;World Bank Group; Fragility, Conflict and Violence&quot;} ] In XML, the same information will be stored within named tags as follows. &lt;authors&gt; &lt;author&gt; &lt;first_name&gt;Dieter&lt;/first_name&gt; &lt;last_name&gt;Wang&lt;/last_name&gt; &lt;affiliation&gt;World Bank Group; Fragility, Conflict and Violence&lt;/affiliation&gt; &lt;/author&gt; &lt;author&gt; &lt;first_name&gt;Bo&lt;/first_name&gt; &lt;initial&gt;P.J.&lt;/initial&gt; &lt;last_name&gt;Andrée&lt;/last_name&gt; &lt;affiliation&gt;World Bank Group; Fragility, Conflict and Violence&lt;/affiliation&gt; &lt;/author&gt; &lt;author&gt; &lt;first_name&gt;Andres&lt;/first_name&gt; &lt;initial&gt;E.&lt;/initial&gt; &lt;last_name&gt;Chamorro&lt;/last_name&gt; &lt;affiliation&gt;World Bank Group; Development Data Analytics and Tools&lt;/affiliation&gt; &lt;/author&gt; &lt;author&gt; &lt;first_name&gt;Phoebe&lt;/first_name&gt; &lt;initial&gt;G.&lt;/initial&gt; &lt;last_name&gt;Spencer&lt;/last_name&gt; &lt;affiliation&gt;World Bank Group; Fragility, Conflict and Violence&lt;/affiliation&gt; &lt;/author&gt; &lt;/authors&gt; 3.2.3 Benefits of structured metadata Metadata standards and schemas must be comprehensive and intuitive. They aim to provide comprehensive and granular lists of elements. Some standards may contain a very long list of elements. Most often, only a subset of the available elements will be used to document a specific dataset. For example, the elements of the DDI metadata standard related to sample design will be used to document sample survey datasets but will be ignored when documenting a population census or an administrative dataset. In all standards and schemas, most elements are optional, not required. Data curators should however try and provide content for all elements for which information is or can be made available. Complying with metadata standards and schemas contributes to the completeness, usability, discoverability, and inter-operability of the metadata, and to the visibility of the data and metadata. 3.2.3.1 Completeness When they document datasets, data curators who do not make use of metadata standards and schemas tend to focus on the readily-available documentation and may omit some information that secondary data users –and search engines– may need. Metadata standards and schemas provide checklists of what information could or should be provided. These checklists are developed by experts, and are regularly updated or upgraded based on feedback received from users or to accommodate new technologies. Generating complete metadata will often be a collaborative exercise, as the production of data involves multiple stakeholders. The implementation of a survey, for example, may involve sampling specialists, field managers, data processing experts, subject matter specialists, and programmers. Documenting a dataset should not be seen as a last and independent step in the implementation of a data collection or production project. Ideally, metadata will be captured continuously and in quasi-real time during the entire life cycle of the data collection/production, and contributed by those who have most knowledge of each phase of the data production process. Generating complete and detailed metadata may be seen as a burden by some organizations or researchers. But it will typically represent only a small fraction of the time and budget invested in the production of the data, and is an investment that will add much value to the data by increasing their usability and discoverability. 3.2.3.2 Usability Fully understanding a dataset before conducting analysis should be a pre-requisite for all researchers and data users. But this will only be possible when the documentation is easy to obtain and exploit. Convenience to users is key. When using a geographic dataset for example, the user should be able to immediately find the coordinate reference system that was used. When using survey microdata, which may contain hundreds or thousands of variables, the user need to be able to immediately access information on a variable label, underlying question, universe, categories, etc. Structured metadata enables such “convenience”, as they can easily be transformed into bookmarked PDF documents, searchable websites, machine-readable codebooks, etc. The way metadata are displayed can be tailored to the specific needs of different categories of users. 3.2.3.3 Discoverability Data discoverability is one of the main tasks, next to availability and interoperability, that public policy makers and implementers should take into due consideration in order to foster access, use and re-use of public sector information, particularly in case of open data. Users shall be enabled to easily search and find data they need for the most different purposes. That is clearly highlighted in the introduction statements of the INSPIRE Directive, where we can read that “The loss of time and resources in searching for existing (spatial) data or establishing whether they may be used for a particular purpose is a key obstacle to the full exploitation of the data available”. From Metadata and data portals/catalogues are essential assets to enable that data discoverability. What matters is not only what metadata are provided as input to the search engines that matters, it is also how the metadata are provided. To understand the value of structured metadata, we need to take into consideration how search engines ingest, index, and exploit the metadata. In brief, the metadata will need to be acquired, augmented, analyzed and transformed, and indexed before they can be made searchable. We provide here an overview of the process, which is described in detail by D. Turnbull and J. Berryman in “Relevant Search: With applications for Solr and Elasticsearch” (2016). Acquisition: Search engines like Google and Bing acquire metadata by crawling billions of web pages using web crawlers (or bots), with an objective to cover the entire web. Guidance is available to webmasters on how to optimize websites for visibility (see for example Google’s Search Engine Optimization (SEO) Starter Guide. The search tools embedded in specialized data catalogs have a much simpler task, as the catalog administrators and curators generate or control, and provide, the well-contained content to be indexed. In a cataloguing application like NADA, this content is provided in the form of structured metadata files saved in JSON or XML format. For textual data (documents), the content of the document (not only the metadata on the) can also be indexed. The process of acquisition/extraction of metadata by the search engine tool must preserve the structure of the metadata, in its original or in a modified form. This will be critical for optimizing the performance of the search tool and the ranking of query results (e.g., a keyword found in a document title may have more weight than the same keyword found in the document abstract), for implementing facets, or for providing advanced search options (e.g., search only in the “authors” metadata field). Augmentation or enrichment: the content of the metadata can be augmented or enriched in multiple ways, often automatically (by extracting information from an external source, or using machine learning algorithms). Part of this augmentation process should happen before the metadata are submitted to the search engine. Other procedures of enrichment of the metadata may be implemented after acquisition of the metadata by the search engine tool. Metadata augmentation can have a significant impact on the discoverability of data. See the section “Augmented (enriched) metadata” below. Analysis or transformation: The metadata generated by the data curator and by the augmentation process will mostly (not exclusively) consist of text. For the purpose of discoverability, some of the text has no value; words like “the”, “a”, it”, “with”, etc., referred to as stop words, will be removed from the metadata (multiple tools are available for this purpose). The remaining words will be converted to lowercase, may be submitted to spell checkers (to exclude or fix errors), and words will be stemmed or lemmatized. The stemming or lemmatization consist of converting words to their stem or root); this will among other transformations change plurals to singular and the conjugated forms of the verbs to their base form. Last, the transformed metadata will be tokenized, i.e. split into a list of terms (tokens). To enable semantic searchability, the metadata can also be converted into numeric vectors using natural language processing embedding models. These vectors will be saved in a database (such as ElasticSearch or Milvus) that will provide functionalities to measure similarity/distance between vectors. Section 1.8 below provide more information on text embedding and semantic searchability. Indexing: The last phase of metadata processing is the indexing of the tokens. The index of a search engine is an inverted index, which will contain a list of all terms found in the metadata, with the following information (among other) attached to each term: The document frequency, i.e. the number of metadata documents where the word is found (a metadata document is the metadata related to one dataset). The identification of the metadata documents in which the term was found. The term frequency in each metadata document. The term positions in the metadata document, i.e. where the term is found in the document. This is important to identify colocations. When a user submits a query for “demographic transition” for example, documents where the two terms are found next to each other will be more relevant than documents where both terms appear but in different parts of the document. Once the metadata has been acquired, transformed, and indexed, it is available for use via a user interface (UI). A data catalog UI will typically include a search box and facets (filters). The search engine underlying the search box can be simple (out-of-the-box full text search, looking for exact matches of keywords), or advanced (with semantic search capability and optimized ranking of query results). Basic full-text search do not provide satisfactory user experience, as we illustrated in the introduction to this Guide. Rich, structured metadata, combined with advanced search optimization tools and machine learning solutions, allow catalog administrators to tune the search engine, and implement advanced solutions including semantic searchability. 3.2.3.4 Interoperability Data catalogs that adopt common metadata standards and schemas can exchange information including through automated harvesting and synchronization of catalogs. This allows them to increase their visibility, and to publish their metadata in hubs. Recommendations and guidelines for improved inter-operability of data catalogs are provided by the Open Archives Initiative. Interoperability between data catalogs can be further improved by the adoption of common controlled vocabularies. For example, the adoption of the ISO country codes in country lists will guarantee that all catalogs will be able to filter dataset by country in a consistent manner. This will solve the issue of possible differences in the spelling of country names (e.g., one catalog referring to the Democratic Republic of Congo as Congo, DR, and another one as Congo, Dem. Rep.). It also solves issues of changing country names, e.g. Swaziland renamed as Eswatini in 2018). Controlled vocabularies are often used for “categorical” metadata elements like topics, keywords, data type, etc. Some metadata standards like the ISO 19139 for geospatial data include their own recommended controlled vocabularies. Ideally, controlled vocabularies are developed in accordance with FAIR principles (Findability, Accessibility, Interoperability, and Reuse of digital assets). “The principles emphasise machine-actionability (i.e., the capacity of computational systems to find, access, interoperate, and reuse data with none or minimal human intervention) because humans increasingly rely on computational support to deal with data as a result of the increase in volume, complexity, and creation speed of data.” (https://www.go-fair.org/fair-principles/) The adoption of standards and schemas by software developers also contributes to the easy transfer of metadata across applications. For example, data capture tools like Survey Solutions by the World Bank and CsPro by the US Census Bureau offer options to export metadata compliant with the DDI Codebook standard; ESRI’s ArcGIS software export geospatial metadata in the ISO 19139 standard. 3.2.3.5 Visibility Data cataloguing applications provide search and filtering tools to help users of the catalog identify data of interest. But not all users will start their search for data directly in specialized data catalogs; many will start their search in Google, Google Dataset Search, Bing, Yahoo! or another search engine. Some search engines may provide users with a direct answer to their query, without transiting via the source catalog. This will be the case when the query can be associated with a specific indicator, time and location for which data are openly available or accessible via a public API. For example, a search for “population india 2020” on Google, will provide an answer first, followed by links to the underlying sources. In other cases, the search engine will provide users with a link to a specific catalog page, not to the catalog’s home page. In such cases, the user will not be directly connected to the catalog’s own search engine. For example, a search for “albania lsms 2012” (a Living Standard Measurement Study, i.e. household survey) in Google will send the user directly to the survey page of the catalog, not to the home or search page of the catalog. In some cases, the user may not be brought to the data catalog at all, if the catalog ranked low in the relevance order of the Google query results. User behavior data (2020) showed that “only 9% of Google searchers make it to the bottom of the first page of the search results”, and that “only .44% of searchers go to the second page of Google’s search results”. (source: https://www.smartinsights.com/search-engine-marketing/search-engine-statistics/) It is thus critical to optimize the visibility of the content of specialized data catalogs in the lead search engines, Google in particular. This optimization process is referred to as search engine optimization or SEO. Wikipedia describes SEO as “the process of improving the quality and quantity of website traffic to a website or a web page from search engines. SEO targets unpaid traffic (known as”natural” or “organic” results) rather than direct traffic or paid traffic. (…) As an Internet marketing strategy, SEO considers how search engines work, the computer-programmed algorithms that dictate search engine behavior, what people search for, the actual search terms or keywords typed into search engines, and which search engines are preferred by their targeted audience. SEO is performed because a website will receive more visitors from a search engine when websites rank higher on the search engine results page.” Because search engines crawl the web pages that are generated from databases (rather than crawling the databases themselves), your carefully applied metadata inside the database will not even be seen by search engines unless you write scripts to display the metadata tags and their values in HTML meta tags. It is crucial to understand that any metadata offered to search engines must be recognizable as part of a schema and must be machine-readable, which is to say that the search engine must be able to parse the metadata accurately. (For example, if you enter a bibliographic citation into a single metadata field, the search engine probably won’t know how to distinguish the article title from the journal title, or the volume from the issue number. In order for the search engine to read those citations effectively each part of the citation must have its own field. (…) Making sure metadata is machine-readable requires patterns and consistency, which will also prepare it for transformation to other schema. (This is far more important than picking any single metadata schema. (…) From the blog post “Metadata, Schema.org, and Getting Your Digital Collection Noticed” by Patrick Hogan (https://www.ala.org/tools/article/ala-techsource/metadata-schemaorg-and-getting-your-digital-collection-noticed-3) Guidelines for implementing SEO are provided by Google Search, Google Dataset Search, and other lead search engines. These guidelines are to be implemented not only by webmasters, but also by the developers of data cataloguing tools who should embed SEO into their software applications. Google Search Engine Optimization Starter Guide Google Dataset Search, Advanced SEO Bing webmaster Tools An important element of SEO is the provision of structured metadata that can be exploited directly by the crawlers and indexers of search engines. This is the purpose of a set of schemas known as schema.org. In 2011 Google, Microsoft, Yandex, and Yahoo! created a common set of schemas for structured data markup on web pages with the aim of helping search engines to better understand websites. An alternative to schema.org is the DCAT (Data Catalog Vocabulary) metadata schema recommended by the W3C, also recognized by Google. “DCAT is a vocabulary for publishing data catalogs on the Web, which was originally developed in the context of government data catalogs such as data.gov and data.gov.uk (…)” (https://www.w3.org/TR/vocab-dcat-2/) Mapping augmented and structured metadata to the schema.org and/or DCAT standard is a critical element of such optimization. It will contribute significantly to the visibility of on-line data and metadata. Implementing such structured data markup in digital repositories is the responsibility of data librarians and of developers of data cataloguing applications. 3.3 Augmenting metadata Detailed and complete metadata foster usability and discoverability of data. Augmentation of “enrichment” or “enhancement” of the metadata will therefore be beneficial. There are multiple ways metadata can be made richer, or augmented, programmatically and in a largely automated manner. Metadata can be extracted from external sources or from the data themselves. Extraction from external sources Metadata can be augmented by tapping into external sources related to the data being documented. For example, in a catalog of documents published in peer-reviewed journals, the Scimago Journal Rank (SJR) indicator could be extracted and added as an additional metadata element for each document. This information can then be used by the catalog’s search engine to rank query results, by “boosting” the rank of documents published in prestigious journals. Extraction from the data Metadata can be extracted from the data themselves. What metadata can be extracted will be specific to each data type. Examples of metadata augmentation will be provided in the subsequent chapters. We mention a few below. For microdata: variable-level statistics (range of values, number of valid/missing cases, frequencies for categorical variables, summary statistics like means or standard deviations for continuous variables) can be extracted and stored as metadata. The DDI Codebook metadata standard provides elements for that purpose. For documents: information such as the country counts (how many times each country is mentioned) can be extracted automatically to fill out the metadata element related to geographic coverage. Natural language processing (NLP) models can be applied to automatically extract keywords or topics (e.g., using a Latent Dirichlet Allocation - LDA - topic model). Classification models can be applied to categorize documents by type. Embeddings and semantic discovery Previous sections of the chapter showed the value of rich and structured metadata to improve data usability and discoverability. Comprehensive and structured metadata are required to build and develop advanced and optimized lexical search engines (i.e. search engines that return results based on a matching of terms found in a query and in an inverted index). The richness of the metadata guarantees that the search engine will have all necessary “raw material” to identify datasets of interest. The metadata structure allows catalog administrators to tune their search engine (provided they use advanced solutions like Solr or ElasticSearch) to return and rank results in the most relevant manner. But this leaves one issue unsolved: the dependency on keyword matching. A user interested in datasets related to malnutrition for example will not find the indicators on Prevalence of stunting and Prevalence of wasting that the catalog may contain, unless the keyword “malnutrition” was included in these indicators’ metadata. Smarter search engines will be able to “understand” users intent, and identify relevant data based not only on a keyword matching process, but also on the semantic closeness between a query submitted by thea user and the metadata available in the database. The combination of rich metadata and natural language processing (NLP) models can solve this issue, by enabling semantic searchability in data catalogs. To enable a semantic search engine (or a recommender system), we need a way to “quantify” the semantic content of a query submitted by the user and the semantic content the metadata associated with a dataset, and to measure the closeness between them. This “quantitative” representation of semantic content can be generated in the form of numeric vectors called embeddings. “Word embedding is a term used for the representation of words for text analysis, typically in the form of a real-valued vector that encodes the meaning of the word such that the words that are closer in the vector space are expected to be similar in meaning.” (Jurafsky, Daniel; H. James, Martin (2000)). These vectors will typically have a large dimension, with a length of 100 or more. They can be generated for a word, a phrase, or a longer text such as a paragraph or a full document. They are calculated using models like word2vec (Mikolov et al., 2013) or other. Training such models require a large corpus of hundreds of thousands or millions of documents. Pre-trained models and APIs are available that allow data catalog curators to generate embeddings for their metadata and, in real time, for queries submitted by users. Practically, embeddings are used as follows: metadata (or part of the metadata) associated with a dataset are converted into a numeric vector using a pre-trained embedding model. These embeddings are stored in a database. When a user submits a search query (which can be a term, a phrase, or even a document), the query is analyzed and enhanced (stop words are removed, spelling errors may be fixed, language detection and automatic translation may be applied, and more), then transformed into a vector using the same pre-trained model that was used to generate the metadata vectors. The metadata vectors that have the shortest distance (typically the cosine distance) with the query vector will be identified. The search engine will then return a sorted list of datasets having the highest semantic similarity with the query, or the distance between vectors will be used in combination with other criteria to rank and return results to the user. The fast identification of the closest vectors requires a specialized and optimized tool like the open source Milvus application. For geospatial data: bounding boxes (i.e. the extent of the data) can be derived from the data files. For photos taken by digital cameras: metadata such as the date and time the photo was taken and possibly the geographic location can be extracted from the EXIF metadata generated by digital cameras and stored in the image file. Also, machine learning models allow image labeling, face detection, text detection and recognition to be applied at low cost (using commercial solutions like Google Vision or Amazon Rekognition among others). For videos and audio files, machine learning models of speech-to-text API solutions can be used to automatically generate transcripts (see for example Amazon Transcribe, Google Cloud Speech-to-Text, Microsoft Azure Speech to Text, or rev.ai). The content of the transcripts can then be indexed in search engines, making the content of video and audio files more discoverable. For programs and scripts: a parsing of the commands used in the script may be used to derive information on the methods applied. For all types: user-defined tags can be added, possibly generated by machine learning classification algorithms. 3.4 Recommended standards and schemas The standards and schemas we recommend and describe in this guide are the following: Data type Standard or schema Documents Dublin Core Metadata Initiative (DCMI), MARC Microdata Data Documentation Initiative 2.5 (Codebook) Geographic datasets and services ISO 19110, ISO19115, ISO19119, ISO 19139 Time series, Indicators Custom-designed schema Statistical tables Custom-designed schema Photos / Images IPTC (for advanced use) or Dublin Core augmented Audio files Dublin Core augmented with AudioObject from schema.org Videos Dublin Core augmented with VideoObject from schema.org Programs and scripts Custom-designed schema External resources Dublin Core All data types schema.org and DCAT (used for search engine optimization purpose, not as the primary schema to document resources) Note on SDMX: The metadata standards and schemas described in the Guide do not include the Statistical Data and Metadata eXchange (SDMX) standard sponsored by a group of international organisations. Although SDMX includes a metadata component, it is intended to support machine-to-machine data exchange, not data documentation and discoverability. SDMX and the metadata standards and schemas we describe in the Guide could –and should– be made inter-operable. 3.4.1 Documents Documents are bibliographic resource of any type, such as books, working papers and papers published in scientific journals, reports, manuals, and other resources consisting mainly of text. Document libraries have along tradition of using structured metadata to manage their collections, which dates back from before the days this was computerized. Multiple standards are available. The Dublin Core Metadata Initiative specification (DCMI) provides simple and flexible option. The MARC standard (MAchine-Readable Cataloging) standard used by the United States Library of Congress is another, more advanced one. The schema we describe in this Guide make is the DCMI complemented by a few elements inspired by the MARC standard. 3.4.2 Microdata Microdata are unit-level data on a population of individuals, households, dwellings, facilities, establishments or other. Microdata are typically obtained from surveys, censuses, or administrative recording systems. To document microdata, the Data Documentation Initiative (DDI) Alliance has developed the DDI metadata standard. “The Data Documentation Initiative (DDI) is an international standard for describing the data produced by surveys and other observational methods in the social, behavioral, economic, and health sciences. DDI is a free standard that can document and manage different stages in the research data lifecycle, such as conceptualization, collection, processing, distribution, discovery, and archiving. Documenting data with DDI facilitates understanding, interpretation, and use – by people, software systems, and computer network.” (Source: https://ddialliance.org/, accessed on 7 June 2021) The DDI standard comes in two versions: DDI Codebook and DDI Lifecycle. DDI-Codebook is a light-weight version of the standard. Its elements include descriptive content for variables, files, source material, and study level information. The standard is designed to support the discovery, preservation, and the informed use of data. DDI Lifecycle is designed to document and manage data across the entire life cycle, from conceptualization to data publication, analysis and beyond. It encompasses all of the DDI-Codebook specification and extends it. In this Guide, which focuses on the use of matadata standards for documentation, cataloguing and dissemination purposes, we recommend the use of the DDI Codebook which is much easier to implement than the DDI LifeCycle. DDI Codebook provides all necessary elements needed for our purpose of improving data discoverability and usability. 3.4.3 Geographic datasets, data structures, and data services Geographic data identify and depict geographic locations, boundaries and characteristics of features on the surface of the earth. Geographic datasets include raster and vector data files. More or more data is disseminated not in the form of datasets, but in the form of geographic data services mainly via web applications. The ISO Technical Committee on Geographic Information/Geomatics (ISO/TC211), created a set of metadata standards to describe geographic datasets (ISO 19115), the geographic data structures of vector data (ISO 19110), and geographic data services (ISO 19119). These ISO standards are also available as an XML specification, the ISO 19139. In this Guide, we describe a JSON and simplified –but ISO-compatible– version of this complex schema. 3.4.4 Time series, indicators Indicators are summary (or “aggregated”) measures related to a key issue or phenomenon and derived from a series of observed facts. For example, the school enrollment rate indicator can be obtained from survey or census microdata, and the GDP per capita indicator is the output of a complex national accounting process that exploits many sources. When an indicator is repeated over time at a regular frequency (annual, quarterly, monthly or other), and when the time dimension is attached to its values, we obtain a time series. National statistical agencies and many other organizations publish indicators and time series. Some well-known public databases of time series indicators include the World Bank’s World Development Indicators (WDI), the Asian Development Bank’s Key Indicators (KI), and the United Nations Statistics Division Sustainable Development Goals (SDG) database. Some databases provide indicators that are not time series, like the Demographic and Health Survey (DHS) StatCompiler. Time series and indicators must be published with metadata that provide information on their spatial and temporal coverage, definition, methodology, sources, and more. No international standard is available to document indicators and time series. The JSON metadata schema we describe in this guide was developed by compiling a list of metadata elements found in international indicators databases, complemented with elements from other metadata schemas. 3.4.5 Statistical tables Statistical tables (or cross tabulations or contingency tables) are summary presentations of data, presented as arrays of rows and columns that display numeric aggregates in a clearly labeled fashion. They are typically found in publications such as statistical yearbooks, census and survey reports, research papers, or published on-line. We developed the metadata schema presented in this Guide based on a review of a large collection of tables and of the 2015 W3C Model for Tabular Data and Metadata on the Web. This schema is intended to facilitate the cataloguing and discovery of tabular data, not to provide an electronic solution to automatically reproduce tables. 3.4.6 Images The images we are interested in are photos and images available in electronic format. Some images are generated using digital cameras and are “born digital”. Others may have been created by scanning photos, or using other techniques. Note that satellite and remote sensing imagery are not considered in this Guide as images, but as geospatial (raster) data which should be documented using the ISO 19139 schema. To document images, we suggest two options: the Dublin Core Metadata Initiative standard augmented by some ImageObject (from schema.org) elements as a simple option, and the IPTC standard for more advanced uses and users. 3.4.7 Audio To document and catalog audio recordings, we propose a simple metadata schema that combines elements of the Dublin Core Metadata Initiative and of the AudioObject (from schema.org) schemas. 3.4.8 Videos To document and catalog videos, we propose a simple metadata schema that combines elements of the Dublin Core Metadata Initiative and of the VideoObject (from schema.org) schemas. 3.4.9 Programs and scripts We are interested in documenting and disseminating data processing and analysis programs and scripts. By “programs and scripts” we mean the code written to conduct data processing and data analysis, that results in the production of research and knowledge products including dublications, derived datasets, visualizations, or other. These scripts are produced using statistical analysis software or programming languages like R, Python, SAS, SPSS, Stata or equivalent. There are multiple reasons to invest in the documentation and dissemination of reproducible and replicable data processing and analysis (see chapter 12). Increasingly, the dissemination of reproducible scripts is a condition imposed by peer-reviewed journals to authors of papers they publish. Data catalogs should be the go-to place for those who look for reproducible research and examples of good practice in data analysis. As no international metadata schema is available to document and catalog scripts, we developed a schema for this purpose. 3.4.10 External resources External resources are files and links that we may want to attach to a dataset’s published metadata in a data catalog. When we publish metadata in a catalog, what is published is only the textual documentation contained in the JSO or XML metadata file. Other resources attached to a dataset (such as the questionnaire for a survey, technical or training manuals, tabulations, reports, possibly micro-data files, etc.) are not included in these metadata, but also constitute important materials for data users. All these resources are what we consider as external resources (“external” to the schema-compliant metadata), which need to be catalogued and (for most of them) published with the metadata. A simple metadata schema, based on the Dublin Core, is used to provide some essential information on these resources. 3.5 Search engine optimization: schema.org The standards and schemas we recommend are lists of elements that have been tailored for each data type. The importance of structured and rich metadata has been described. Specialized metadata standards will foster comprehensiveness and discoverability in specialized catalog, and help build optimized data discovery suystems. But it is also critical to ensure the visibility and discoverability of the metadata in generic search engines, which are not built around the same schemas. The web makes use of its own schemas: schema.org. To ensure SEO, the specialized schemas should be mapped to it. 3.5.1 The basics of search engine optimization Data catalogs must be optimized to improve the visibility and ranking of their content in search engines, including specialized search engines like Google’s Dataset Search. The ranking of web pages by Google and other lead search engines is determined by complex, proprietary, and non-disclosed algorithms. The only option for a web developer to ensure that a web page appears on top of the Google list of results is to pay for it, publishing it as a commercial ad. Otherwise, the ranking of a web page will be determined by a combination of known and unknown criteria. “Google’s automated ranking systems are designed to present helpful, reliable information that’s primarily created to benefit people, not to gain search engine rankings, in the top Search results.” (Google Search Central) But Google, Bing and other search engines provide web developers with some guidance and recommendations on search engine optimization (SEO). See for example the Google Search Central website where Google publish “Specific things you can do to improve the SEO of your website”. Improving the ranking of catalog pages is a shared responsibility of data curators and catalog developers and administrators. Data curators must pay particular attention to providing rich, useful content in the catalog web pages (the HTML pages that describe each catalog entry). To identify relevant results, search engines index the content of web pages. Datasets that are well documented, i.e. those published with rich and structured metadata, will thus have a better chance to be discovered. Much attention should be paid to some core elements including the dataset title, producer, description (abstract), keywords, topics, access license, and geographic coverage. In Google Search Central’s terms, curators must “create helpful, reliable, people-first content” (not search engine-first content) and “use words that people would use to look for your content, and place those words in prominent locations on the page, such as the title and main heading of a page, and other descriptive locations such as alt text and link text.* Developers and administrators of cataloguing applications must pay attention to other aspects of a catalog that will make it rank higher in Google and other search engine results: Ensuring that a data catalog delivers a good experience to users (see Understanding page experience in Google Search results), which among other things involves: Catalog pages that load fast Catalog pages that are mobile-friendly. A data catalog should thus be built with a responsive design. Provide secure connection by serving the catalog over HTTPS (see more information, see for example https://web.dev/enable-https/) Embedding structured data in the catalog’s HTML pages. The HTML pages in a data catalog are mostly the pages that will make the metadata specific to an entry visible to the user. These pages are automatically generated by the cataloguing application, by extracting and formatting the metadata stored in the catalog’s database. Structured data is information that will be included in these HTML pages (but not shown to the user) to help Google understand the content of the page. The use of structured data only applies to certain types of content, including datasets. The use of structured data influences not only the ranking of a page, but also the way information on the page will be displayed by Google. The next section is dedicated to this. Last, Google will “reward” popular websites, i.e. websites that are frequently visited and to which many other influent and popular websites provide links. Google’s recommendation is thus to “tell people about your site. Be active in communities where you can tell like-minded people about your services and products that you mention on your site.” A helpful and detailed self-assessment list of items that data curators, catalog developers, and catalog administrators should pay attention to is provided by Google. Various tools are also available to catalog developers and administrators to assess the technical performance of their websites. 3.5.1.1 Structured data for rich results in Google Structured data is information that is embedded in HTML pages that helps Google classify, understand, and display the content of the page when the page is related to a specific type of content. The information stored in the structured data does not impact how the page itself is displayed in a web browser; it only impacts the display of information on the page when returned by Google search results. The types of content to which structured metadata applies is diverse and includes items like job positings, cooking receipes, books, events, movies, math solvers, and others (see the list provided in Google’s Search Gallery). It also applies to resources of type dataset and image. In this context, a dataset can be any type of structured dataset including microdata, indicators, tables, and geographic datasets. The structured data to be embedded in an HTML page consists of a set of metadata elements compliant with either the dataset schema from schema.org or W3C’s Data Catalog Vocabulary (DCAT) for datasets, and with the image schema from schema.org for images. For datasets, the schema.org schema is the most frequently used option.[^1] 3.5.1.2 schema.org schema.org is a collection of schemas designed to document many types of resources. The most generic type is a “thing” which can be a person, an organization, an event, a creative work, etc. A creative work can be a book, a movie, a photograph, a data catalog, a dataset, etc. Among the many types of creative work for which schemas are available, we are particularly interested in the ones that correspond to the types of data and resources we recommend in this guide. This includes: DataCatalog: A data catalog is a collection of datasets. Dataset: A body of structured information describing some topic(s) of interest. MediaObject: A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset. This includes: ImageObject: An image file. AudioObject: An audio file. VideoObject: A video file. Book: A book. DigitalDocument: An electronic file or document. The schemas proposed by schema.org have been developed primarily “to improve the web by creating a structured data markup schema supported by major search engines. On-page markup helps search engines understand the information on web pages and provide richer search results.” (from schema.org, Q&amp;A) These schemas have not been developed by specialized communities of practice (statisticians, survey specialists, data librarians) to document datasets for preservation of institutional memory, to increase transparency in the data production process, or to provide data users with the “cook book” they may need to safely and responsibly use data. These schemas are not the ones that statistical organizations need to comply with international recommendations like the Generic Standard Business Process Model (GSBPM). But they play a critical role in improving data discoverability, as they provide webmasters and search engines with a means to better capture and index the content of web-based data platforms. Schemas from schema.org should thus be embedded in data catalogs. Data cataloguing applications should automatically map (some of) the elements of the specialized metadata standards and schemas they use to the appropriate fields of schema.org. Recommended mapping between the specialized standards and schemas and schema.org are not yet available. The production of such mappings, and the development of utilities to facilitate the production of content compliant with schema.org, would contribute to the objective of visibility and discoverability of data. 3.5.1.3 DCAT DCAT describes datasets and data services using a standard model and vocabulary. It is organized in 13 “classes” (Catalog, Cataloged Resource, Catalog Record, Dataset, Distribution, Data Service, Concept Scheme, Concept, Organization/Person, Relationship, Role, Period of Time, and Location). Within classes, properties are used as metadata elements. For example, the class Cataloged Resource includes properties like title, description, resource creator; the class Dataset includes properties like spatial resolution, temporal coverage; many of these properties can easily be mapped to equivalent elements of the specialized metadata schemas we recommend in this Guide. 3.5.1.4 Practical implementation of structured data The embedding of structured data into HTML pages must be automated in a data cataloguing tool. Data catalogs applications dynamically generate the HTML pages that display the description of each catalog entry. They do so by extracting the necessary metadata from the catalog database, and applying “transformations and styles” to this content to produce a user-friendly output that catalog visitors will view in their web browser. To embed structured data in these pages, the catalog application will (i) extract the relevant subset of metadata elements from the original metadata (e.g., from the DDI-compliant metadata for a micro-dataset), (ii) map these extracted elements to the schema.org or DCAT schema, and (iii) save it in the HTML page as a JSON-LD “hidden” component. Mapping the core elements of specialized metadata standards to the schema.org schema is thus essential to enable this feature. A mapping between the schema presented in this Guide and schema.org is provided in annex 2 of the Guide. The screenshots below show an example of an HTML page for a dataset published in a NADA catalog, with the underlying code. The structured metadata is used by Google to display this information as a formatted, “rich result” in Google Dataset Search. The HTML page as viewed by the catalog user - The web browser will ignore the embedded structured metadata when the HTML page is displayed. What users will see is entirely controlled by the catalog application. The HTML page code (abstract) - The automatically-generated structured data can be seen in the HTML page code (or page source). This information is visible and processed by Google, Bing, and other search engine’s web crawlers. Note that the structured data, although not “visible” to users, can be made accessible to them via API. Other data cataloguing applications may be able to ingest this information; the CKAN cataloguing tool for example makes use of metadata compliant with DCAT or schema.org. Making the structured data accessible is one way to improve the inter-operability of data catalogs. The result - Higher visibility/ranking in Google Dataset Search - The websites catalog.ihsn.org and microdata.worldbank.org are NADA catalogs, which embed schema.org metadata. 3.6 Where to find the schemas’ documentation The most recent documentation of the schemas described in the Guide is available on-line at https://ihsn.github.io/nada-api-redoc/catalog-admin/#. The documentation of each standard or schema starts with four common elements that are not actually part of the standard or schema, but that contain information that will be used when the metadata are published in a data catalog that uses the NADA application. If NADA is not used, these “administrative elements” can be ignored. repositoryid identifies the collection in which the metadata will be published. access_policy determines if and how the data files will be accessible from the catalog in which the metadata are published. This element only applies to the microdata and geographic metadata standards. It makes use of a controlled vocabulary with the following access policy options: direct: data can be downloaded without requiring them to be registered; open: same as “direct”, with an open data license attached to the dataset; public: public use files, which only require users to be registered in the catalog; licensed: access to data is restricted to registered users who receive authorization to use the data, after submitting a request; remote: data are made available by an external data repository; data_na: data are not accessible to the public (only metadata are published). published determines the status of the metadata in the on-line catalog (with options 0 = draft and 1 = published). Published entries are visible to all visitors of the on-line catalog; unpublished (draft) entries will only be visible by the catalog administrators and reviewers. overwrite determines whether the metadata already in the catalog for this entry can be overwritten (iwith options yes or no, ‘no’ being the default). This set of administrative elements is followed by one or multiple sections that contain the elements specific to each standard/schema. For example, the DDI Codebook metadata standard, used to document microdata, contains the following main sections: document description: a description of the metadata (who documented the dataset, when, etc.) Most schemas will contain such a section describing the metadata, useful mainly to data curators and catalog administrators. In other schemas, this section may be named metadata_description. study description: the description of the survey/census/study, not including the data files and data dictionary. file description: a list and description of data files associated to the study. variable description: the data dictionary (description of variables). The schema-specific sections are followed by a few other metadata elements common to most schemas. These elements are used to provide additional information useful for cataloguing and discoverability purposes. They include tags (which allow catalog administrators to attach tags to datasets independently of their type, which can be used as filters in the catalog), and external resources. Some schemas provide the possibility for data curators to add their own metadata elements in an additional section. The use of additional elements should be the exception, as metadata standards and schemas are designed to provide all elements needed to fully document a data resource. In each standard and schema, metadata elements can have the following properties: Optional or required. When an element is declared as required (or mandatory), the metadata will be considered invalid if it contains no information in that element. To keep the schemas flexible, very few elements are set as required. Note that it is possible for a metadata element to be required but have all its components (for elements that have sub-elements) declared as optional. This will be the case when at least one (but any) of the sub-element must contain information. It is also possible for an element to be declared optional but have one or more of its sub-elements declared mandatory (this means that the field is optional, but if it is used, some of its features MUST be provided.) Repeatable or Not repeatable. For example, the element nation in the DDI standard is Repeatable because a dataset can cover more than one country, while the element title is Not repeatable because a study should be identified by a unique title. Type. This indicates the format of the information contained in an element. It can be a string (text), a numeric value, a boolean variable (TRUE/FALSE), or an array. Some schemas may recommend controlled vocabularies for some elements. For example, the ISO 19139 used to document geographic datasets recommends … In most cases however, controlled vocabularies are not part of the metadata standard or schema. They will be selected and activated in templates and applications. …example… 3.7 Generating structured metadata Metadata compliant with the standards and schemas described in this Guide can be generated in two different ways: programmatically using a programming language like R or Python, or by using a specialized metadata editor application. The first option provides a high degree of flexibility and efficiency. It offers multiple opportunities to automate part of the metadata generation process, and to exploit advanced machine learning solutions to enhance metadata. Also, metadata generated using R or Python can also be published in a NADA catalog using the NADA API and the R package NADAR or the Python library PyNADA. The programmatic option may thus be the preferred option for organizations that have strong expertise in R or Python. For other organizations, and for some types of data, the use of a specialized metadata editor may be a better option. Metadata editors are specialized software applications designed to offer a user-friendly alternative to the programmatic generation of metadata. We provide in this section a brief description of how structured metadata can be generated and published using respectively R, Python, and a metadata editor application. 3.7.1 Generating compliant metadata using a metadata editor The easiest way to generate metadata compliant with the standards and schemas we describe in this Guide is to use a specialized Metadata Editor. A Metadata Editor provides a user-friendly and flexible interface to document data. Most metadata editors are specific to a certain standard. The IHSN / World Bank developed an open source multi-standard Metadata Editor. This Metadata Editor contains all suggested standards. The full version of each standard is embedded in the application. But few users will ever make use of all elements contained in the standard. And some will want to customize the instructions, labels of the metadata elements, controlled vocabularies, and instructions to curators who will enter the metadata. The Metadata Editor allows users to develop their own templates based on the full version of the standards. A template is a subset of the elements available in the standard/schema, where the elements can be renamed and other customization can be made (within limits, as the metadata generated must remain compliant with the standard independently of the template). Template manager: image Then UI with (for some types) import of data and automated generation of some metadata. image (describe / provide bettere example) 3.7.2 Generating compliant metadata using R All schemas described in the on-line documentation can be used to generate compliant metadata using R scripts. Generating metadata using R will consist of producing a list object (itself containing lists). In the documentation of the standards and schemas, curly brackets indicate to R users that a list must be created to store the metadata elements. Square brackets indicate that a block of elements is repeatable, which corresponds in R to a list of lists. For example (using the DOCUMENT metadata schema): The sequence in which the metadata elements are created when documenting a dataset using R or Python does not have to match the sequence in the schema documentation. Metadata compliant with a standard/schema can be generated using R, and directly uploaded in a NADA catalog without having to be saved as a JSON file. An object (a list) must be created in the R script that contains metadata compliant with the JSON schema. The example below shows how such an object is created and published in a NADA catalog. We assume here that we have a document with the following information: document unique id: WB_10986/7710 title: Teaching in Lao PDR authors: Luis Benveniste, Jeffery Marshall, Lucrecia Santibañez (World Bank) date published: 2007 countries: Lao PDR. The document is available from the World Bank Open knowledge Repository at http://hdl.handle.net/10986/7710. We will use the DOCUMENT schema to document the publication, and the EXTERNAL RESOURCE schema to publish a link to the document in NADA. Publishing data and metadata in a NADA catalog (using R and the NADAR package or Python and the PyNADA library) requires to first identify the on-line catalog where the metadata will be published (by providing its URL in the set_api_url command line) and to provide a key to authenticate as a catalog administrator (in the set_api_key command line; note that this key should never be entered in clear in a script to avoid accidental disclosure). We then create an object (a list in R, or a dictionary in Python) that we will for example name my_doc. Within this list (or dictionary), we will enter all metadata elements. Some will be simple elements, others will be lists (or dictionaries). The first element to be included is the required document_description. Within it, we include the title_statement which is also required and contains the mandatory elements idno and title (all documents must have a unique ID number for cataloguing purpose, and a title). The list of countries that the document covers is a repeatable element, i.e. a list of lists (although we only have one country in this case). Information on the authors is a repeatable element, allowing us to capture the information on the three co-authors individually. This my_doc object is then published in the NADA catalog using the add_document function. Last, we publish (as an external resource) a link to the file, with only basic information. We do not need to document this resource in detail, as it corresponds to the metadata provided in my_doc. If we had a different external resource (for example an MS-Excel table that contains all tables shown in the publication), we would make use of more of the external resources metadata elements to document it. Note that instead of a URL, we could have provided a path to an electronic file (e.g., to the PDF document), in which case the file would be uploaded to the web server and made available directly from the on-line catalog. We had previously captured a screenshot of the cover page of the document to be used as thumbnail in the catalog (optional). library(nadar) # Define the NADA catalog URL and provide an API key set_api_url(&quot;http://nada-demo.ihsn.org/index.php/api/&quot;) set_api_key(&quot;a1b2c3d4e5&quot;) # Note: an administrator API key must always be kept strictly confidential; # It is good practice to read it from an external file, not to enter it in clear thumb &lt;- &quot;C:/DOCS/teaching_lao.JPG&quot; # Cover page image to be used as thumbnail # Generate and publish the metadata on the publication doc_id &lt;- &quot;WB_10986/7710&quot; my_doc &lt;- list( document_description = list( title_statement = list( idno = doc_id, title = &quot;Teaching in Lao PDR&quot; ), date_published = &quot;2007&quot;, ref_country = list( list(name = &quot;Lao PDR&quot;, code = &quot;LAO&quot;) ), # Authors: we only have one author, but this is a list of lists # as the &#39;authors&#39; element is a repeatable element in the schema authors = list( list(first_name = &quot;Luis&quot;, last_name = &quot;Benveniste&quot;, affiliation = &quot;World Bank&quot;), list(first_name = &quot;Jeffery&quot;, last_name = &quot;Marshall&quot;, affiliation = &quot;World Bank&quot;), list(first_name = &quot;Lucrecia&quot;, last_name = &quot;Santibañez&quot;, affiliation = &quot;World Bank&quot;) ) ) ) # Publish the metadata in the central catalog add_document(idno = doc_id, metadata = my_doc, repositoryid = &quot;central&quot;, published = 1, thumbnail = thumb, overwrite = &quot;yes&quot;) # Add a link as an external resource of type document/analytical (doc/anl). external_resources_add( title = &quot;Teaching in Lao PDR&quot;, idno = doc_id, dctype = &quot;doc/anl&quot;, file_path = &quot;http://hdl.handle.net/10986/7710&quot;, overwrite = &quot;yes&quot; ) The document is now available in the NADA catalog. 3.7.3 Generating compliant metadata using Python Generating metadata using Python will consist of producing a dictionary object, which will itself contain lists and dictionaries. Non-repeatable metadata elements will be stored as dictionaries, and repeatable elements as lists of dictionaries. In the metadata documentation, curly brackets indicate that a dictionary must be created to store the metadata elements. Square brackets indicate that a dictionary containing dictionaries must be created. Dictionaries in Python are very similar to JSON schemas. When documenting a dataset, data curators who use Python can copy a schema from the ReDoc website, paste it in their script editor, then fill out the relevant metadata elements and delete the ones that are not used. The Python equivalent of the R example we provided above is as follows: import pynada as nada # Define the NADA catalog URL and provide an API key set_api_url(&quot;http://nada-demo.ihsn.org/index.php/api/&quot;) set_api_key(&quot;a1b2c3d4e5&quot;) # Note: an administrator API key must always be kept strictly confidential; # It is good practice to read it from an external file, not to enter it in clear thumb &lt;- &quot;C:/DOCS/teaching_lao.JPG&quot; # Cover page image to be used as thumbnail # Generate and publish the metadata on the publication doc_id = &quot;WB_10986/7710&quot; document_description = { &#39;title_statement&#39;: { &#39;idno&#39;: &quot;WB_10986/7710&quot;, &#39;title&#39;: &quot;Teaching in Lao PDR&quot; }, &#39;date_published&#39;: &quot;2007&quot;, &#39;ref_country&#39;: [ {&#39;name&#39;: &quot;Lao PDR&quot;, &#39;code&#39;: &quot;Lao&quot;} ], # Authors: we only have one author, but this is a list of lists # as the &#39;authors&#39; element is a repeatable element in the schema &#39;authors&#39;: [ {&#39;first_name&#39;: &quot;Luis&quot;, &#39;last_name&#39;: &quot;Benveniste&quot;, &#39;affiliation&#39; = &quot;World Bank&quot;}, {&#39;first_name&#39;: &quot;Jeffery&quot;, &#39;last_name&#39;: &quot;Marshall&quot;, &#39;affiliation&#39; = &quot;World Bank&quot;}, {&#39;first_name&#39;: &quot;Lucrecia&quot;, &#39;last_name&#39;: &quot;Santibañez&quot;, &#39;affiliation&#39; = &quot;World Bank&quot;}, ] } # Publish the metadata in the central catalog nada.create_document_dataset( dataset_id = doc_id, repository_id = &quot;central&quot;, published = 1, overwrite = &quot;yes&quot;, my_doc_metadata, @@@@@@ thumbnail_path = thumb) # Add a link as an external resource of type document/analytical (doc/anl). nada.add_resource( dataset_id = doc_id, dctype = &quot;doc/anl&quot;, title = &quot;Teaching in Lao PDR&quot;, file_path = &quot;http://hdl.handle.net/10986/7710&quot;, overwrite = &quot;yes&quot;) [^1] See Omar Benjelloun, Shiyu Chen, Natasha Noy, 2020, Google Dataset Search by the Numbers, https://doi.org/10.48550/arXiv.2006.06894 "],["chapter04.html", "Chapter 4 Documents 4.1 MARC 21, Dublin Core, and BibTex 4.2 Schema description 4.3 Complete examples", " Chapter 4 Documents This chapter describes the use of a metadata schema for documenting documents. By document, we mean a bibliographic resource of any type such as a book, a working paper or a paper published in a scientific journal, a report, a presentation, a manual, or any another resource consisting mainly of text and available in physical and/or electronic format. Suggestions and recommendations to data curators Documents in a data catalog can appear (i) as “data” in the catalog, or as “related resources” attached to other datasets. The schema we describe here is to be used for documents that will be listed as catalog entries and made searchable, not those that will be attached as resources (for which the “external resource” metadata schema must be used. For all types of data we describe in this Guide (microdata, geographic, indicators, tables, images, audio, video, and scripts), what is indexed and made searchable in the catalog are the metadata associated with the data (some of these metadata may have been extracted directly from the data). For documents, not only the metadata but the content of the document (the “data”) can and should be indexed and made searchable. Some documents may have been scanned and submitted to optical character recognition (OCR). The OCR process will not always manage to properly convert images to text, resulting in errors and non-existing words that should not be included in an index. It is thus recommended to submit the text version of these documents to a pipeline of quality control and enhancement (spell checker, and other). Including a screenshot of a document cover page in a data catalog adds value. Documents should be categorized by type, and the type metadata element should have a controlled vocabulary. If a document can have more than one type, use the tags element (with a tag_group = type) instead of the non-repeatable type element to store this information. Use this information to activate a facet in the catalog user interface. Many users will find it useful to be able to filter documents by type. The document metadata can be augmented in different manners, including by applying automated topic extraction (e.g. using a LDA topic model) and by generating document embeddings. When topic models and embedding models are used, it is important to ensure that the same topic model and the same embedding model is consistently used for all resources in the catalog. Machine learning tools also provide automatic language detection and translation solutions that mey be useful to enhance the metadata. Documenting documents using R or Python is not very complex. For large collections of documents, managing and publishing metadata can be made significantly more efficient when programmatic solutions are used. It is highly recommended to obtain a globally unique identifier for each document, such as a DOI, an ISBN, or other. 4.1 MARC 21, Dublin Core, and BibTex Librarians have developed specific standards to describe and catalog documents. The MARC 21 (MAchine-Readable Cataloging) standard used by the United States Library of Congress is one of them. It provides a detailed structure for documenting bibliographic resources, and is the recommended standard for well-resourced document libraries. For the purpose of cataloguing documents in a less-specialized repository intended to accommodate data of multiple types, we built our schema on a simpler but also highly popular standard, the Dublin Core Metadata Element Set. We will refer to this metadata specification, developed by the Dublin Core Metadata Initiative, as the Dublin Core. The Dublin Core became an ISO standard (ISO 15836) in 2009. It consists of a list of fifteen core metadata elements, to which more specialized elements can be added. These fifteen elements, with a definition extracted from the Dublin Core website, are the following: No Element name Description 1 contributor An entity responsible for making contributions to the resource. 2 coverage The spatial or temporal topic of the resource, the spatial applicability of the resource, or the jurisdiction under which the resource is relevant. 3 creator An entity primarily responsible for making the resource. 4 date A point or period of time associated with an event in the life cycle of the resource. 5 description An account of the resource. 6 format The file format, physical medium, or dimensions of the resource. 7 identifier An unambiguous reference to the resource within a given context. 8 language A language of the resource. 9 publisher An entity responsible for making the resource available. 10 relation A related resource. 11 rights Information about rights held in and over the resource. 12 source A related resource from which the described resource is derived. 13 subject The topic of the resource. 14 title A name given to the resource. 15 type The nature or genre of the resource. Due to its simplicity and versatility, this standard is widely used for multiple purposes. It can be used to document not only documents but also resources of other types like images or others. Documents that can be described using the MARC 21 standard can be described using the Dublin Core, although not with the same granularity of information. The US Library of Congress provides a mapping between the MARC and the Dublin Core metadata elements. MARC 21 and the Dublin Core are used to document a resource (typically, the electronic file containing the document) and its content. Another schema, BibTex, has been developed for the specific purpose of recording bibliographic citations. BibTex is a list of fields that may be used to generate bibliographic citations compliant with different bibliography styles. It applies to documents of multiple types: books, articles, reports, etc. The metadata schema we propose to document publications and reports is a combination of Dublin Core, MARC 21, and BibTex elements. The technical documentation of the schema and its API is available at https://ihsn.github.io/nada-api-redoc/catalog-admin/#tag/Documents. 4.2 Schema description The proposed schema comprises two main blocks of elements, metadata_information and document_description. It also contains the tags element common to all our schemas. The repository_id, published and overwrite items in the schema are not metadata elements per se, but parameters used when publishing the metadata in a NADA catalog. { &quot;repositoryid&quot;: &quot;string&quot;, &quot;published&quot;: 0, &quot;overwrite&quot;: &quot;no&quot;, &quot;metadata_information&quot;: {}, &quot;document_description&quot;: {}, &quot;provenance&quot;: [], &quot;tags&quot;: [], &quot;lda_topics&quot;: [], &quot;embeddings&quot;: [], &quot;additional&quot;: { } } 4.2.1 Metadata information The metadata_information contains information not related to the document itself but to its metadata. In other words, it contains “metadata on the metadata”. This information is optional but we recommend to enter content at least in the name and date sub-elements, which indicate who generated the metadata and when. This information is not useful to end-users of document catalogs, but is useful to catalog administrators for two reasons: metadata compliant with standards are intended to be shared and used by inter-operable applications. Data catalogs offer opportunities to harvest (pull) information from other catalogs, or to publish (push) metadata in other catalogs. Metadata information helps to keep track of the provenance of metadata. metadata for a same document may have been generated by more than one person or organization, or one version of the metadata can be updated and replaced with a new version. The metadata information helps catalog administrators distinguish and manage different versions of the metadata. &quot;metadata_information&quot;: { &quot;title&quot;: &quot;string&quot;, &quot;idno&quot;: &quot;string&quot;, &quot;producers&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;abbr&quot;: &quot;string&quot;, &quot;affiliation&quot;: &quot;string&quot;, &quot;role&quot;: &quot;string&quot; } ], &quot;production_date&quot;: &quot;string&quot;, &quot;version&quot;: &quot;string&quot; } The elements in the block are: title [Required ; Not repeatable ; String] The title of the metadata document (which will usually be the same as the “Title” in the “Document description / Title statement” section). The metadata document is the metadata file (XML or JSON file) that is being generated. idno [Optional ; Not repeatable ; String] A unique identifier for the metadata document. This identifier must be unique in the catalog where the metadata are intended to be published. Ideally, the identifier should also be unique globally. This is different from the “Primary ID” in section “Document description / Title statement”, although it is good practice to generate identifiers that establish a clear connection between these two identifiers. The Document ID could also include the metadata document version identifier. For example, if the “Primary ID” of the publication is “978-1-4648-1342-9”, the Document ID could be “IHSN_978-1-4648-1342-9_v1.0” if the metadata are produced by the IHSN and if this is version 1.0 of the metadata. Each organization should establish systematic rules to generate such IDs. A validation rule can be set (using a regular expression) in user templates to enforce a specific ID format. The identifier may not contain blank spaces. producers [Optional ; Repeatable] This refers to the producer(s) of the metadata, not to the producer(s) of the document itself. The metadata producer is the person or organization with the financial and/or administrative responsibility for the processes whereby the metadata document was created. This is a “Recommended” element. For catalog administration purposes, information on the producer and on the date of metadata production is useful. name [Optional ; Not repeatable ; String] The name of the person or organization who produced the metadata or contributed to its production. abbr [Optional ; Not repeatable ; String] The abbreviation (or acronym) of the organization that is referenced in name. affiliation [Optional ; Not repeatable ; String] The affiliation of the person or organization mentioned in name. role [Optional ; Not repeatable ; String] The specific role of the person or organization mentioned in name in the production of the metadata. production_date [Optional ; Not repeatable ; String] The date the metadata on this document was produced (not distributed or archived), preferably entered in ISO 8601 format (YYYY-MM-DD or YYY-MM). This is a “Recommended” element, as information on the producer and on the date of metadata production is useful for catalog administration purposes. version [Optional ; Not repeatable ; String] The version of the metadata document (not the version of the publication, report, or other resource being documented). Example my_doc = list( metadata_information = list( idno = &quot;WBDG_978-1-4648-1342-9&quot;, producers = list( list(name = &quot;Development Data Group, Curation Team&quot;, abbr = &quot;WBDG&quot;, affiliation = &quot;World Bank&quot;) ), production_date = &quot;2020-12-27&quot; ), # ... ) 4.2.2 Document description The document_description block contains the metadata elements used to describe the document. It includes the Dublin Core elements and a few more. The schema also includes elements intended to store information generated by machine learning (natural language processing - NLP) models to augment metadata on documents. &quot;document_description&quot;: { &quot;title_statement&quot;: {}, &quot;authors&quot;: [], &quot;editors&quot;: [], &quot;date_created&quot;: &quot;string&quot;, &quot;date_available&quot;: &quot;string&quot;, &quot;date_modified&quot;: &quot;string&quot;, &quot;date_published&quot;: &quot;string&quot;, &quot;identifiers&quot;: [], &quot;type&quot;: &quot;string&quot;, &quot;status&quot;: &quot;string&quot;, &quot;description&quot;: &quot;string&quot;, &quot;toc&quot;: &quot;string&quot;, &quot;toc_structured&quot;: [], &quot;abstract&quot;: &quot;string&quot;, &quot;notes&quot;: [], &quot;scope&quot;: &quot;string&quot;, &quot;ref_country&quot;: [], &quot;geographic_units&quot;: [], &quot;bbox&quot;: [], &quot;spatial_coverage&quot;: &quot;string&quot;, &quot;temporal_coverage&quot;: &quot;string&quot;, &quot;publication_frequency&quot;: &quot;string&quot;, &quot;languages&quot;: [], &quot;license&quot;: [], &quot;bibliographic_citation&quot;: [], &quot;chapter&quot;: &quot;string&quot;, &quot;edition&quot;: &quot;string&quot;, &quot;institution&quot;: &quot;string&quot;, &quot;journal&quot;: &quot;string&quot;, &quot;volume&quot;: &quot;string&quot;, &quot;number&quot;: &quot;string&quot;, &quot;pages&quot;: &quot;string&quot;, &quot;series&quot;: &quot;string&quot;, &quot;publisher&quot;: &quot;string&quot;, &quot;publisher_address&quot;: &quot;string&quot;, &quot;annote&quot;: &quot;string&quot;, &quot;booktitle&quot;: &quot;string&quot;, &quot;crossref&quot;: &quot;string&quot;, &quot;howpublished&quot;: &quot;string&quot;, &quot;key&quot;: &quot;string&quot;, &quot;organization&quot;: &quot;string&quot;, &quot;url&quot;: null, &quot;translators&quot;: [], &quot;contributors&quot;: [], &quot;contacts&quot;: [], &quot;rights&quot;: &quot;string&quot;, &quot;copyright&quot;: &quot;string&quot;, &quot;usage_terms&quot;: &quot;string&quot;, &quot;disclaimer&quot;: &quot;string&quot;, &quot;security_classification&quot;: &quot;string&quot;, &quot;access_restrictions&quot;: &quot;string&quot;, &quot;sources&quot;: [], &quot;data_sources&quot;: [], &quot;keywords&quot;: [], &quot;themes&quot;: [], &quot;topics&quot;: [], &quot;disciplines&quot;: [], &quot;audience&quot;: &quot;string&quot;, &quot;mandate&quot;: &quot;string&quot;, &quot;pricing&quot;: &quot;string&quot;, &quot;relations&quot;: [], &quot;reproducibility&quot;: {} } title_statement [Required ; Not repeatable] The title_statement is a required group of five elements, two of which are required: &quot;title_statement&quot;: { &quot;idno&quot;: &quot;string&quot;, &quot;title&quot;: &quot;string&quot;, &quot;sub_title&quot;: &quot;string&quot;, &quot;alternate_title&quot;: &quot;string&quot;, &quot;translated_title&quot;: &quot;string&quot; } idno [Required ; Not repeatable ; String] A unique identifier of the document, which serves as the “primary ID”. idno is a unique identification number used to identify the database. A unique identifier is required for cataloguing purpose, so this element is declared as “Required”. The identifier will allow users to cite the indicator/series properly. The identifier must be unique within the catalog. Ideally, it should also be globally unique; the recommended option is to obtain a Digital Object Identifier (DOI) for the study. Alternatively, the idno can be constructed by an organization using a consistent scheme. Note that the schema allows you to provide more than one identifier for a same study (in element identifiers); a catalog-specific identifier is thus not incompatible with a globally unique identifier like a DOI. The idno should not contain blank spaces. title [Required ; Not repeatable ; String] The title of the book, report, paper, or other document. Pay attention to the use of capitalization in the title, to ensure consistency across documents listed in your catalog. Pay attention to the consistent use of capitalization in the title. It is recommended to use sentence capitalization. sub_title [Optional ; Not repeatable ; String] The document subtitle can be used when there is a need to distinguish characteristics of a document. Pay attention to the consistent use of capitalization in the subtitle. alternate_title [Optional ; Not repeatable ; String] An alternate version of the title, possibly an abbreviated version. For example, the World Bank’s World Development Report is often referred to as the WDR; the alternate title for the “World Development Report 2021” could then be “WDR 2021”. translated_title [Optional ; Not repeatable ; String] A translation of the title of the document. Special characters should be properly displayed, such as accents and other stress marks or different alphabets. my_doc &lt;- list( # ... , document_description = list( title_statement = list( idno = &quot;978-1-4648-1342-9&quot;, title = &quot;The Changing Nature of Work&quot;, sub-title = &quot;World Development Report 2019&quot;, alternate_title = &quot;WDR 2019&quot;, translated_title = &quot;Rapport sur le Développement dans le Monde 2019&quot; ), # ... ) ) authors [Optional ; Repeatable] The authors should be listed in the same order as they appear in the source itself, which is not necessarily alphabetical. &quot;authors&quot;: [ { &quot;first_name&quot;: &quot;string&quot;, &quot;initial&quot;: &quot;string&quot;, &quot;last_name&quot;: &quot;string&quot;, &quot;affiliation&quot;: &quot;string&quot;, &quot;author_id&quot;: [ { &quot;type&quot;: null, &quot;id&quot;: null } ], &quot;full_name&quot;: &quot;string&quot; } ] first_name [Optional ; Not repeatable ; String] The first name of the author. initial [Optional ; Not repeatable ; String] The initials of the author. last_name [Optional ; Not repeatable ; String] The last name of the author. affiliation [Optional ; Not repeatable ; String] The affiliation of the author. author_id [Optional ; Repeatable] The author ID in a registry of academic researchers such as the Open Researcher and Contributor ID (ORCID). type [Optional ; Not repeatable ; String] The type of ID, i.e. the identification of the registry that assigned the author’s identifier, for example “ORCID”. id [Optional ; Not repeatable ; String] The ID of the author in the registry mentioned in type. full_name [Optional ; Not repeatable ; String] The full name of the author. This element should only be used when the first and last name of an author cannot be distinguished, i.e. when elements first_name and last_name cannot be filled out. This element can also be used when the author of a document is an organization or other type of entity. my_doc &lt;- list( # ... , document_description = list( # ... , authors = list( list(first_name = &quot;John&quot;, last_name = &quot;Smith&quot;, author_id = list(type = &quot;ORCID&quot;, id = &quot;0000-0002-1234-XXXX&quot;)), list(first_name = &quot;Jane&quot;, last_name = &quot;Doe&quot;), author_id = list(type = &quot;ORCID&quot;, id = &quot;0000-0002-5678-YYYY&quot;)) ), # ... ) editors [Optional ; Repeatable] If the source is a text within an edited volume, it should be listed under the name of the author of the text used, not under the name of the editor. The name of the editor should however be provided in the bibliographic citation, in accordance with a reference style. &quot;editors&quot;: [ { &quot;first_name&quot;: &quot;string&quot;, &quot;initial&quot;: &quot;string&quot;, &quot;last_name&quot;: &quot;string&quot;, &quot;affiliation&quot;: &quot;string&quot; } ] - first_name [Optional ; Not repeatable ; String] The first name of the editor. - initial [Optional ; Not repeatable ; String] The initials of the editor. - last_name [Optional ; Not repeatable ; String] The last name of the editor. - affiliation [Optional ; Not repeatable ; String] The affiliation of the editor. date_created [Optional ; Not repeatable ; String] The date, preferably entered in ISO 8601 format (YYYY-MM-DD or YYYY-MM or YYYY), when the document was produced. This can be different from the date the document was published, made available, and from the temporal coverage. The document “Nigeria - Displacement Report” by the International Organization for Migration (IOM) shown below provides an example of this. The document was produced in November 2020 (date_created), refers to events that occurred between 21 September and 10 October 2021 (temporal_coverage), and was published (date_published) on 28 January 2021. date_available [Optional ; Not repeatable ; String] The date, preferably entered in ISO 8601 format (YYYY-MM-DD or YYYY-MM or YYYY), when the document was made available. This is different from the date it was published (see element date_published below). This element will not be used frequently. date_modified [Optional ; Not repeatable ; String] The date, preferably entered in ISO 8601 format (YYYY-MM-DD or YYYY-MM or YYYY), when the document was last modified. date_published [Optional ; Not repeatable ; String] The date, preferably entered in ISO 8601 format (YYYY-MM-DD or YYYY-MM or YYYY), when the document was published. The example below is a report from the International Organization for Migrations (IOM). It shows the difference between the date the document was created (date_created), published (date_published), and the period it covers (temporal_coverage). In R, this will be captured as follows: my_doc &lt;- list( # ... , document_description = list( # ... , temporal_coverage = &quot;21 September 2020 to 10 October 2020&quot;, date_created = &quot;2020-11&quot;, date_published = &quot;2021-01-28&quot;, # ... ), # ... ) identifiers [Optional ; Repeatable] This element is used to enter document identifiers (IDs) other than the catalog ID entered in the title_statement (idno). It can for example be a Digital Object Identifier (DOI), an International Standard Book Number (ISBN), or an International Standard Serial Number (ISSN). The ID entered in the title_statement can be repeated here (the title_statement does not provide a type parameter; if a DOI, ISBN, ISSN, or other standard reference ID is used as idno, it is recommended to repeat it here with the identification of its type). &quot;identifiers&quot;: [ { &quot;type&quot;: &quot;string&quot;, &quot;identifier&quot;: &quot;string&quot; } ] type [Optional ; Not repeatable ; String] The type of identifier, for example “DOI”, “ISBN”, or “ISSN”. identifier [Required ; Not repeatable ; String] The identifier itself. The example shows the list of identifiers of the World Bank World Development Report 2020 The Changing Nature of Work (see full metadata for this document in the Complete Example 2 of this chapter). my_doc &lt;- list( # ... , document_description = list( # ... , identifiers = list( list(type = &quot;ISSN&quot;, identifier = &quot;0163-5085&quot;), list(type = &quot;ISBN softcover&quot;, identifier = &quot;978-1-4648-1328-3&quot;), list(type = &quot;ISBN hardcover&quot;, identifier = &quot;978-1-4648-1342-9&quot;), list(type = &quot;e-ISBN&quot;, identifier = &quot;978-1-4648-1356-6&quot;), list(type = &quot;DOI softcover&quot;, identifier = &quot;10.1596/978-1-4648-1328-3&quot;), list(type = &quot;DOI hardcover&quot;, identifier = &quot;10.1596/978-1-4648-1342-9&quot;) ), # ... ), # ... ) type [Optional ; Not repeatable ; String] This describes the nature of the resource. It is recommended practice to select a value from a controlled vocabulary, which could for example include the following options: “article”, “book”, “booklet”, “collection”, “conference proceedings”, “manual”, “master thesis”, “patent”, “PhD thesis”, “proceedings”, “technical report”, “working paper”, “website”, “other”. Specialized agencies may want to create their own controlled vocabularies; for example, a national statistical agency may need options like “press release”, “methodology document”, “protocol”, or “yearbook”. The type element can be used to create a “Document type” facet (filter) in a data catalog. If the controlled vocabulary is such that it contains values that are not mutually exclusive (i.e. if a document could possibly have more than one type), the element type cannot be used as it is not repeatable. In such case, the solution is to provide the type of document as tags, in a tag_group that could for example be named type or document_type. Note also that the Dublin Core provides a controlled vocabulary (the DCMI Type Vocabulary) for the type element, but this vocabulary is related to the types of resources (dataset, event, image, software, sound, etc.), not the type of document which is what we are interested in here. status [Optional ; Not repeatable ; String] The status of the document. The status of the document should (but does not have to) be provided using a controlled vocabulary, for example with the following options: “first draft”, “draft”, “reviewed draft”, “final draft”, “final”. Most documents published in a catalog will likely be “final”. description [Optional ; Not repeatable ; String] This element is used to provide a brief description of the document (not an abstract, which would be provided in the field abstract). It should not be used to provide content that is contained in other, more specific elements. As stated in the Dublin Core Usage Guide, “Since the description field is a potentially rich source of indexable terms, care should be taken to provide this element when possible. Best practice recommendation for this element is to use full sentences, as description is often used to present information to users to assist in their selection of appropriate resources from a set of search results.” toc [Optional ; Not repeatable ; String] The table of content of the document, provided as a single string element, i.e. with no structure (an structured alternative is provided with the field toc_structured described below). This element is also a rich source of indexable terms which can contribute to document discoverability; care should thus be taken to use it (or the toc_structured alternative) whenever possible. my_doc &lt;- list( # ... , document_description = list( # ... , toc = &quot;Introduction 1. The importance of rich and structured metadata 1.1 Rich metadata 1.2 Structured metadata 2. Technology: JSON schemas and tools 2.1 JSON schemas 2.1.1 Advantages of JSON over XML 2.2 Defining a metadata schema in JSON format&quot;, # ... ), # ... ) toc_structured [Optional ; Not repeatable] &quot;toc_structured&quot;: [ { &quot;id&quot;: &quot;string&quot;, &quot;parent_id&quot;: &quot;string&quot;, &quot;name&quot;: &quot;string&quot; } ] This element is used as an alternative to toc to provide a structured table of content. The element contains a repeatable block of sub-elements which provides the possibility to define a hierarchical structure: id [Optional ; Not repeatable ; String] A unique identifier for the element of the table of content. For example, the id for Chapter 1 could be “1” while the id for section 1 of chapter 1 would be “11”. parent_id [Optional ; Not repeatable ; String] The id of the parent section (e.g., if the table of content is divided into chapters, themselves divided into sections, the parent_id of a section would be the id of the chapter it belongs to.) name [Required ; Not repeatable ; String] The label of this section of the table of content (e.g., the chapter or section title) The example below shows how the content provided in the previous example is presented in a structured format. my_doc &lt;- list( # ... , document_description = list( # ..., toc_structured = list( list(id = &quot;0&quot;, parent_id = &quot;&quot; , name = &quot;Introduction&quot;), list(id = &quot;1&quot;, parent_id = &quot;&quot; , name = &quot;1. The importance of rich and structured metadata&quot;), list(id = &quot;11&quot;, parent_id = &quot;1&quot;, name = &quot;1.1 Rich metadata&quot;), list(id = &quot;12&quot;, parent_id = &quot;1&quot;, name = &quot;1.2 Structured metadata&quot;), list(id = &quot;2&quot;, parent_id = &quot;&quot; , name = &quot;2. Technology: JSON schemas and tools&quot;), list(id = &quot;21&quot;, parent_id = &quot;2&quot;, name = &quot;2.1 JSON schemas&quot;), list(id = &quot;211&quot;, parent_id = &quot;21&quot;, name = &quot;2.1.1 Advantages of JSON over XML&quot;), list(id = &quot;22&quot;, parent_id = &quot;2&quot;, name = &quot;2.2 Defining a metadata schema in JSON format&quot;) # etc. ), # ... ), # ... ) abstract [Optional ; Not repeatable ; String] The abstract is a summary of the document, usually about one or two paragraph(s) long (around 150 to 300 words). my_doc &lt;- list( # ... , document_description = list( # ... , abstract = &quot;The 2019 World Development Report studies how the nature of work is changing as a result of advances in technology today. While technology improves overall living standards, the process can be disruptive. A new social contract is needed to smooth the transition and guard against inequality.&quot;, # ... ), # ... ) notes [Optional ; Repeatable ; String] notes&quot;: [ { &quot;note&quot;: &quot;string&quot; } ] This field can be used to provide information on the document that does not belong to the other, more specific metadata elements provided in the schema. - note A note, entered as free text. my_doc &lt;- list( # ... , document_description = list( # ... , notes = list( list(note = &quot;This is note 1&quot;), list(note = &quot;This is note 2&quot;) ), # ... ), # ... ) scope [Optional ; Not repeatable ; String] A textual description of the topics covered in the document, which complements (but does not duplicate) the elements description and topics available in the schema. ref_country [Optional ; Repeatable] The list of countries (or regions) covered by the document, if applicable. This is a repeatable block of two elements: name [Required ; Not repeatable ; String] The country/region name. Note that many organizations have their own policies on the naming of countries/regions/economies/territories, which data curators will have to comply with. code [Optional ; Not repeatable ; String] The country/region code. It is recommended to use a standard list of countries codes, such as the ISO 3166. &quot;ref_country&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;code&quot;: &quot;string&quot; } ] The field ref_country will often be used as a filter (facet) in data catalogs. When a document is related to only part of a country, we still want to capture this information in the metadata. For example, the ref_country element for the document “Sewerage and sanitation : Jakarta and Manila” will list “Indonesia” (code IDN) and “Philippines” (code PHL). Considering the importance of the geographic coverage of a document as a filter, the ref_country element deserves particular attention. The document title will often but not always provide the necessary information. Using R, Python or other programming languages, a list of all countries mentioned in a document can be automatically extracted, with their frequencies. This approach (which requires a lookup file containing a list of all countries in the world with their different denominations and spelling) can be used to extract the information needed to populate the ref_country element (not all countries in the list will have to be included; some threshold can be set to only include countries that are “significantly” mentioned in a document). Tools like the R package countrycode are available to facilitate this process. When a document is related to a region (not to specific countries), or when it is related to a topic but not a specific geographic area, the ref_country might still be applicable. Try and extract (possibly using a script that parses the document) information on the countries mentioned in the document. For example, ref_country for the World Bank document “The investment climate in South Asia” should include Afghanistan (mentioned 81 times in the document), Bangladesh (113), Bhutan (94), India (148), Maldives (62), Nepal (64), Pakistan (103), and Sri Lanka (98), but also China (not a South-Asian country, but mentioned 63 times in the document). If a document is not specific to any country, the element ref_country would be ignored (not included in the metadata) if the content of the document is not related to any geographic area (for example, the user’s guide of a software application), or would contain “World” (code WLD) if the document is related but not specific to countries (for example, a document on “Climate change mitigation”). my_doc &lt;- list( # ... , document_description = list( # ... , ref_country = list( list(name = &quot;Bangladesh&quot;, code = &quot;BGD&quot;), list(name = &quot;India&quot;, code = &quot;IND&quot;), list(name = &quot;Nepal&quot;, code = &quot;NPL&quot;) ), # ... ) geographic_units [Optional ; Repeatable] A list of geographic units covered in the document, other than the countries listed in ref_country. &quot;geographic_units&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;code&quot;: &quot;string&quot;, &quot;type&quot;: &quot;string&quot; } ] name [Required ; Not repeatable ; String] The name of the geographic unit. code [Optional ; Not repeatable ; String] The code of the geographic unit. type [Optional ; Not repeatable ; String] The type of the geographic unit (e.g., “province”, “state”, “district”, or “town”). bbox [Optional ; Repeatable] This element is used to define one or multiple geographic bounding box(es), which are the rectangular fundamental geometric description of the geographic coverage of the data. A bounding box is defined by west and east longitudes and north and south latitudes, and includes the largest geographic extent of the dataset’s geographic coverage. The bounding box provides the geographic coordinates of the top left (north/west) and bottom-right (south/east) corners of a rectangular area. This element can be used in catalogs as the first pass of a coordinate-based search. The valid range of latitude in degrees is -90 and +90 for the southern and northern hemisphere, respectively. Longitude is in the range -180 and +180 specifying coordinates west and east of the Prime Meridian, respectively. This element will rarely be used for documenting publications. Bounding boxes are an optional element, but when a bounding box is defined, all four coordinates are required. &quot;bbox&quot;: [ { &quot;west&quot;: &quot;string&quot;, &quot;east&quot;: &quot;string&quot;, &quot;south&quot;: &quot;string&quot;, &quot;north&quot;: &quot;string&quot; } ] west [Required ; Not repeatable ; String] The West longitude of the bounding box. east [Optional ; Not repeatable ; String] The East longitude of the bounding box. south [Optional ; Not repeatable ; String] The South latitude of the bounding box. north [Optional ; Not repeatable ; String] The North latitude of the bounding box. my_doc &lt;- list( # ... , document_description = list( # ... , bbox = list( list(west = &quot;92.12973&quot;, east = &quot;92.26863&quot;, south = &quot;20.91856&quot;, north = &quot;21.22292&quot;) ), # ... ), # ... ) spatial_coverage [Optional ; Not repeatable ; String] This element provides another space for capturing information on the spatial coverage of a document, which complements the ref_country, geographic_units, and bbox elements. It can be used to qualify the geographic coverage of the document, in the form of a free text. For example, a report on refugee camps in the Cox’s Bazar district of Bangladesh would have Bangladesh as reference country, “Cox’s Bazar” as a geographic unit, and “Rohingya’s refugee camps” as spatial coverage. my_doc &lt;- list( # ... , document_description = list( # ... , ref_country = list( list(name = &quot;Bangladesh&quot;, code = &quot;BGD&quot;) ), geographic_units = list( list(name = &quot;Cox&#39;s Bazar&quot;, type = &quot;District&quot;) ), spatial_coverage = &quot;Rohingya&#39;s refugee camps&quot;, # ... ), # ... ) temporal_coverage [Optional ; Not repeatable ; String] Not all documents have a specific time coverage. When they do, it can be specified in this element. publication_frequency [Optional ; Not repeatable ; String] Some documents are published regularly. The frequency of publications can be documented using this element. It is recommended to use a controlled vocabulary, for example the PRISM Publishing Frequency Vocabulary which identifies standard publishing frequencies for a serial or periodical publication. Frequency Description annually Published once a year semiannually Published twice a year quarterly Published every 3 months, or once a quarter bimonthly Published twice a month monthly Published once a month biweekly Published twice a week weekly Published once a week daily Published every day continually Published continually as new content is added; typical of websites and blogs, typically several times a day irregularly Published on an irregular schedule, such as every month except July and August other Published on another schedule not enumerated in this controlled vocabulary languages [Optional ; Repeatable] The language(s) in which the document is written. For the language codes and names, the use of the ISO 639-2 standard is recommended. &quot;languages&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;code&quot;: &quot;string&quot; } ] This is a block of two elements (at least one must be provided for each language): name [Optional ; Not repeatable ; String] The name of the language. code [Optional ; Not repeatable ; String] The code of the language. The use of ISO 639-2 (the alpha-3 code in Codes for the representation of names of languages) is recommended. Numeric codes must be entered as strings. my_doc &lt;- list( # ... , document_description = list( # ... , languages = list( list(name = &quot;English&quot;, code = &quot;EN&quot;) ) # ... ), # ... ) license [Optional ; Repeatable] Information on the license(s) attached to the document, which defines the terms of use. &quot;license&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ] name [Required ; Not repeatable ; String] The name of the license (e.g., CC-BY 4.0). uri [Optional ; Not repeatable ; String] The URL of the license, where detailed information on the license can be obtained. my_doc &lt;- list( # ... , document_description = list( # ... , license = list( list(name = &quot;Creative Commons Attribution 3.0 IGO license (CC BY 3.0 IGO)&quot;, uri = &quot;http://creativecommons.org/licenses/by/3.0/igo&quot;) ), # ... ), # ... ) bibliographic_citation [Optional ; Repeatable] The bibliographic citation provides relevant information about the author and the publication. When using the element bibliographic_citation, the citation is provided as a single item. It should be provided in a standard style: Modern Language Association (MLA), American Psychological Association (APA), or Chicago. Note that the schema provides an itemized list of all elements (BibTex fields) required to build a citation in a format of their choice. &quot;bibliographic_citation&quot;: [ { &quot;style&quot;: &quot;string&quot;, &quot;citation&quot;: &quot;string&quot; } ] style [Optional ; Not repeatable ; String] The citation style, e.g. “MLA”, “APA”, or “Chicago”. citation [Optional ; Not repeatable ; String] The citation in the style mentioned in style. The example below shows how the bibliographic citation for an article published in Econometrica can be provided in three different formats. my_doc &lt;- list( # ... , document_description = list( # ... , bibliographic_citation = list( list(style = &quot;MLA&quot;, citation = &#39;Davidson, Russell, and Jean-Yves Duclos. “Statistical Inference for Stochastic Dominance and for the Measurement of Poverty and Inequality.” Econometrica, vol. 68, no. 6, [Wiley, Econometric Society], 2000, pp. 1435–64, http://www.jstor.org/stable/3003995.&#39;), list(style = &quot;APA&quot;, citation = &#39;Davidson, R., &amp; Duclos, J.-Y. (2000). Statistical Inference for Stochastic Dominance and for the Measurement of Poverty and Inequality. Econometrica, 68(6), 1435–1464. http://www.jstor.org/stable/3003995&#39;), list(style = &quot;Chicago&quot;, citation = &#39;Davidson, Russell, and Jean-Yves Duclos. “Statistical Inference for Stochastic Dominance and for the Measurement of Poverty and Inequality.” Econometrica 68, no. 6 (2000): 1435–64. http://www.jstor.org/stable/3003995.&#39;) ), # ... ), # ... ) Bibliographic elements The elements that follow are bibliographic elements that correspond to BibTex fields. Note that some of the BibTex elements are found elsewhere in the schema (namely type, authors, editors, year and month, isbn, issn and doi); when constructing a bibliographic citation, these external elements will have to be included as relevant. The description of the bibliographic fields listed below was adapted from Wikipedia’s description of BibTex. { &quot;chapter&quot;: &quot;string&quot;, &quot;edition&quot;: &quot;string&quot;, &quot;institution&quot;: &quot;string&quot;, &quot;journal&quot;: &quot;string&quot;, &quot;volume&quot;: &quot;string&quot;, &quot;number&quot;: &quot;string&quot;, &quot;pages&quot;: &quot;string&quot;, &quot;series&quot;: &quot;string&quot;, &quot;publisher&quot;: &quot;string&quot;, &quot;publisher_address&quot;: &quot;string&quot;, &quot;annote&quot;: &quot;string&quot;, &quot;booktitle&quot;: &quot;string&quot;, &quot;crossref&quot;: &quot;string&quot;, &quot;howpublished&quot;: &quot;string&quot;, &quot;key&quot;: &quot;string&quot;, &quot;organization&quot;: &quot;string&quot;, &quot;url&quot;: null } The elements that are required to form a complete bibliographic citation depend on the type of document. The table below, adapted from the BibTex templates, provides a list of required and optional fields by type of document: Document type Required fields Optional fields Article from a journal or magazine author, title, journal, year volume, number, pages, month, note, key Book with an explicit publisher author or editor, title, publisher, year volume, series, address, edition, month, note, key Printed and bound document without a named publisher or sponsoring institution title author, howpublished, address, month, year, note, key Part of a book (chapter and/or range of pages) author or editor, title, chapter and/or pages, publisher, year volume, series, address, edition, month, note, key Part of a book with its own title author, title, book title, publisher, year editor, pages, organization, publisher, address, month, note, key Article in a conference proceedings author, title, book title, year editor, pages, organization, publisher, address, month, note, key Technical documentation title author, organization, address, edition, month, year, key Master’s thesis author, title, school, year address, month, note, key Ph.D. thesis author, title, school, year address, month, note, key Proceedings of a conference title, year editor, publisher, organization, address, month, note, key Report published by a school or other institution, usually numbered within a series author, title, institution, year type, number, address, month, note, key Document with an author and title, but not formally published author, title, note month, year, key chapter [Optional ; Not repeatable ; String] A chapter (or section) number. This element is only used to document a resource which has been extracted from a book. edition [Optional ; Not repeatable ; String] The edition of a book - for example “Second”. When a book has no edition number/name present, it can be assumed to be a first edition. If the edition is other than the first, information on the edition of the book being documented must be mentioned in the citation. The edition can be identified by a number, a label (such as “Revised edition” or “Abridged edition”), and/or a year. The first letter of the label should be capitalized. institution [Optional ; Not repeatable ; String] The sponsoring institution of a technical report. For citations of Master’s and Ph.D. thesis, this will be the name of the school. journal [Optional ; Not repeatable ; String] A journal name. Abbreviations are provided for many journals. volume [Optional ; Not repeatable ; String] The volume of a journal or multi-volume book. Periodical publications, such as scholarly journals, are published on a regular basis in installments that are called issues. A volume usually consists of the issues published during one year. number [Optional ; Not repeatable ; String] The number of a journal, magazine, technical report, or of a work in a series. An issue of a journal or magazine is usually identified by its volume (see previous element) and number; the organization that issues a technical report usually gives it a number; and sometimes books are given numbers in a named series. pages [Optional ; Not repeatable ; String] One or more page numbers or range of numbers, such as 42-111 or 7,41,73-97 or 43+ (the `+’ indicates pages following that don’t form a simple range). series [Optional ; Not repeatable ; String] The name of a series or set of books. When citing an entire book, the title field gives its title and an optional series field gives the name of a series or multi-volume set in which the book is published. publisher [Optional ; Not repeatable ; String] The entity responsible for making the resource available. For major publishing houses, the information can be omitted. For small publishers, providing the complete address is recommended. If the company is a university press, the abbreviation UP (for University Press) can be used. The publisher is not stated for journal articles, working papers, and similar types of documents. publisher_address [Optional ; Not repeatable ; String] The address of the publisher. For major publishing houses, just the city is given. For small publishers, the complete address can be provided. annote [Optional ; Not repeatable ; String] An annotation. This element will not be used by standard bibliography styles like the MLA, APA or Chicago, but may be used by others that produce an annotated bibliography. booktitle [Optional ; Not repeatable ; String] Title of a book, part of which is being cited. If you are documenting the book itself, this element will not be used; it is only used when part of a book is being documented. crossref [Optional ; Not repeatable ; String] The catalog identifier (“database key”) of another catalog entry being cross referenced. This element may be used when multiple entries refer to a same publication, to avoid duplication. howpublished [Optional ; Not repeatable ; String] The howpublished element is used to store the notice for unusual publications. The first word should be capitalized. For example, “WebPage”, or “Distributed at the local tourist office”. key [Optional ; Not repeatable ; String] A key is a field used for alphabetizing, cross referencing, and creating a label when the `author’ information is missing. organization [Optional ; Not repeatable ; String] The organization that sponsors a conference or that publishes a manual. url [Optional ; Not repeatable ; String] The URL of the document, preferably a permanent URL. This example makes use of the same Econometrica paper used in the previous example. my_doc &lt;- list( # ... , document_description = list( # ... , bibliographic_fields = list( doi = &quot;https://doi.org/10.1111/1468-0262.00167&quot;, journal = &quot;Econometrica&quot;, volume = &quot;68&quot;, issue = &quot;6&quot;, pages = &quot;1435-1464&quot;, url = &quot;https://onlinelibrary.wiley.com/doi/abs/10.1111/1468-0262.00167&quot; ), # ... ), # ... ) translators [Optional ; Repeatable] Information on translators, for publications that are translations of publication originally created in another language. &quot;translators&quot;: [ { &quot;first_name&quot;: &quot;string&quot;, &quot;initial&quot;: &quot;string&quot;, &quot;last_name&quot;: &quot;string&quot;, &quot;affiliation&quot;: &quot;string&quot; } ] first_name [Optional ; Not repeatable ; String] The first name of the translator. initial [Optional ; Not repeatable ; String] The initials of the translator. last_name [Optional ; Not repeatable ; String] The last name of the translator. affiliation [Optional ; Not repeatable ; String] The affiliation of the translator. contributors [Optional ; Repeatable] These elements are used to acknowledge contributions to the production of the document, other than the ones for which specific metadata elements are provided (like autors or translators). &quot;contributors&quot;: [ { &quot;first_name&quot;: &quot;string&quot;, &quot;initial&quot;: &quot;string&quot;, &quot;last_name&quot;: &quot;string&quot;, &quot;affiliation&quot;: &quot;string&quot;, &quot;contribution&quot;: &quot;string&quot; } ] first_name [Optional ; Not repeatable ; String] The first name of the contributor. initial [Optional ; Not repeatable ; String] The initials of the contributor. last_name [Optional ; Not repeatable ; String] The last name of the contributor. If the contributor is an organization, enter the name of the organization here. affiliation [Optional ; Not repeatable ; String] The affiliation of the contributor. contribution [Optional ; Not repeatable ; String] A brief description of the specific contribution of the person to the document, e.g. “Design of the cover page”, or “Proofreading”. contacts [Optional ; Repeatable] Contact information for a person or organization that can be contacted for inquiries related to the document. &quot;contacts&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;role&quot;: &quot;string&quot;, &quot;affiliation&quot;: &quot;string&quot;, &quot;email&quot;: &quot;string&quot;, &quot;telephone&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ] name [Optional ; Not repeatable ; String] The name of the contact. This can be a person or an organization.. role [Optional ; Not repeatable ; String] The specific role of the person or organization mentioned in contact. affiliation [Optional ; Not repeatable ; String] The affiliation of the contact person. email [Optional ; Not repeatable ; String] The email address of the contact person or organization. Personal emails should be avoided. telephone [Optional ; Not repeatable ; String] The telephone number for the contact person or organization. Personal phone numbers should be avoided. uri [Optional ; Not repeatable ; String] A link to an on-line resource related to the contact person or organization. rights [Optional ; Not repeatable ; String] A statement on the rights associated with the document (others than the copyright, which should be described in the element copyright described below). The example is extracted from the World Bank World Development Report 2019. my_doc &lt;- list( # ... , document_description = list( # ... , rights = &quot;Some rights reserved. Nothing herein shall constitute or be considered to be a limitation upon or waiver of the privileges and immunities of The World Bank, all of which are specifically reserved.&quot;, # ... ), # ... ) copyright [Optional ; Not repeatable ; String] A statement and identifier indicating the legal ownership and rights regarding use and re-use of all or part of the resource. If the document is protected by a copyright, enter the information on the person or organization who owns the rights. usage_terms [Optional ; Not repeatable ; String] This element is used to provide a description of the legal terms or other conditions that a person or organization who wants to use or reproduce the document has to comply with. disclaimer [Optional ; Not repeatable ; String] A disclaimer limits the liability of the author(s) and/or publisher(s) of the document. A standard legal statement should be used for all documents from a same agency. my_doc &lt;- list( # ... , document_description = list( # ... , disclaimer = &quot;This work is a product of the staff of The World Bank with external contributions. The findings, interpretations, and conclusions expressed in this work do not necessarily reflect the views of The World Bank, its Board of Executive Directors, or the governments they represent. The World Bank does not guarantee the accuracy of the data included in this work. The boundaries, colors, denominations, and other information shown on any map in this work do not imply any judgment on the part of The World Bank concerning the legal status of any territory or the endorsement or acceptance of such boundaries.&quot; # ... ), # ... ) security_classification [Optional ; Not repeatable ; String] Information on the security classification attached to the document. The different levels of classification indicate the degree of sensitivity of the content of the document. This field should make use of a controlled vocabulary, specific or adopted by the organization that curates or disseminates the document. Such a vocabulary could contain the following levels: public, internal only, confidential, restricted, strictly confidential access_restrictions [Optional ; Not repeatable ; String] A textual description of access restrictions that apply to the document. sources [Optional ; Repeatable] &quot;sources&quot;: [ { &quot;source_origin&quot;: &quot;string&quot;, &quot;source_char&quot;: &quot;string&quot;, &quot;source_doc&quot;: &quot;string&quot; } ] This element is used to describe the sources of different types (except data sources, which must be listed in the next element data_source) that were used in the production of the document. - source_origin [Optional ; Not repeatable ; String] For historical materials, information about the origin(s) of the sources and the rules followed in establishing the sources should be specified. - source_char [Optional ; Not repeatable ; String] Characteristics of the source. Assessment of characteristics and quality of source material. - source_doc [Optional ; Not repeatable ; String] Documentation and access to the source. data_sources [Optional ; Repeatable] &quot;data_sources&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot;, &quot;note&quot;: &quot;string&quot; } ] Used to list the machine-readable data file(s) -if any- that served as the source(s) of the data collection. - name [Required ; Not repeatable ; String] Name (title) of the dataset used as source. - uri [Optional ; Not repeatable ; String] Link (URL) to the dataset or to a web page describing the dataset. - note [Optional ; Not repeatable ; String] Additional information on the data source. The data source for the publication Bangladesh Demographic and Health Survey (DHS), 2017-18 - Final Report would be entered as follows: my_doc &lt;- list( # ... , document_description = list( # ... , data_sources = list( list(name = &quot;Bangladesh Demographic and Health Survey 2017-18&quot;, uri = &quot;https://www.dhsprogram.com/methodology/survey/survey-display-536.cfm&quot;, note = &quot;Household survey conducted by the National Institute of Population Research and Training, Medical Education and Family Welfare Division and Ministry of Health and Family Welfare. Data and documentation available at https://dhsprogram.com/)&quot; ), # ... ), # ... ) keywords [Optional ; Repeatable] &quot;keywords&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;vocabulary&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ] A list of keywords that provide information on the core content of the document. Keywords provide a convenient solution to improve the discoverability of the document, as it allows terms and phrases not found in the document itself to be indexed and to make a document discoverable by text-based search engines. A controlled vocabulary can be used (although not required), such as the UNESCO Thesaurus. The list provided here can combine keywords from multiple controlled vocabularies and user-defined keywords. name [Required ; Not repeatable ; String] The keyword itself. vocabulary [Optional ; Not repeatable ; String] The controlled vocabulary (including version number or date) from which the keyword is extracted, if any. uri [Optional ; Not repeatable ; String] The URL of the controlled vocabulary from which the keyword is extracted, if any. my_doc &lt;- list( # ... , document_description = list( # ... , keywords = list( list(name = &quot;Migration&quot;, vocabulary = &quot;Unesco Thesaurus (June 2021)&quot;, uri = &quot;http://vocabularies.unesco.org/browser/thesaurus/en/page/concept427&quot;), list(name = &quot;Migrants&quot;, vocabulary = &quot;Unesco Thesaurus (June 2021)&quot;, uri = &quot;http://vocabularies.unesco.org/browser/thesaurus/en/page/concept427&quot;), list(name = &quot;Refugee&quot;, vocabulary = &quot;Unesco Thesaurus (June 2021)&quot;, uri = &quot;http://vocabularies.unesco.org/browser/thesaurus/en/page/concept427&quot;), list(name = &quot;Conflict&quot;), list(name = &quot;Asylum seeker&quot;), list(name = &quot;Forced displacement&quot;), list(name = &quot;Forcibly displaced&quot;), list(name = &quot;Internally displaced population (IDP)&quot;), list(name = &quot;Population of concern (PoC)&quot;) list(name = &quot;Returnee&quot;) list(name = &quot;UNHCR&quot;) ), # ... ), # ... ) themes [Optional ; Repeatable] &quot;themes&quot;: [ { &quot;id&quot;: &quot;string&quot;, &quot;name&quot;: &quot;string&quot;, &quot;parent_id&quot;: &quot;string&quot;, &quot;vocabulary&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ] A list of themes covered by the document. A controlled vocabulary will preferably be used. The list provided here can combine themes from multiple controlled vocabularies and user-defined themes. Note that themes will rarely be used as the elements topics and disciplines are more appropriate for most uses. This is a block of five fields: id [Optional ; Not repeatable ; String] The ID of the theme, taken from a controlled vocabulary. name [Required ; Not repeatable ; String] The name (label) of the theme, preferably taken from a controlled vocabulary. parent_id [Optional ; Not repeatable ; String] The parent ID of the theme (ID of the item one level up in the hierarchy), if a hierarchical controlled vocabulary is used. vocabulary [Optional ; Not repeatable ; String] The name (including version number) of the controlled vocabulary used, if any. uri [Optional ; Not repeatable ; String] The URL to the controlled vocabulary used, if any. topics [Optional ; Repeatable] &quot;topics&quot;: [ { &quot;id&quot;: &quot;string&quot;, &quot;name&quot;: &quot;string&quot;, &quot;parent_id&quot;: &quot;string&quot;, &quot;vocabulary&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ] Information on the topics covered in the document. A controlled vocabulary will preferably be used, for example the CESSDA Topics classification, a typology of topics available in 11 languages; or the Journal of Economic Literature (JEL) Classification System, or the World Bank topics classification. The list provided here can combine topics from multiple controlled vocabularies and user-defined topics. The element is a block of five fields: id [Optional ; Not repeatable ; String] The identifier of the topic, taken from a controlled vocabulary. name [Required ; Not repeatable ; String] The name (label) of the topic, preferably taken from a controlled vocabulary. parent_id [Optional ; Not repeatable ; String] The parent identifier of the topic (identifier of the item one level up in the hierarchy), if a hierarchical controlled vocabulary is used. vocabulary [Optional ; Not repeatable ; String] The name (including version number) of the controlled vocabulary used, if any. uri [Optional ; Not repeatable ; String] The URL to the controlled vocabulary used, if any. We use the working paper “Push and Pull - A Study of International Migration from Nepal” by Maheshwor Shrestha, World Bank Policy Research Working Paper 7965, February 2017, as an example. my_doc &lt;- list( # ... , document_description = list( # ... , topics = list( list(name = &quot;Demography.Migration&quot;, vocabulary = &quot;CESSDA Topic Classification&quot;, uri = &quot;https://vocabularies.cessda.eu/vocabulary/TopicClassification&quot;), list(name = &quot;Demography.Censuses&quot;, vocabulary = &quot;CESSDA Topic Classification&quot;, uri = &quot;https://vocabularies.cessda.eu/vocabulary/TopicClassification&quot;), list(id = &quot;F22&quot;, name = &quot;International Migration&quot;, parent_id = &quot;F2 - International Factor Movements and International Business&quot;, vocabulary = &quot;JEL Classification System&quot;, uri = &quot;https://www.aeaweb.org/econlit/jelCodes.php?view=jel#J&quot;), list(id = &quot;O15&quot;, name = &quot;Human Resources - Human Development - Income Distribution - Migration&quot;, parent_id = &quot;O1 - Economic Development&quot;, vocabulary = &quot;JEL Classification System&quot;, uri = &quot;https://www.aeaweb.org/econlit/jelCodes.php?view=jel#J&quot;), list(id = &quot;O12&quot;, name = &quot;Microeconomic Analyses of Economic Development&quot;, parent_id = &quot;O1 - Economic Development&quot;, vocabulary = &quot;JEL Classification System&quot;, uri = &quot;https://www.aeaweb.org/econlit/jelCodes.php?view=jel#J&quot;), list(id = &quot;J61&quot;, name = &quot;Geographic Labor Mobility - Immigrant Workers&quot;, parent_id = &quot;J6 - Mobility, Unemployment, Vacancies, and Immigrant Workers&quot;, vocabulary = &quot;JEL Classification System&quot;, uri = &quot;https://www.aeaweb.org/econlit/jelCodes.php?view=jel#J&quot;) ), # ... ), ) disciplines [Optional ; Repeatable] &quot;disciplines&quot;: [ { &quot;id&quot;: &quot;string&quot;, &quot;name&quot;: &quot;string&quot;, &quot;parent_id&quot;: &quot;string&quot;, &quot;vocabulary&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ] Information on the academic disciplines related to the content of the document. A controlled vocabulary will preferably be used, for example the one provided by the list of academic fields in Wikipedia. The list provided here can combine disciplines from multiple controlled vocabularies and user-defined disciplines. This is a block of five elements: id [Optional ; Not repeatable ; String] The identifier of the discipline, taken from a controlled vocabulary. name [Optional ; Not repeatable ; String] The name (label) of the discipline, preferably taken from a controlled vocabulary. parent_id [Optional ; Not repeatable ; String] The parent identifier of the discipline (identifier of the item one level up in the hierarchy), if a hierarchical controlled vocabulary is used. vocabulary [Optional ; Not repeatable ; String] The name (including version number) of the controlled vocabulary used, if any. uri [Optional ; Not repeatable ; String] The URL to the controlled vocabulary used, if any. my_doc &lt;- list( # ... , document_description = list( # ... , disciplines = list( list(name = &quot;Economics&quot;, vocabulary = &quot;Wikipedia List of academic fields (as of 21 June 2021)&quot;, uri = &quot;https://en.wikipedia.org/wiki/List_of_academic_fields&quot;), list(name = &quot;Agricultural economics&quot;, vocabulary = &quot;Wikipedia List of academic fields (as of 21 June 2021)&quot;, uri = &quot;https://en.wikipedia.org/wiki/List_of_academic_fields&quot;), list(name = &quot;Econometrics&quot;, vocabulary = &quot;Wikipedia List of academic fields (as of 21 June 2021)&quot;, uri = &quot;https://en.wikipedia.org/wiki/List_of_academic_fields&quot;) ), # ... ), # ... ) audience [Optional ; Not repeatable ; String] Information on the intended audience for the document, i.e. the category or categories of users for whom the resource is intended in terms of their interest, skills, status, or other. mandate [Optional ; Not repeatable ; String] The legislative or other mandate under which the resource was produced. pricing [Optional ; Not repeatable ; String] The current price of the document in any defined currency. As this information is subject to regular change, it will often not be included in the document metadata. relations [Optional ; Repeatable] References to related resources with a specification of the type of relationship. &quot;relations&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;type&quot;: &quot;isPartOf&quot; } ] name [Optional ; Not repeatable ; String] The related resource. Recommended practice is to identify the related resource by means of a URL. If this is not possible or feasible, a string conforming to a formal identification system may be provided. type [Optional ; Not repeatable ; String] The type of relationship. The use of a controlled vocabulary is recommended. The Dublin Core proposes the following vocabulary: {isPartOf, hasPart, isVersionOf, isFormatOf, hasFormat, references, isReferencedBy, isBasedOn, isBasisFor, replaces, isReplacedBy, requires, isRequiredBy}. Type Description isPartOf The described resource is a physical or logical part of the referenced resource. hasPart isVersionOf The described resource is a version edition or adaptation of the referenced resource. A change in version implies substantive changes in content rather than differences in format. isFormatOf hasFormat The described resource pre-existed the referenced resource, which is essentially the same intellectual content presented in another format. references isReferencedBy isBasedOn isBasisFor replaces The described resource supplants, displaces or supersedes the referenced resource. isReplacedBy The described resource is supplanted, displaced or superseded by the referenced resource. requires reproducibility [Optional ; Not repeatable] &quot;reproducibility&quot;: { &quot;statement&quot;: &quot;string&quot;, &quot;links&quot;: [ { &quot;uri&quot;: &quot;string&quot;, &quot;description&quot;: &quot;string&quot; } ] } We present in chapter 12 a metadata schema intended to document reproducible research and scripts. That chapter lists multiple reasons to make research reproducible, replicable, and auditable. Ideally, when a research output (paper) is published, the data and code used in the underlying analysis should be made as openly available as possible. Increasingly, academic journals make it a requirement. The reproducibility element is used to provide interested users with information on reproducibility and replicability of the research output. statement [Optional ; Not repeatable ; String] A general statement on reproducibility and replicability of the analysis (including data processing, tabulation, production of visualizations, modeling, etc.) being presented in the document. links [Optional ; Repeatable] Links to web pages where reproducible materials and the related information can be found. uri [Optional ; Not repeatable ; String] The link to a web page. description [Optional ; Not repeatable ; String] A brief description of the content of the web page. my_doc &lt;- list( # ... , document_description = list( # ... , reproducibility = list( statement = &quot;The scripts used to acquire data, assess and edit data files, train the econometric models, and to generate the tables and charts included in the publication, are openly accessible (Stata 15 scripts).&quot;, links = list( list(uri = &quot;www.[...]&quot;, description = &quot;Description and access to reproducible Stata scripts&quot;), list(uri = &quot;www.[...]&quot;, description = &quot;Derived data files&quot;) ) ), # ... ), # ... ) 4.2.3 Provenance Metadata can be programmatically harvested from external catalogs. The provenance group of elements is used to store information on the provenance of harvested metadata, and on alterations that may have been made to the harvested metadata. &quot;provenance&quot;: [ { &quot;origin_description&quot;: { &quot;harvest_date&quot;: &quot;string&quot;, &quot;altered&quot;: true, &quot;base_url&quot;: &quot;string&quot;, &quot;identifier&quot;: &quot;string&quot;, &quot;date_stamp&quot;: &quot;string&quot;, &quot;metadata_namespace&quot;: &quot;string&quot; } } ] origin_description [Required ; Not repeatable] The origin_description elements are used to describe when and from where metadata have been extracted or harvested. harvest_date [Required ; Not repeatable ; String] The date and time the metadata were harvested, entered in ISO 8601 format. altered [Optional ; Not repeatable ; Boolean] A boolean variable (“true” or “false”; “true by default) indicating whether the harvested metadata have been modified before being re-published. In many cases, the unique identifier of the study (element idno in the Document Description / Title Statement section) will be modified when published in a new catalog. base_url [Required ; Not repeatable ; String] The URL from where the metadata were harvested. identifier [Optional ; Not repeatable ; String] The unique dataset identifier (idno element) in the source catalog. When harvested metadata are re-published in a new catalog, the identifier will likely be changed. The identifier element in provenance is used to maintain traceability. date_stamp [Optional ; Not repeatable ; String] The date stamp (in UTC date format) of the metadata record in the originating repository (this should correspond to the date the metadata were last updated in the source catalog). metadata_namespace [Optional ; Not repeatable ; String] @@@@@@@ 4.2.4 Tags tags [Optional ; Repeatable] As shown in section 1.7 of the Guide, tags, when associated with tag_groups, provide a powerful and flexible solution to enable custom facets (filters) in data catalogs. See section 1.7 for an example in R. &quot;tags&quot;: [ { &quot;tag&quot;: &quot;string&quot;, &quot;tag_group&quot;: &quot;string&quot; } ] tag [Required ; Not repeatable ; String] A user-defined tag. tag_group [Optional ; Not repeatable ; String] A user-defined group (optional) to which the tag belongs. Grouping tags allows implementation of controlled facets in data catalogs. 4.2.5 LDA topics lda_topics [Optional ; Not repeatable] &quot;lda_topics&quot;: [ { &quot;model_info&quot;: [ { &quot;source&quot;: &quot;string&quot;, &quot;author&quot;: &quot;string&quot;, &quot;version&quot;: &quot;string&quot;, &quot;model_id&quot;: &quot;string&quot;, &quot;nb_topics&quot;: 0, &quot;description&quot;: &quot;string&quot;, &quot;corpus&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ], &quot;topic_description&quot;: [ { &quot;topic_id&quot;: null, &quot;topic_score&quot;: null, &quot;topic_label&quot;: &quot;string&quot;, &quot;topic_words&quot;: [ { &quot;word&quot;: &quot;string&quot;, &quot;word_weight&quot;: 0 } ] } ] } ] We mentioned in Chapter 1 the importance of producing rich metadata, and the opportunities that machine learning offers to enrich (or “augment”) metadata in a largely automated manner. One application of machine learning, more specifically of natural language processing, to enrich metadata related to publications is the topic extraction using Latent Dirichlet Allocation (LDA) models. LDA models must be trained on large corpora of documents. They do not require any pre-defined taxonomy of topics. The approach consists of “clustering” words that are likely to appear in similar contexts (the number of “clusters” or “topics” is a parameter provided when training a model). Clusters of related words form “topics”. A topic is thus defined by a list of keywords, each one of them provided with a score indicating its importance in the topic. Typically, the top 10 words that represent a topic will be used to describe it. The description of the topics covered by a document can be indexed to improve searchability (possibly in a selective manner, by setting thresholds on the topic shares and word weights). Once an LDA topic model has been trained, it can be used to infer the topic composition of any document. This inference will then provide the share that each topic represents in the document. The sum of all represented topics is 1 (100%). The metadata element lda_topics is provided to allow data curators to store information on the inferred topic composition of the documents listed in a catalog. Sub-elements are provided to describe the topic model, and the topic composition. Important note: the topic composition of a document is specific to a topic model. To ensure consistency of the information captured in the lda_topics elements, it is important to make use of the same model(s) for generating the topic composition of all documents in a catalog. If a new, better LDA model is trained, the topic composition of all documents in the catalog should be updated. The image below provides an example of topics extracted from a document from the United Nations High Commission for Refugees, using a LDA topic model trained by the World Bank (this model was trained to identify 75 topics; no document will cover all topics). The lda_topics element includes the following metadata fields: model_info [Optional ; Not repeatable] Information on the LDA model. source [Optional ; Not repeatable ; String] The source of the model (typically, an organization). author [Optional ; Not repeatable ; String] The author(s) of the model. version [Optional ; Not repeatable ; String] The version of the model, which could be defined by a date or a number. model_id [Optional ; Not repeatable ; String] The unique ID given to the model. nb_topics [Optional ; Not repeatable ; Numeric] The number of topics in the model (the number of topics to be extracted from a corpus is the key parameter of any LDA model). description [Optional ; Not repeatable ; String] A brief description of the model. corpus [Optional ; Not repeatable ; String] A brief description of the corpus on which the LDA model was trained. uri [Optional ; Not repeatable ; String] A link to a web page where additional information on the model is available. topic_description [Optional ; Repeatable] The topic composition of the document. topic_id [Optional ; Not repeatable ; String] The identifier of the topic; this will often be a sequential number (Topic 1, Topic 2, etc.). topic_score [Optional ; Not repeatable ; Numeric] The share of the topic in the document (%). topic_label [Optional ; Not repeatable ; String] The label of the topic, if any (not automatically generated by the LDA model). topic_words [Optional ; Not repeatable] The list of N keywords describing the topic (e.g., the top 5 words). word [Optional ; Not repeatable ; String] The word. word_weight [Optional ; Not repeatable ; Numeric] The weight of the word in the definition of the topic. This is specific to the model, not to a document. lda_topics = list( list( model_info = list( list(source = &quot;World Bank, Development Data Group&quot;, author = &quot;A.S.&quot;, version = &quot;2021-06-22&quot;, model_id = &quot;Mallet_WB_75&quot;, nb_topics = 75, description = &quot;LDA model, 75 topics, trained on Mallet&quot;, corpus = &quot;World Bank Documents and Reports (1950-2021)&quot;, uri = &quot;&quot;)) ), topic_description = list( list(topic_id = &quot;topic_27&quot;, topic_score = 32, topic_label = &quot;Education&quot;, topic_words = list(list(word = &quot;school&quot;, word_weight = &quot;&quot;) list(word = &quot;teacher&quot;, word_weight = &quot;&quot;), list(word = &quot;student&quot;, word_weight = &quot;&quot;), list(word = &quot;education&quot;, word_weight = &quot;&quot;), list(word = &quot;grade&quot;, word_weight = &quot;&quot;)), list(topic_id = &quot;topic_8&quot;, topic_score = 24, topic_label = &quot;Gender&quot;, topic_words = list(list(word = &quot;women&quot;, word_weight = &quot;&quot;) list(word = &quot;gender&quot;, word_weight = &quot;&quot;), list(word = &quot;man&quot;, word_weight = &quot;&quot;), list(word = &quot;female&quot;, word_weight = &quot;&quot;), list(word = &quot;male&quot;, word_weight = &quot;&quot;)), list(topic_id = &quot;topic_39&quot;, topic_score = 22, topic_label = &quot;Forced displacement&quot;, topic_words = list(list(word = &quot;refugee&quot;, word_weight = &quot;&quot;) list(word = &quot;programme&quot;, word_weight = &quot;&quot;), list(word = &quot;country&quot;, word_weight = &quot;&quot;), list(word = &quot;migration&quot;, word_weight = &quot;&quot;), list(word = &quot;migrant&quot;, word_weight = &quot;&quot;)), list(topic_id = &quot;topic_40&quot;, topic_score = 11, topic_label = &quot;Development policies&quot;, topic_words = list(list(word = &quot;development&quot;, word_weight = &quot;&quot;) list(word = &quot;policy&quot;, word_weight = &quot;&quot;), list(word = &quot;national&quot;, word_weight = &quot;&quot;), list(word = &quot;strategy&quot;, word_weight = &quot;&quot;), list(word = &quot;activity&quot;, word_weight = &quot;&quot;)) ) ) ) The information provided by LDA models can be used to build a “filter by topic composition” tool in a catalog, to help identify documents based on a combination of topics, allowing users to set minimum thresholds on the share of each selected topic. 4.2.6 Embeddings embeddings [Optional ; Repeatable] In Chapter 1 (section 1.n), we briefly introduced the concept of word embeddings and their use in implementation of semantic search tools. Word embedding models convert text (words, phrases, documents) into large-dimension numeric vectors (e.g., a vector of 100 or 200 numbers) that are representative of the semantic content of the text. The vectors are generated by submitting a text to a pre-trained word embedding model (possibly via an API). These vector representations can be used to identify semantically-closed documents, by calculating the distance between vectors and identifying the closest ones, as shown in the example below. The word vectors do not have to be stored in the document metadata to be exploited by search engines. When a semantic search tool is implemented in a catalog, the vectors will be stored in a database end processed by a tool like Milvus. A metadata element is however provided to store the vectors for preservation and sharing purposes. This block of metadata elements is repeatable, allowing multiple vectors to be stored. When using vectors in a search engine, it is critical to only use vectors generated by one same model. &quot;embeddings&quot;: [ { &quot;id&quot;: &quot;string&quot;, &quot;description&quot;: &quot;string&quot;, &quot;date&quot;: &quot;string&quot;, &quot;vector&quot;: null } ] The embeddings element contains four metadata fields: id [Optional ; Not repeatable ; String] A unique identifier of the word embedding model used to generate the vector. description [Optional ; Not repeatable ; String] A brief description of the model. This may include the identification of the producer, a description of the corpus on which the model was trained, the identification of the software and algorithm used to train the model, the size of the vector, etc. date [Optional ; Not repeatable ; String] The date the model was trained (or a version date for the model). vector [Required ; Not repeatable ; Object] @@@@@@@@ do not offer options The numeric vector representing the document, provided as an object (array or string). [1,4,3,5,7,9] 4.2.7 Additional fields additional [Optional ; Not repeatable] The additional element allows data curators to add their own metadata elements to the schema. All custom elements must be added within the additional block; embedding them elsewhere in the schema would cause schema validation to fail. 4.3 Complete examples Generating metadata compliant with the document schema is easy. The three examples below illustrate how metadata can be generated and published in a NADA catalog, programmatically. In the first two examples, we assume that an electronic copy of a document is available, and that the metadata must be generated from scratch (not by re-purposing/mapping existing metadata). In the third example, we assume that a list of publications with some metadata is available as a CSV file; metadata compliant with the schema are created and published in a catalog using a single script. 4.3.1 Example 1: Working Paper 4.3.1.1 Description This document is the World Bank Policy Working Paper No 9412, titled “Predicting Food Crises” published in September 2020 under a CC-By 4.0 license. The list of authors is provided on the cover page; an abstract, a list of acknowledgments, and a list of keywords are also provided. 4.3.1.2 Using a metadata editor (use the open source WB metadata editor) image 4.3.1.3 Using R library(nadar) # ---------------------------------------------------------------------------------- my_keys &lt;- read.csv(&quot;C:/confidential/my_API_keys.csv&quot;, header=F, stringsAsFactors=F) set_api_key(&quot;my_keys[1,1&quot;) set_api_url(&quot;https://.../index.php/api/&quot;) set_api_verbose(FALSE) # ---------------------------------------------------------------------------------- setwd(&quot;C:/my_folder&quot;) doc_file &lt;- &quot;WB_PRWP_9412_Food_Crises.pdf&quot; id &lt;- &quot;WB_WPS9412&quot; thumb_file &lt;- gsub(&quot;.pdf&quot;, &quot;.jpg&quot;, doc_file) capture_pdf_cover(doc_file) # Capture cover page for use as thumbnail example_1 &lt;- list( document_description = list( title_statement = list(idno = id, title = &quot;Predicting Food Crises&quot;), date_published = &quot;2020-09&quot;, authors = list( list(last_name = &quot;Andrée&quot;, first_name = &quot;Bo Pieter Johannes&quot;, affiliation = &quot;World Bank&quot;, author_id = list(list(type = &quot;ORCID&quot;, id = &quot;0000-0002-8007-5007&quot;))), list(last_name = &quot;Chamorro&quot;, first_name = &quot;Andres&quot;, affiliation = &quot;World Bank&quot;), list(last_name = &quot;Kraay&quot;, first_name = &quot;Aart&quot;, affiliation = &quot;World Bank&quot;), list(last_name = &quot;Spencer&quot;, first_name = &quot;Phoebe&quot;, affiliation = &quot;World Bank&quot;), list(last_name = &quot;Wang&quot;, first_name = &quot;Dieter&quot;, affiliation = &quot;World Bank&quot;, author_id = list(list(type = &quot;ORCID&quot;, id = &quot;0000-0003-1287-332X&quot;))) ), journal = &quot;World Bank Policy Research Working Paper&quot;, number = &quot;9412&quot;, publisher = &quot;World Bank&quot;, ref_country = list( list(name=&quot;Afghanistan&quot;, code=&quot;AFG&quot;), list(name=&quot;Burkina Faso&quot;, code=&quot;BFA&quot;), list(name=&quot;Chad&quot;, code=&quot;TCD&quot;), list(name=&quot;Congo, Dem. Rep.&quot;, code=&quot;COD&quot;), list(name=&quot;Ethiopia&quot;, code=&quot;ETH&quot;), list(name=&quot;Guatemala&quot;, code=&quot;GTM&quot;), list(name=&quot;Haiti&quot;, code=&quot;HTI&quot;), list(name=&quot;Kenya&quot;, code=&quot;KEN&quot;), list(name=&quot;Malawi&quot;, code=&quot;MWI&quot;), list(name=&quot;Mali&quot;, code=&quot;MLI&quot;), list(name=&quot;Mauritania&quot;, code=&quot;MRT&quot;), list(name=&quot;Mozambique&quot;, code=&quot;MOZ&quot;), list(name=&quot;Niger&quot;, code=&quot;NER&quot;), list(name=&quot;Nigeria&quot;, code=&quot;NGA&quot;), list(name=&quot;Somalia&quot;, code=&quot;SOM&quot;), list(name=&quot;South Sudan&quot;, code=&quot;SSD&quot;), list(name=&quot;Sudan&quot;, code=&quot;SDN&quot;), list(name=&quot;Uganda&quot;, code=&quot;UGA&quot;), list(name=&quot;Yemen, Rep.&quot;, code=&quot;YEM&quot;), list(name=&quot;Zambia&quot;, code=&quot;ZMB&quot;), list(name=&quot;Zimbabwe&quot;, code=&quot;ZWE&quot;) ), abstract = &quot;Globally, more than 130 million people are estimated to be in food crisis. These humanitarian disasters are associated with severe impacts on livelihoods that can reverse years of development gains. The existing outlooks of crisis-affected populations rely on expert assessment of evidence and are limited in their temporal frequency and ability to look beyond several months. This paper presents a statistical forecasting approach to predict the outbreak of food crises with sufficient lead time for preventive action. Different use cases are explored related to possible alternative targeting policies and the levels at which finance is typically unlocked. The results indicate that, particularly at longer forecasting horizons, the statistical predictions compare favorably to expert-based outlooks. The paper concludes that statistical models demonstrate good ability to detect future outbreaks of food crises and that using statistical forecasting approaches may help increase lead time for action.&quot;, languages = list(list(name=&quot;English&quot;, code=&quot;EN&quot;)), reproducibility = list( statement = &quot;The code and data needed to reproduce the analysis are openly available.&quot;, links = list( list(uri=&quot;http://fcv.ihsn.org/catalog/study/RR_WLD_2020_PFC_v01&quot;, description= &quot;Source code&quot;), list(uri=&quot;http://fcv.ihsn.org/catalog/study/WLD_2020_PFC_v01_M&quot;, description= &quot;Dataset&quot;) ) ) ) ) # Publish the metadata in NADA document_add(idno = id, metadata = example_1, repositoryid = &quot;central&quot;, published = 1, thumbnail = thumb_file, overwrite = &quot;yes&quot;) # Provide a link to the document (as an external resource) external_resources_add( title = &quot;Predicting Food Crises&quot;, idno = id, dctype = &quot;doc/anl&quot;, file_path = &quot;http://hdl.handle.net/10986/34510&quot;, overwrite = &quot;yes&quot; ) The document will now be available in the NADA catalog. 4.3.1.4 Using Python The Python equivalent of the R script presented above is as follows. # @@@ Script not tested yet import pynada as nada import inspect dataset_id = &quot;WB_WPS9412&quot; repository_id = &quot;central&quot; published = 0 overwrite = &quot;yes&quot; document_description = { &#39;title_statement&#39;: { &#39;idno&#39;: dataset_id, &#39;title&#39;: &quot;Predicting Food Crises&quot; }, &#39;date_published&#39;: &quot;2020-09&quot;, &#39;authors&#39;: [ { &#39;last_name&#39;: &quot;Andrée&quot;, &#39;first_name&#39;: &quot;Bo Pieter Johannes&quot;, &#39;affiliation&#39;: &quot;World Bank&quot; }, { &#39;last_name&#39;: &quot;Chamorro&quot;, &#39;first_name&#39;: &quot;Andres&quot;, &#39;affiliation&#39;: &quot;World Bank&quot; }, { &#39;last_name&#39;: &quot;Kraay&quot;, &#39;first_name&#39;: &quot;Aart&quot;, &#39;affiliation&#39;: &quot;World Bank&quot; }, { &#39;last_name&#39;: &quot;Spencer&quot;, &#39;first_name&#39;: &quot;Phoebe&quot;, &#39;affiliation&#39;: &quot;World Bank&quot; }, { &#39;last_name&#39;: &quot;Wang&quot;, &#39;first_name&#39;: &quot;Dieter&quot;, &#39;affiliation&#39;: &quot;World Bank&quot; } ], &#39;journal&#39;: &quot;World Bank Policy Research Working Paper No. 9412&quot;, &#39;publisher&#39;: &quot;World Bank&quot;, &#39;ref_country&#39;: [ {&#39;name&#39;=&quot;Afghanistan&quot;, &#39;code&#39;=&quot;AFG&quot;}, {&#39;name&#39;=&quot;Burkina Faso&quot;, &#39;code&#39;=&quot;BFA&quot;}, {&#39;name&#39;=&quot;Chad&quot;, &#39;code&#39;=&quot;TCD&quot;}, {&#39;name&#39;=&quot;Congo, Dem. Rep.&quot;, &#39;code&#39;=&quot;COD&quot;}, {&#39;name&#39;=&quot;Ethiopia&quot;, &#39;code&#39;=&quot;ETH&quot;}, {&#39;name&#39;=&quot;Guatemala&quot;, &#39;code&#39;=&quot;GTM&quot;}, {&#39;name&#39;=&quot;Haiti&quot;, &#39;code&#39;=&quot;HTI&quot;}, {&#39;name&#39;=&quot;Kenya&quot;, &#39;code&#39;=&quot;KEN&quot;}, {&#39;name&#39;=&quot;Malawi&quot;, &#39;code&#39;=&quot;MWI&quot;}, {&#39;name&#39;=&quot;Mali&quot;, &#39;code&#39;=&quot;MLI&quot;}, {&#39;name&#39;=&quot;Mauritania&quot;, &#39;code&#39;=&quot;MRT&quot;}, {&#39;name&#39;=&quot;Mozambique&quot;, &#39;code&#39;=&quot;MOZ&quot;}, {&#39;name&#39;=&quot;Niger&quot;, &#39;code&#39;=&quot;NER&quot;}, {&#39;name&#39;=&quot;Nigeria&quot;, &#39;code&#39;=&quot;NGA&quot;}, {&#39;name&#39;=&quot;Somalia&quot;, &#39;code&#39;=&quot;SOM&quot;}, {&#39;name&#39;=&quot;South Sudan&quot;, &#39;code&#39;=&quot;SSD&quot;}, {&#39;name&#39;=&quot;Sudan&quot;, &#39;code&#39;=&quot;SDN&quot;}, {&#39;name&#39;=&quot;Uganda&quot;, &#39;code&#39;=&quot;UGA&quot;}, {&#39;name&#39;=&quot;Yemen, Rep.&quot;, &#39;code&#39;=&quot;YEM&quot;}, {&#39;name&#39;=&quot;Zambia&quot;, &#39;code&#39;=&quot;ZMB&quot;}, {&#39;name&#39;=&quot;Zimbabwe&quot;, &#39;code&#39;=&quot;ZWE&quot;} ], &#39;abstract&#39;: inspect.cleandoc(&quot;&quot;&quot;\\ Globally, more than 130 million people are estimated to be in food crisis. These humanitarian disasters are associated with severe impacts on livelihoods that can reverse years of development gains. The existing outlooks of crisis-affected populations rely on expert assessment of evidence and are limited in their temporal frequency and ability to look beyond several months. This paper presents a statistical forecasting approach to predict the outbreak of food crises with sufficient lead time for preventive action. Different use cases are explored related to possible alternative targeting policies and the levels at which finance is typically unlocked. The results indicate that, particularly at longer forecasting horizons, the statistical predictions compare favorably to expert-based outlooks. The paper concludes that statistical models demonstrate good ability to detect future outbreaks of food crises and that using statistical forecasting approaches may help increase lead time for action. &quot;&quot;&quot;), &#39;languages&#39;: [ {&#39;name&#39;: &quot;English&quot;, &#39;code&#39;: &quot;EN&quot;} ], &#39;reproducibility&#39;: { &#39;statement&#39;: &quot;The code and data needed to reproduce the analysis are openly available.&quot;, &#39;links&#39;: [ { &#39;uri&#39;: &quot;http://fcv.ihsn.org/catalog/study/RR_WLD_2020_PFC_v01&quot;, &#39;description&#39;: &quot;Source code&quot; }, { &#39;uri&#39;: &quot;http://fcv.ihsn.org/catalog/study/WLD_2020_PFC_v01_M&quot;, &#39;description&#39;: &quot;Dataset&quot; } ] }, files = [ {&#39;file_uri&#39;: &quot;http://hdl.handle.net/10986/34510&quot;}, ] nada.create_document_dataset( dataset_id = dataset_id, repository_id = repository_id, published = published, overwrite = overwrite, document_description = document_description, resources = resources, files = files ) # If you have pdf file, generate thumbnail from it. pdf_file = &quot;WB_PRWP_9412_Food_Crises.pdf&quot; thumbnail_path = nada.pdf_to_thumbnail(pdf_file, page_no=1) nada.upload_thumbnail(dataset_id, thumbnail_path) 4.3.2 Example 2: Book This example documents the World Bank World Development Report (WDR) 2019 titled “The Changing Nature of Work”. The book is available in multiple languages. It also has related resources like presentations and an Overview available in multiple languages, which we also document. 4.3.2.1 Description 4.3.2.2 Using R library(nadar) # ---------------------------------------------------------------------------------- my_keys &lt;- read.csv(&quot;C:/confidential/my_API_keys.csv&quot;, header=F, stringsAsFactors=F) set_api_key(&quot;my_keys[1,1&quot;) set_api_url(&quot;https://.../index.php/api/&quot;) set_api_verbose(FALSE) # ---------------------------------------------------------------------------------- setwd(&quot;C:/my_folder&quot;) doc_file &lt;- &quot;2019-WDR-Report.pdf&quot; id &lt;- &quot;WB_WDR2019&quot; meta_id &lt;- &quot;WBDG_WB_WDR2019&quot; thumb_file &lt;- gsub(&quot;.pdf&quot;, &quot;.jpg&quot;, doc_file) capture_pdf_cover(doc_file) # Capture cover page for use as thumbnail # Generate the metadata example_2 = list( metadata_information = list( title = &quot;The Changing Nature of Work&quot;, idno = meta_id, producers = list( list(name = &quot;Development Data Group, Curation Team&quot;, abbr = &quot;DECDG&quot;, affiliation = &quot;World Bank&quot;) ), production_date = &quot;2020-12-27&quot; ), document_description = list( title_statement = list( idno = id, title = &quot;The Changing Nature of Work&quot;, sub_title = &quot;World Development Report 2019&quot;, abbreviated_title = &quot;WDR 2019&quot; ), authors = list( list(first_name = &quot;Rong&quot;, last_name = &quot;Chen&quot;, affiliation = &quot;World Bank&quot;), list(first_name = &quot;Davida&quot;, last_name = &quot;Connon&quot;, affiliation = &quot;World Bank&quot;), list(first_name = &quot;Ana P.&quot;, last_name = &quot;Cusolito&quot;, affiliation = &quot;World Bank&quot;), list(first_name = &quot;Ugo&quot;, last_name = &quot;Gentilini&quot;, affiliation = &quot;World Bank&quot;), list(first_name = &quot;Asif&quot;, last_name = &quot;Islam&quot;, affiliation = &quot;World Bank&quot;), list(first_name = &quot;Shwetlena&quot;, last_name = &quot;Sabarwal&quot;, affiliation = &quot;World Bank&quot;), list(first_name = &quot;Indhira&quot;, last_name = &quot;Santos&quot;, affiliation = &quot;World Bank&quot;), list(first_name = &quot;Yucheng&quot;, last_name = &quot;Zheng&quot;, affiliation = &quot;World Bank&quot;) ), date_created = &quot;2019&quot;, date_published = &quot;2019&quot;, identifers = list( list(type = &quot;ISSN&quot;, value = &quot;0163-5085&quot;), list(type = &quot;ISBN softcover&quot;, value = &quot;978-1-4648-1328-3&quot;), list(type = &quot;ISBN hardcover&quot;, value = &quot;978-1-4648-1342-9&quot;), list(type = &quot;e-ISBN&quot;, value = &quot;978-1-4648-1356-6&quot;), list(type = &quot;DOI softcover&quot;, value = &quot;10.1596/978-1-4648-1328-3&quot;), list(type = &quot;DOI hardcover&quot;, value = &quot;10.1596/978-1-4648-1342-9&quot;) ), type = &quot;book&quot;, description = &quot;The World Development Report (WDR) 2019: The Changing Nature of Work studies how the nature of work is changing as a result of advances in technology today. Fears that robots will take away jobs from people have dominated the discussion over the future of work, but the World Development Report 2019 finds that on balance this appears to be unfounded. Work is constantly reshaped by technological progress. Firms adopt new ways of production, markets expand, and societies evolve. Overall, technology brings opportunity, paving the way to create new jobs, increase productivity, and deliver effective public services. Firms can grow rapidly thanks to digital transformation, expanding their boundaries and reshaping traditional production patterns. The rise of the digital platform firm means that technological effects reach more people faster than ever before. Technology is changing the skills that employers seek. Workers need to be better at complex problem-solving, teamwork and adaptability. Digital technology is also changing how people work and the terms on which they work. Even in advanced economies, short-term work, often found through online platforms, is posing similar challenges to those faced by the world’s informal workers. The Report analyzes these changes and considers how governments can best respond. Investing in human capital must be a priority for governments in order for workers to build the skills in demand in the labor market. In addition, governments need to enhance social protection and extend it to all people in society, irrespective of the terms on which they work. To fund these investments in human capital and social protection, the Report offers some suggestions as to how governments can mobilize additional revenues by increasing the tax base.&quot;, toc_structured = list( list(id = &quot;00&quot;, name = &quot;Overview&quot;), list(id = &quot;01&quot;, parent_id = &quot;00&quot;, name = &quot;Changes in the nature of work&quot;), list(id = &quot;02&quot;, parent_id = &quot;00&quot;, name = &quot;What can governments do?&quot;), list(id = &quot;03&quot;, parent_id = &quot;00&quot;, name = &quot;Organization of this study&quot;), list(id = &quot;10&quot;, name = &quot;1. The changing nature of work&quot;), list(id = &quot;11&quot;, parent_id = &quot;10&quot;, name = &quot;Technology generates jobs&quot;), list(id = &quot;12&quot;, parent_id = &quot;10&quot;, name = &quot;How work is changing&quot;), list(id = &quot;13&quot;, parent_id = &quot;10&quot;, name = &quot;A simple model of changing work&quot;), list(id = &quot;20&quot;, name = &quot;2. The changing nature of firms&quot;), list(id = &quot;21&quot;, parent_id = &quot;20&quot;, name = &quot;Superstar firms&quot;), list(id = &quot;22&quot;, parent_id = &quot;20&quot;, name = &quot;Competitive markets&quot;), list(id = &quot;23&quot;, parent_id = &quot;20&quot;, name = &quot;Tax avoidance&quot;), list(id = &quot;30&quot;, name = &quot;3. Building human capital&quot;), list(id = &quot;31&quot;, parent_id = &quot;30&quot;, name = &quot;Why governments should get involved&quot;), list(id = &quot;32&quot;, parent_id = &quot;30&quot;, name = &quot;Why measurement helps&quot;), list(id = &quot;33&quot;, parent_id = &quot;30&quot;, name = &quot;The human capital project&quot;), list(id = &quot;40&quot;, name = &quot;4. Lifelong learning&quot;), list(id = &quot;41&quot;, parent_id = &quot;40&quot;, name = &quot;Learning in early childhood&quot;), list(id = &quot;42&quot;, parent_id = &quot;40&quot;, name = &quot;Tertiary education&quot;), list(id = &quot;43&quot;, parent_id = &quot;40&quot;, name = &quot;Adult learning outside the workplace&quot;), list(id = &quot;50&quot;, name = &quot;5. Returns to work&quot;), list(id = &quot;51&quot;, parent_id = &quot;50&quot;, name = &quot;Informality&quot;), list(id = &quot;52&quot;, parent_id = &quot;50&quot;, name = &quot;Working women&quot;), list(id = &quot;53&quot;, parent_id = &quot;50&quot;, name = &quot;Working in agriculture&quot;), list(id = &quot;60&quot;, name = &quot;6. Strengthening social protection&quot;), list(id = &quot;61&quot;, parent_id = &quot;60&quot;, name = &quot;Social assistance&quot;), list(id = &quot;62&quot;, parent_id = &quot;60&quot;, name = &quot;Social insurance&quot;), list(id = &quot;63&quot;, parent_id = &quot;60&quot;, name = &quot;Labor regulation&quot;), list(id = &quot;70&quot;, name = &quot;7. Ideas for social inclusion&quot;), list(id = &quot;71&quot;, parent_id = &quot;70&quot;, name = &quot;A global &#39;New Deal&#39;&quot;), list(id = &quot;72&quot;, parent_id = &quot;70&quot;, name = &quot;Creating a new social contract&quot;), list(id = &quot;73&quot;, parent_id = &quot;70&quot;, name = &quot;Financing social inclusion&quot;) ), abstract = &quot;Fears that robots will take away jobs from people have dominated the discussion over the future of work, but the World Development Report 2019 finds that on balance this appears to be unfounded. Instead, technology is bringing opportunity, paving the way to create new jobs, increase productivity, and improve public service delivery. The nature of work is changing. Firms can grow rapidly thanks to digital transformation, which blurs their boundaries and challenges traditional production patterns. The rise of the digital platform firm means that technological effects reach more people faster than ever before. Technology is changing the skills that employers seek. Workers need to be good at complex problem-solving, teamwork and adaptability. Technology is changing how people work and the terms on which they work. Even in advanced economies, short-term work, often found through online platforms, is posing similar challenges to those faced by the world’s informal workers. What can governments do? The 2019 WDR suggests three solutions: 1 - Invest in human capital especially in disadvantaged groups and early childhood education to develop the new skills that are increasingly in demand in the labor market, such as high-order cognitive and sociobehavioral skills 2 - Enhance social protection to ensure universal coverage and protection that does not fully depend on having formal wage employment 3 - Increase revenue mobilization by upgrading taxation systems, where needed, to provide fiscal space to finance human capital development and social protection.&quot;, ref_country = list( list(name = &quot;World&quot;, code = &quot;WLD&quot;) ), spatial_coverage = &quot;Global&quot;, publication_frequency = &quot;Annual&quot;, languages = list( list(name = &quot;English&quot;, code = &quot;EN&quot;), list(name = &quot;Chinese&quot;, code = &quot;ZH&quot;), list(name = &quot;Arabic&quot;, code = &quot;AR&quot;), list(name = &quot;French&quot;, code = &quot;FR&quot;), list(name = &quot;Spanish&quot;, code = &quot;ES&quot;), list(name = &quot;Italian&quot;, code = &quot;IT&quot;), list(name = &quot;Bulgarian&quot;, code = &quot;BG&quot;), list(name = &quot;Russian&quot;, code = &quot;RU&quot;), list(name = &quot;Serbian&quot;, code = &quot;SR&quot;) ), license = list( list(name = &quot;Creative Commons Attribution 3.0 IGO license (CC BY 3.0 IGO)&quot;, uri = &quot;http://creativecommons.org/licenses/by/3.0/igo&quot;) ), bibliographic_citation = list( list(citation = &quot; World Bank. 2019. World Development Report 2019: The Changing Nature of Work. Washington, DC: World Bank. doi:10.1596/978-1-4648-1328-3. License: Creative Commons Attribution CC BY 3.0 IGO&quot;) ), series = &quot;World Development Report&quot;, contributors = list( list(first_name = &quot;Simeon&quot;, last_name = &quot;Djankov&quot;, affiliation = &quot;World Bank&quot;, role = &quot;WDR Director&quot;), list(first_name = &quot;Federica&quot;, last_name = &quot;Saliola&quot;, affiliation = &quot;World Bank&quot;, role = &quot;WDR Director&quot;), list(first_name = &quot;David&quot;, last_name = &quot;Sharrock&quot;, affiliation = &quot;World Bank&quot;, role = &quot;Communications&quot;), list(first_name = &quot;Consuelo Jurado&quot;, last_name = &quot;Tan&quot;, affiliation = &quot;World Bank&quot;, role = &quot;Program Assistant&quot;) ), publisher = &quot;World Bank Publications&quot;, publisher_address = &quot;The World Bank Group, 1818 H Street NW, Washington, DC 20433, USA&quot;, contacts = list( list(name = &quot;World Bank Publications&quot;, email = &quot;pubrights@worldbank.org&quot;) ), topics = list( list(name = &quot;Labour And Employment - Employee Training&quot;, vocabulary = &quot;CESSDA Topic Classification&quot;, uri = &quot;https://vocabularies.cessda.eu/vocabulary/TopicClassification&quot;), list(name = &quot;Labour And Employment - Labour And Employment Policy&quot;, vocabulary = &quot;CESSDA Topic Classification&quot;, uri = &quot;https://vocabularies.cessda.eu/vocabulary/TopicClassification&quot;), list(name = &quot;Labour And Employment - Working Conditions&quot;, vocabulary = &quot;CESSDA Topic Classification&quot;, uri = &quot;https://vocabularies.cessda.eu/vocabulary/TopicClassification&quot;), list(name = &quot;Social Stratification And Groupings - Social And Occupational Mobility&quot;, vocabulary = &quot;CESSDA Topic Classification&quot;, uri = &quot;https://vocabularies.cessda.eu/vocabulary/TopicClassification&quot;) ), disciplines = list( list(name = &quot;Economics&quot;) ) ) ) # Publish the metadata in NADA document_add(idno = id, metadata = example_2, repositoryid = &quot;central&quot;, published = 1, thumbnail = thumb_file, overwrite = &quot;yes&quot;) # Provide links to the document and related resources external_resources_add( title = &quot;The Changing Nature of Work&quot;, description = &quot;Links to the PDF report in all available languages&quot;, idno = id, dctype = &quot;doc/anl&quot;, language = &quot;English, Chinese, Arabic, French, Spanish, Italian, Bulgarian, Russian, Serbian&quot;, file_path = &quot;https://www.worldbank.org/en/publication/wdr2019&quot;, overwrite = &quot;yes&quot; ) external_resources_add( title = &quot;WORLD DEVELOPMENT REPORT 2019 - THE CHANGING NATURE OF WORK - Presentation (slide deck), English&quot;, idno = id, dctype = &quot;doc/oth&quot;, language = &quot;English&quot;, file_path = &quot;http://pubdocs.worldbank.org/en/808261547222082195/WDR19-English-Presentation.pdf&quot;, overwrite = &quot;yes&quot; ) external_resources_add( title = &quot;INFORME SOBRE EL DESARROLLO MUNDIAL 2019 - LA NATURALEZA CAMBIANTE DEL TRABAJO - Presentation (slide deck), Spanish&quot;, idno = id, dctype = &quot;doc/oth&quot;, language = &quot;Spanish&quot;, file_path = &quot;http://pubdocs.worldbank.org/en/942911547222108647/WDR19-Spanish-Presentation.pdf&quot;, overwrite = &quot;yes&quot; ) external_resources_add( title = &quot;RAPPORT SUR LE DÉVELOPPEMENT DANS LE MONDE 2019 - LE TRAVAIL EN MUTATION - Presentation (slide deck), French&quot;, idno = id, dctype = &quot;doc/oth&quot;, language = &quot;French&quot;, file_path = &quot;http://pubdocs.worldbank.org/en/132831547222088914/WDR19-French-Presentation.pdf&quot;, overwrite = &quot;yes&quot; ) external_resources_add( title = &quot;RAPPORTO SULLO SVILUPPO MONDIALE 2019 - CAMBIAMENTI NEL MONDO DEL LAVORO - Presentation (slide deck), Italian&quot;, idno = id, dctype = &quot;doc/oth&quot;, language = &quot;Italian&quot;, file_path = &quot;http://pubdocs.worldbank.org/en/842271547222095493/WDR19-Italian-Presentation.pdf&quot;, overwrite = &quot;yes&quot; ) external_resources_add( title = &quot;ДОКЛАД О МИРОВОМ РАЗВИТИИ 2019 - ИЗМЕНЕНИЕ ХАРАКТЕРА ТРУДА - Presentation (slide deck), Russian&quot;, idno = id, dctype = &quot;doc/oth&quot;, language = &quot;Russian&quot;, file_path = &quot;http://pubdocs.worldbank.org/en/679061547222101914/WDR19-Russian-Presentation.pdf&quot;, overwrite = &quot;yes&quot; ) external_resources_add( title = &quot;Jobs of the future require more investment in people - Press Release (October 11, 2018)&quot;, idno = id, dctype = &quot;doc/oth&quot;, dcdate = &quot;2018-10-11&quot;, language = &quot;Russian&quot;, file_path = &quot;https://www.worldbank.org/en/news/press-release/2018/10/11/jobs-of-the-future-require-more-investment-in-people&quot;, overwrite = &quot;yes&quot; ) The document is now available in the NADA catalog. 4.3.2.3 Using Python The Python equivalent of the R script presented above is as follows. # @@@ Script not tested yet - must be edited to match the R script import pynada as nada import inspect dataset_id = &quot;DOC_001&quot; repository_id = &quot;central&quot; published = 0 overwrite = &quot;yes&quot; metadata_information = { &#39;title&#39;: &quot;The Changing Nature of Work&quot;, &#39;idno&#39;: &quot;META_DOC_001&quot;, &#39;producers&#39;: [ { &#39;name&#39;: &quot;Development Data Group, Curation Team&quot;, &#39;abbr&#39;: &quot;DECDG&quot;, &#39;affiliation&#39;: &quot;World Bank&quot; } ], &#39;production_date&#39;: &quot;2020-12-27&quot; } document_description = { &#39;title_statement&#39;: { &#39;idno&#39;: dataset_id, &#39;title&#39;: &quot;The Changing Nature of Work&quot;, &#39;sub-title&#39;: &quot;World Development Report 2019&quot;, &#39;abbreviated_title&#39;: &quot;WDR2019&quot; }, &#39;type&#39;: &quot;book&quot;, &#39;description&#39;: inspect.cleandoc(&quot;&quot;&quot;\\ The World Development Report (WDR) 2019: The Changing Nature of Work studies how the nature of work is changing as a result of advances in technology today. Fears that robots will take away jobs from people have dominated the discussion over the future of work, but the World Development Report 2019 finds that on balance this appears to be unfounded. Work is constantly reshaped by technological progress. Firms adopt new ways of production, markets expand, and societies evolve. Overall, technology brings opportunity, paving the way to create new jobs, increase productivity, and deliver effective public services. Firms can grow rapidly thanks to digital transformation, expanding their boundaries and reshaping traditional production patterns. The rise of the digital platform firm means that technological effects reach more people faster than ever before. Technology is changing the skills that employers seek. Workers need to be better at complex problem-solving, teamwork and adaptability. Digital technology is also changing how people work and the terms on which they work. Even in advanced economies, short-term work, often found through online platforms, is posing similar challenges to those faced by the world’s informal workers. The Report analyzes these changes and considers how governments can best respond. Investing in human capital must be a priority for governments in order for workers to build the skills in demand in the labor market. In addition, governments need to enhance social protection and extend it to all people in society, irrespective of the terms on which they work. To fund these investments in human capital and social protection, the Report offers some suggestions as to how governments can mobilize additional revenues by increasing the tax base. &quot;&quot;&quot;), &#39;toc_structured&#39;: [ {&#39;id&#39;: &quot;00&quot;, &#39;name&#39;: &quot;Overview&quot;}, {&#39;id&#39;: &quot;01&quot;, &#39;parent_id&#39;: &quot;00&quot;, &#39;name&#39;: &quot;Changes in the nature of work&quot;}, {&#39;id&#39;: &quot;02&quot;, &#39;parent_id&#39;: &quot;00&quot;, &#39;name&#39;: &quot;What can governments do?&quot;}, {&#39;id&#39;: &quot;03&quot;, &#39;parent_id&#39;: &quot;00&quot;, &#39;name&#39;: &quot;Organization of this study&quot;}, {&#39;id&#39;: &quot;10&quot;, &#39;name&#39;: &quot;1. The changing nature of work&quot;}, {&#39;id&#39;: &quot;11&quot;, &#39;parent_id&#39;: &quot;10&quot;, &#39;name&#39;: &quot;Technology generates jobs&quot;}, {&#39;id&#39;: &quot;12&quot;, &#39;parent_id&#39;: &quot;10&quot;, &#39;name&#39;: &quot;How work is changing&quot;}, {&#39;id&#39;: &quot;13&quot;, &#39;parent_id&#39;: &quot;10&quot;, &#39;name&#39;: &quot;A simple model of changing work&quot;}, {&#39;id&#39;: &quot;20&quot;, &#39;name&#39;: &quot;2. The changing nature of firms&quot;}, {&#39;id&#39;: &quot;21&quot;, &#39;parent_id&#39;: &quot;20&quot;, &#39;name&#39;: &quot;Superstar firms&quot;}, {&#39;id&#39;: &quot;22&quot;, &#39;parent_id&#39;: &quot;20&quot;, &#39;name&#39;: &quot;Competitive markets&quot;}, {&#39;id&#39;: &quot;23&quot;, &#39;parent_id&#39;: &quot;20&quot;, &#39;name&#39;: &quot;Tax avoidance&quot;}, {&#39;id&#39;: &quot;30&quot;, &#39;name&#39;: &quot;3. Building human capital&quot;}, {&#39;id&#39;: &quot;31&quot;, &#39;parent_id&#39;: &quot;30&quot;, &#39;name&#39;: &quot;Why governments should get involved&quot;}, {&#39;id&#39;: &quot;32&quot;, &#39;parent_id&#39;: &quot;30&quot;, &#39;name&#39;: &quot;Why measurement helps&quot;}, {&#39;id&#39;: &quot;33&quot;, &#39;parent_id&#39;: &quot;30&quot;, &#39;name&#39;: &quot;The human capital project&quot;}, {&#39;id&#39;: &quot;40&quot;, &#39;name&#39;: &quot;4. Lifelong learning&quot;}, {&#39;id&#39;: &quot;41&quot;, &#39;parent_id&#39;: &quot;40&quot;, &#39;name&#39;: &quot;Learning in early childhood&quot;}, {&#39;id&#39;: &quot;42&quot;, &#39;parent_id&#39;: &quot;40&quot;, &#39;name&#39;: &quot;Tertiary education&quot;}, {&#39;id&#39;: &quot;43&quot;, &#39;parent_id&#39;: &quot;40&quot;, &#39;name&#39;: &quot;Adult learning outside the workplace&quot;}, {&#39;id&#39;: &quot;50&quot;, &#39;name&#39;: &quot;5. Returns to work&quot;}, {&#39;id&#39;: &quot;51&quot;, &#39;parent_id&#39;: &quot;50&quot;, &#39;name&#39;: &quot;Informality&quot;}, {&#39;id&#39;: &quot;52&quot;, &#39;parent_id&#39;: &quot;50&quot;, &#39;name&#39;: &quot;Working women&quot;}, {&#39;id&#39;: &quot;53&quot;, &#39;parent_id&#39;: &quot;50&quot;, &#39;name&#39;: &quot;Working in agriculture&quot;}, {&#39;id&#39;: &quot;60&quot;, &#39;name&#39;: &quot;6. Strengthening social protection&quot;}, {&#39;id&#39;: &quot;61&quot;, &#39;parent_id&#39;: &quot;60&quot;, &#39;name&#39;: &quot;Social assistance&quot;}, {&#39;id&#39;: &quot;62&quot;, &#39;parent_id&#39;: &quot;60&quot;, &#39;name&#39;: &quot;Social insurance&quot;}, {&#39;id&#39;: &quot;63&quot;, &#39;parent_id&#39;: &quot;60&quot;, &#39;name&#39;: &quot;Labor regulation&quot;}, {&#39;id&#39;: &quot;70&quot;, &#39;name&#39;: &quot;7. Ideas for social inclusion&quot;}, {&#39;id&#39;: &quot;71&quot;, &#39;parent_id&#39;: &quot;70&quot;, &#39;name&#39;: &quot;A global &#39;New Deal&#39;&quot;}, {&#39;id&#39;: &quot;72&quot;, &#39;parent_id&#39;: &quot;70&quot;, &#39;name&#39;: &quot;Creating a new social contract&quot;}, {&#39;id&#39;: &quot;73&quot;, &#39;parent_id&#39;: &quot;70&quot;, &#39;name&#39;: &quot;Financing social inclusion&quot;} ], &#39;abstract&#39;: inspect.cleandoc(&quot;&quot;&quot;\\ Fears that robots will take away jobs from people have dominated the discussion over the future of work, but the World Development Report 2019 finds that on balance this appears to be unfounded. Instead, technology is bringing opportunity, paving the way to create new jobs, increase productivity, and improve public service delivery. The nature of work is changing. Firms can grow rapidly thanks to digital transformation, which blurs their boundaries and challenges traditional production patterns. The rise of the digital platform firm means that technological effects reach more people faster than ever before. Technology is changing the skills that employers seek. Workers need to be good at complex problem-solving, teamwork and adaptability. Technology is changing how people work and the terms on which they work. Even in advanced economies, short-term work, often found through online platforms, is posing similar challenges to those faced by the world’s informal workers. What can governments do? The 2019 WDR suggests three solutions: 1 - Invest in human capital especially in disadvantaged groups and early childhood education to develop the new skills that are increasingly in demand in the labor market, such as high-order cognitive and sociobehavioral skills 2 - Enhance social protection to ensure universal coverage and protection that does not fully depend on having formal wage employment 3 - Increase revenue mobilization by upgrading taxation systems, where needed, to provide fiscal space to finance human capital development and social protection. &quot;&quot;&quot;), &#39;ref_country&#39;: [ {&#39;name&#39;: &quot;World&quot;, &#39;code&#39;: &quot;WLD&quot;} ], &#39;spatial_coverage&#39;: &quot;Global&quot;, &#39;date_created&#39;: &quot;2019&quot;, &#39;date_published&#39;: &quot;2019&quot;, &#39;identifiers&#39;: [ {&#39;type&#39;: &quot;ISSN&quot;, &#39;value&#39;: &quot;0163-5085&quot;}, {&#39;type&#39;: &quot;ISBN softcover&quot;, &#39;value&#39;: &quot;978-1-4648-1328-3&quot;}, {&#39;type&#39;: &quot;ISBN hardcover&quot;, &#39;value&#39;: &quot;978-1-4648-1342-9&quot;}, {&#39;type&#39;: &quot;e-ISBN&quot;, &#39;value&#39;: &quot;978-1-4648-1356-6&quot;}, {&#39;type&#39;: &quot;DOI softcover&quot;, &#39;value&#39;: &quot;10.1596/978-1-4648-1328-3&quot;}, {&#39;type&#39;: &quot;DOI hardcover&quot;, &#39;value&#39;: &quot;10.1596/978-1-4648-1342-9&quot;} ], &#39;publication_frequency&#39;: &quot;Annual&quot;, &#39;languages&#39;: [ {&#39;name&#39;: &quot;English&quot;, &#39;code&#39;: &quot;EN&quot;}, {&#39;name&#39;: &quot;Chinese&quot;, &#39;code&#39;: &quot;ZH&quot;}, {&#39;name&#39;: &quot;Arabic&quot;, &#39;code&#39;: &quot;AR&quot;}, {&#39;name&#39;: &quot;French&quot;, &#39;code&#39;: &quot;FR&quot;}, {&#39;name&#39;: &quot;Spanish&quot;, &#39;code&#39;: &quot;ES&quot;}, {&#39;name&#39;: &quot;Italian&quot;, &#39;code&#39;: &quot;IT&quot;}, {&#39;name&#39;: &quot;Bulgarian&quot;, &#39;code&#39;: &quot;BG&quot;}, {&#39;name&#39;: &quot;Russian&quot;, &#39;code&#39;: &quot;RU&quot;}, {&#39;name&#39;: &quot;Serbian&quot;, &#39;code&#39;: &quot;SR&quot;} ], &#39;license&#39;: [ { &#39;name&#39;: &quot;Creative Commons Attribution 3.0 IGO license (CC BY 3.0 IGO)&quot;, &#39;uri&#39;: &quot;http://creativecommons.org/licenses/by/3.0/igo&quot; } ], &#39;authors&#39;: [ {&#39;first_name&#39;: &quot;Rong&quot;, &#39;last_name&#39;: &quot;Chen&quot;, &#39;affiliation&#39;: &quot;World Bank&quot;}, {&#39;first_name&#39;: &quot;Davida&quot;, &#39;last_name&#39;: &quot;Connon&quot;, &#39;affiliation&#39;: &quot;World Bank&quot;}, {&#39;first_name&#39;: &quot;Ana P.&quot;, &#39;last_name&#39;: &quot;Cusolito&quot;, &#39;affiliation&#39;: &quot;World Bank&quot;}, {&#39;first_name&#39;: &quot;Ugo&quot;, &#39;last_name&#39;: &quot;Gentilini&quot;, &#39;affiliation&#39;: &quot;World Bank&quot;}, {&#39;first_name&#39;: &quot;Asif&quot;, &#39;last_name&#39;: &quot;Islam&quot;, &#39;affiliation&#39;: &quot;World Bank&quot;}, {&#39;first_name&#39;: &quot;Shwetlena&quot;, &#39;last_name&#39;: &quot;Sabarwal&quot;, &#39;affiliation&#39;: &quot;World Bank&quot;}, {&#39;first_name&#39;: &quot;Indhira&quot;, &#39;last_name&#39;: &quot;Santos&quot;, &#39;affiliation&#39;: &quot;World Bank&quot;}, {&#39;first_name&#39;: &quot;Yucheng&quot;, &#39;last_name&#39;: &quot;Zheng&quot;, &#39;affiliation&#39;: &quot;World Bank&quot;} ], &#39;contributors&#39;: [ {&#39;first_name&#39;: &quot;Simeon&quot;, &#39;last_name&#39;: &quot;Djankov&quot;, &#39;affiliation&#39;: &quot;World Bank&quot;, &#39;role&#39;: &quot;WDR Director&quot;}, {&#39;first_name&#39;: &quot;Federica&quot;, &#39;last_name&#39;: &quot;Saliola&quot;, &#39;affiliation&#39;: &quot;World Bank&quot;, &#39;role&#39;: &quot;WDR Director&quot;}, {&#39;first_name&#39;: &quot;David&quot;, &#39;last_name&#39;: &quot;Sharrock&quot;, &#39;affiliation&#39;: &quot;World Bank&quot;, &#39;role&#39;: &quot;Communications&quot;}, {&#39;first_name&#39;: &quot;Consuelo Jurado&quot;, &#39;last_name&#39;: &quot;Tan&quot;, &#39;affiliation&#39;: &quot;World Bank&quot;, &#39;role&#39;: &quot;Program Assistant&quot;} ], &#39;topics&#39;: [ { &#39;name&#39;: &quot;LabourAndEmployment.EmployeeTraining&quot;, &#39;vocabulary&#39;: &quot;CESSDA Topic Classification&quot;, &#39;uri&#39;: &quot;https://vocabularies.cessda.eu/vocabulary/TopicClassification&quot; }, { &#39;name&#39;: &quot;LabourAndEmployment.LabourAndEmploymentPolicy&quot;, &#39;vocabulary&#39;: &quot;CESSDA Topic Classification&quot;, &#39;uri&#39;: &quot;https://vocabularies.cessda.eu/vocabulary/TopicClassification&quot; }, { &#39;name&#39;: &quot;LabourAndEmployment.WorkingConditions&quot;, &#39;vocabulary&#39;: &quot;CESSDA Topic Classification&quot;, &#39;uri&#39;: &quot;https://vocabularies.cessda.eu/vocabulary/TopicClassification&quot; }, { &#39;name&#39;: &quot;SocialStratificationAndGroupings.SocialAndOccupationalMobility&quot;, &#39;vocabulary&#39;: &quot;CESSDA Topic Classification&quot;, &#39;uri&#39;: &quot;https://vocabularies.cessda.eu/vocabulary/TopicClassification&quot; } ], &#39;disciplines&#39;: [ {&#39;name&#39;: &quot;Economics&quot;} ] } 4.3.3 Example 3: Importing from a list of documents In this example we take a different use case. We assume that a list of publications is available as a CSV file. Each row in this file describes one publication, with the following columns containing the metadata (with no missing information for the required elements): URL_pdf (required): a link to the publication (direct link to a PDF file) ID (required): a unique identifier for each document, with no missing value) title (required): the title of the document country (optional): the country (or countries) that the document is about, separated by a “;” authors (optional): separated by a “;” and with the last name and first name separated by a “,” (last name always provided before first name) abstract (optional): abstract type (optional): type of document date_published (optional): date the document was published; optional by highly recommended The R (or Python) script reads the CSV file. The listed documents are downloaded (if not previously done), and the cover page of each document is captured and saved as a JPG file to be used as a thumbnail in the catalog. Metadata are formatted to comply with the document schema, then published. The documents are not uploaded in the catalog, but links to the originating catalog are provided. There is no limit to the number of documents that could be included in such a batch process. If a repository of documents is available with metadata available in a structured format (in a CSV file as in the example, from an API, or from another source), the migration of the documents to a NADA catalog can be fully automated using a script similar to the one shown in the example. Note that such a script could also include some processes of metadata augmentation (e.g., submitting each document to a topic model to extract and store the topic composition of the document). 4.3.3.1 Using R library(nadar) library(stringr) library(rlist) library(countrycode) # Will be used to automatically add ISO country codes # ---------------------------------------------------------------------------------- my_keys &lt;- read.csv(&quot;C:/confidential/my_API_keys.csv&quot;, header=F, stringsAsFactors=F) set_api_key(&quot;my_keys[1,1&quot;) set_api_url(&quot;https://.../index.php/api/&quot;) set_api_verbose(FALSE) # ---------------------------------------------------------------------------------- # Read the CSV file containing the information (metadata) on the 5 documents setwd(&quot;C:/my_folder&quot;) # Read the file containing information on the 5 documents doc_list &lt;- read.csv(&quot;my_list_of_documents.csv&quot;, stringsAsFactors = FALSE) # Generate the metadata for each document in the list, and publish in NADA for(i in 1:nrow(doc_list)) { # Download the file if not already done url &lt;- doc_list$URL_pdf[i] pdf_file &lt;- basename(doc_list$URL_pdf[i]) if(!file.exists(pdf_file)) download.file(url, pdf_file, mode = &quot;wb&quot;) # Map the available metadata elements to the schema id &lt;- doc_list$ID[i] title &lt;- doc_list$title[i] date &lt;- as.character(doc_list$date_published[i]) abstract &lt;- doc_list$abstract[i] type &lt;- doc_list$type[i] # Split the authors&#39; list an generate a list compliant with the schema list_authors &lt;- doc_list$authors[i] list_authors &lt;- str_split(list_authors, &quot;;&quot;) authors = list() for(n in 1:length(list_authors[[1]])) { author = trimws(list_authors[[1]][n]) if(&quot;,&quot; %in% author) { # If we have last name and first name last_first = str_split(author, &quot;,&quot;) a_l = list(last_name = trimws(last_first[[1]][1]), first_name = trimws(last_first[[1]][2])) } else { # E.g., when author is an organization a_l = list(last_name = author, first_name = &quot;&quot;) } authors = list.append(authors, a_l) } # Split the country list an generate a list compliant with the schema list_countries &lt;- doc_list$country[i] list_countries &lt;- str_split(list_countries, &quot;;&quot;) countries = list() for(n in 1:length(list_countries[[1]])) { country = trimws(list_countries[[1]][n]) if(country == &quot;World&quot;){ c_code = &quot;WLD&quot; } else { c_code = countrycode(country, origin = &#39;country.name&#39;, destination = &#39;iso3c&#39;) } if(is.na(c_code)) c_code = &quot;&quot; c_l = list(name = country, code = c_code) countries = list.append(countries, c_l) } # Capture the cover page as JPG, and generate the full document metadata thumb &lt;- gsub(&quot;.pdf&quot;, &quot;.jpg&quot;, pdf_file) capture_pdf_cover(pdf_file) # To be used as thumbnail this_document &lt;- list( document_description = list( title_statement = list(idno = id, title = title), date_published = date, authors = authors, abstract = abstract, ref_country = countries ) ) # Publish the metadata in NADA document_add(idno = id, published = 1, overwrite = &quot;yes&quot;, metadata = this_document, thumbnail = thumb) # Add a link to the document external_resources_add( title = as.character(this_document$document_description$title_statement[1]), idno = id, dctype = &quot;doc/anl&quot;, file_path = url, overwrite = &quot;yes&quot; ) } 4.3.3.2 Using Python # @@@ Script not tested yet import pynada as nada import pandas as pd import urllib.request import os.path # Set API key and catalog URL nada.set_api_key(&quot;my_api_key&quot;) nada.set_api_url(&quot;http://my_catalog.ihsn.org/index.php/api/&quot;) # Read the file containing information on the 5 documents doc_list &lt;- pd.read_csv(&quot;my_list_of_documents.csv&quot;) # Generate the metadata and publish in NADA catalog for index, doc in doc_list.iterrows(): # Download the file if not already done url = doc[&#39;URL&#39;] pdf_file = os.path.basename(url) if(!os.path.exists(pdf_file)) { urllib.request.urlretrieve(url, pdf_file) } # Map/generate metadata fields id = doc[&#39;id&#39;] title = f&quot;{doc[&#39;title&#39;]} - Census {doc[&#39;censusyear&#39;]}&quot; author = doc[&#39;authors&#39;] contrib = doc[&#39;contributor&#39;] date = doc[&#39;date_published&#39;] avail = doc[&#39;date_available&#39;] abstract = doc[&#39;description&#39;] publisher = doc[&#39;publisher&#39;] spatial = doc[&#39;state&#39;] language = [{&#39;name&#39;: &quot;English&quot;, &#39;code&#39;: &quot;ENG&quot;}] # Document the file, and publish in NADA idno = id repository_id = &quot;central&quot; published = 1 overwrite = &quot;yes&quot; document_description = { &#39;title_statement&#39;: { &#39;idno&#39;: id, &#39;title&#39;: title }, &#39;date_published&#39;: date, &#39;date_available&#39;: date, &#39;authors&#39;: [ {&#39;last_name&#39;: author} ], &#39;contributors&#39;: [ {&#39;last_name&#39;: contrib} ], &#39;publisher&#39;: publisher, &#39;abstract&#39;: abstract, &#39;description&#39;: desc, &#39;ref_country&#39;: [ {&#39;name&#39;: &quot;India&quot;, &#39;code&#39;: &quot;IND&quot;} ], &#39;languages&#39;: language, &#39;pages&#39;: pages, &#39;rights&#39;: &quot;Office of the Registrar General, India (ORGI)&quot; } tags = tags files = [ {&#39;file_uri&#39;: pdf_file, &#39;format&#39;: &quot;Adobe Acrobat PDF&quot;}, ] nada.create_document_dataset( dataset_id = idno, repository_id = repository_id, published = published, overwrite = overwrite, document_description = document_description, tags = tags, files = files ) # generate thumbnail from the pdf file. thumbnail_path = nada.pdf_to_thumbnail(pdf_file, page_no=1) nada.upload_thumbnail(idno, thumbnail_path) "],["chapter05.html", "Chapter 5 Microdata 5.1 Definition of microdata 5.2 The Data Documentation Initiative (DDI) metadata standard 5.3 Some practical considerations 5.4 Schema description: DDI-Codebook 2.5 5.5 Generating and publishing DDI metadata", " Chapter 5 Microdata 5.1 Definition of microdata When surveys or censuses are conducted, or when administrative data are recorded, information is collected on each unit of observation. The unit of observation can be a person, a household, a firm, an agricultural holding, a facility, or other. Microdata are the data files resulting from these data collection activities, which contain the unit-level information (as opposed to aggregated data in the form of counts, means, or other). Information on each unit is stored in variables, which can be of different types (e.g. numeric or alphanumeric, discrete or continuous). These variables may contain data reported by the respondent (e.g., the marital status of a person), obtained by observation or measurement (e.g., the GPS location of a dwelling), or generated by calculation, recoding or derivation (e.g., the sample weight in a survey). For efficiency reasons, variables are often stored in numeric format (i.e. coded values), even when they contain qualitative information (coded values). For example, the sex of a respondent may be stored in a variable named ‘Q_01’, and include values 1, 2 and 9 where 1 represents “male”, 2 represents “female”, and 9 represents “unreported”. Microdata must therefore be provided at a minimum with a data dictionary containing the variables and value labels and, for derived variables, information of the derivation process. But many other features of a micro-dataset should also be described such as the objectives and the methodology of data collection (including a description of the sampling design for sample surveys), the period of data collection, the identification of the primary investigator and other contributors, the scope and geographic coverage of the data, and much more. This information will make the data usable and discoverable. 5.2 The Data Documentation Initiative (DDI) metadata standard The DDI metadata standard provides a structured and comprehensive list of hundreds of elements and attributes which may be used to document microdata. It is unlikely that any one study would ever require using them all, but this list provides a convenient solution to foster completeness of the information, and to generate documentation that will meet the needs of users. The Data Documentation Initiative (DDI) metadata standard originated in the Inter-university Consortium for Political and Social Research (ICPSR), a membership-based organization with more than 500 member colleges and universities worldwide. The DDI is now the project of an alliance of North American and European institutions. Member institutions comprise many of the largest data producers and data archives in the world. The DDI standard is used by a large community of data archivists, including data librarians from academia, data managers in national statistical agencies and other official data producing agencies, and international organizations. The standard has two branches: the DDI-Codebook (version 2.x) and the DDI LifeCycle (version 3.x). These two branches serve different purposes and audiences. For the purpose of data archiving and cataloguing, the schema we recommend in this Guide is the DDI-Codebook. We use a slightly simplified version of version 2.5 of the standard, to which we add a few elements (including the tags element common to all schemas described in the Guide. A mapping between the elements included in our schema and the DDI Codebook metadata tags is provided in annex 2. The DDI standard is published under the terms of the [GNU General Public License]((http://www.gnu.org/licenses) (version 3 or later). 5.2.1 DDI-Codebook The DDI Alliance developed the DDI-Codebook for organizing the content, presentation, transfer, and preservation of metadata in the social and behavioral sciences. It enables documenting microdata files in a simultaneously flexible and rigorous way. The DDI-Codebook aims to provide a straightforward means of recording and communicating all the salient characteristics of a micro-dataset. The DDI-Codebook is designed to encompass the kinds of data resulting from surveys, censuses, administrative records, experiments, direct observation and other systematic methodology for generating empirical measurements. The unit of observation can be individual persons, households, families, business establishments, transactions, countries or other subjects of scientific interest. The DDI Alliance publishes the DDI-Codebook as an XML schema. We present in this Guide a JSON implementation of the schema, which is used in our R package NADAR and Python Library PyNADA. The NADA cataloguing application works with both the XML and the JSON version. A DDI-compliant metadata file can be converted from the JSON schema to the XML or from XML to JSON. 5.2.2 DDI-Lifecycle As indicated by the DDI Alliance website, DDI-Lifecycle is “designed to document and manage data across the entire life cycle, from conceptualization to data publication, analysis and beyond. It encompasses all of the DDI-Codebook specification and extends it. Based on XML Schemas, DDI-Lifecycle is modular and extensible.” DDI-lifecycle can be used to “populate variable and question banks to explore available data and question structures for reuse in new surveys”. As this is not our objective, and because using the DDI-Lifecycle adds significant complexity, we do not make use of it and this chapter only covers the DDI-Codebook. 5.3 Some practical considerations The DDI is a comprehensive schema that provides metadata elements to document a study (e.g., a survey, or an administrative datasets), the related data files, and the variables they contain. A separate schema is used to document the related resources (questionnaires, reports, and others); see Chapter 13. Some datasets may contain hundreds or even thousands of variables. For each variable, the DDI can include not only the variable name, label and description, but also summary statistics like the count of valid and missing observations, weighted and unweighted frequencies, means, and others. Generating a DDI file manually, in particular the variable-level metadata, can be a tedious and time consuming task. But variable names, summary statistics, and (when avaiulable) variable and value labels can be extracted directly from the data files. User-friendly solutions (specialized metadata editors) are available to automate a large part of this work. DDI can also be generated programmatically using R or Python. Section 5.5 provides examples of the use of specialized DDI metadata editors and programming languages to generate DDI-compliant metadata. Documenting microdata is more complex than documenting publications or other types of data like tables or indicators. The production of microdata often involves experts in survey design, sampling, data processing, and analysis. Generating the metadata should thus be a collective responsibility and will ideally be done in real time (“document as you survey”). Data documentation should be implemented during the whole lifecycle of data production, not as an ex post task. This is in line with what the Generic Statistical Business process Model (GSBPM) recommends: “Good metadata management is essential for the efficient operation of statistical business processes. Metadata are present in every phase, either created, updated or carried forward from a previous phase or reused from another business process. In the context of this model, the emphasis of the overarching process of metadata management is on the creation/revision, updating, use and archiving of statistical metadata, though metadata on the different sub-processes themselves are also of interest, including as an input for quality management. The key challenge is to ensure that these metadata are captured as early as possible, and stored and transferred from phase to phase alongside the data they refer to.” Too often, microdata are documented after completion of the data collection, sometimes by a team who was not directly involved in the production of the data. In such cases, some information may not have been captured and will be difficult to find or reconstruct. Suggestions and recommendations to data curators Generating detailed metadata at the variable level (including elements like the formulation of the questions, variable and value labels, interviewer instructions, universe, derivation procedures, etc.) may seem to be a tedious exercise, but it adds considerable value to the metadata. Indeed, it will (i) provide a detailed data dictionary, required to make the data usable, (ii) provide the necessary information for making the data more discoverable and to enable variable comparison tools, and (iii) guarantee the preservation of institutional memory. The cost of generating such metadata will be very small relative to the cost of generating the data. To make the data more discoverable, attention should be paid to provide a detailed description of the scope and objectives of the data collection. When a survey (or other microdataset) is used to generate statistical indicators, a list of these indicators should be provided in the metadata. The keywords metadata element provides a flexible solution to improve the discoverability of data. For example, a survey that collects data on children age, weight and height, will be relevant for measuring malnutrition and generating indicators like prevalence of stunting or wasting, overweight and underweight. The variable description alone would not make the data discoverable in keyword-based search engines, hence the importance of adding relevant terms and phrases in the keyword section. The DDI metadata will be saved as an XML or JSON file, i.e. as plain text. This means that the DDI metadata cannot include complex formulas. The description of some variables, as well as the description of a survey sample design, may require the use of formulas. In such case, the recommendation is to provide as much of the information as possible in the DDI, and to provide links to documents where the formulas can be found (these documents would be published with the metadata as external resources). Typically, the variables in the DDI are organized by data file. The DDI provides an option –the variable groups– to organize variables differently, for example thematically. These variable groupings are virtual, in the sense that they do not impact the way variables are stored. Not all variables have to be mapped to such groups, and a same variable can belong to more than one group. This option provides the possibility to organize the variables based on a thematic or topical classification. Machine learning (AI) tools make it possible to automate the process of mapping variables to a pre-defined list of groups (each one of them described by a label and a short description). By doing this, and by generating embeddings at the group level, it becomes possible to add semantic search and to implement a recommender system that applies to microdata. 5.4 Schema description: DDI-Codebook 2.5 The DDI-Codebook is a comprehensive, structured list of elements to be used to document microdata of any source. The standard contains five main sections: Document description (doc_desc), with elements used to describe the metadata (not the data); the term “document” refers here to the XML (or JSON) file that contains the metadata. Study description (study_desc), which contains the elements used to describe the study itself (the survey, the administrative process, or the other activity that resulted in the production of the microdata). This section will contain information on the primary investigator, scope and coverage of the data, sampling, etc. File description (data_files), which provides elements to document each data file that compose the dataset (this is thus a repeatable block of elements). Variable description (variables), with elements used to describe each variable contained in the data files, including the variable names, the variable and value labels, summary statistics for each variable, interviewers’ instructions, description of recoding or derivation procedure, and more. Variable groups (variable_groups), an optional section that allows organizing variables by thematic or other groups, independently from the data file they belong to. Variable groups are “virtual”; the grouping of variables does not affect the data files. The other sections in the schema are not part of the DDI Codebook itself. Some are used for catalog administration purposes when the NADA cataloguing application is used (repositoryid, access_policy, published, overwrite, and provenance). repositoryid identifies the data catalog/collection in which the metadata will be published. access_policy indicates the access policy to be applied to the microdata (open access, public use files, licensed access, no access, etc.) published: Indicates whether the metadata will be made visible to visitors of the catalog. By default, the value is 0 (unpublished). This value must be set to 1 (published) to make the metadata visible. overwrite: Indicates whether metadata that may have been previously uploaded for the same dataset can be overwritten. By default, the value is “no”. It must be set to “yes” to overwrite existing information. Note that a dataset will be considered as being the same as a previously uploaded one if the identifier provided in the metadata element study_desc &gt; title_statement &gt; idno is the same. provenance is used to store information on the source and time of harvesting, for metadata that were extracted automatically from external data catalogs. Other sections are provided to allow additional metadata to be collected and stored, including metadata generated by machine learning models (tags, lda_topics, embeddings, and additional). The tags is a section common to all schemas (with the exception of the external resources schema), which provides a flexible solution to generate customized facets in data catalogs. The additional section allows data curators to supplement the DDI standard with their own metadata elements, without breaking compliance with the DDI. { &quot;repositoryid&quot;: &quot;string&quot;, &quot;access_policy&quot;: &quot;data_na&quot;, &quot;published&quot;: 0, &quot;overwrite&quot;: &quot;no&quot;, &quot;doc_desc&quot;: {}, &quot;study_desc&quot;: {}, &quot;data_files&quot;: [], &quot;variables&quot;: [], &quot;variable_groups&quot;: [], &quot;provenance&quot;: [], &quot;tags&quot;: [], &quot;lda_topics&quot;: [], &quot;embeddings&quot;: [], &quot;additional&quot;: { } } The DDI-Codebook also provides a solution to describe OLAP cubes, which we do not make use of as our purpose is to use the standard to document and catalog datasets, not to manage data. Each metadata element in the DDI standard has a name. In our JSON version of the standard, we do not make use of the exact same names. We adapted some of them for clarity. For example, we renamed the DDI element titlStmt as title_statement. The mapping between the DDI Codebook 2.5 standard and the elements in our schema is provided in appendix. JSON files created using our adapted version of the DDI can be exported as a DDI 2.5 compliant and validated XML file using R or Python scripts provided in the NADAR package and PyNADA library. 5.4.1 Document description doc_desc [Optional ; Not repeatable] Documenting a study using the DDI-Codebook standard consists of generating a metadata file in XML or JSON format. This file is what is referred to as the metadata document. The doc_desc or document description is thus a description of the metadata file, and consists of bibliographic information describing the DDI-compliant document as a whole. As a same dataset can possibly be documented by more than one organization, and because metadata can be automatically harvested by on-line catalogs, traceability of the metadata is important. This section, which only contains five main elements, should be as complete as possible, and at least contain information on the producer and prod_date; information. &quot;doc_desc&quot;: { &quot;title&quot;: &quot;string&quot;, &quot;idno&quot;: &quot;string&quot;, &quot;producers&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;abbr&quot;: &quot;string&quot;, &quot;affiliation&quot;: &quot;string&quot;, &quot;role&quot;: &quot;string&quot; } ], &quot;prod_date&quot;: &quot;string&quot;, &quot;version_statement&quot;: { &quot;version&quot;: &quot;string&quot;, &quot;version_date&quot;: &quot;string&quot;, &quot;version_resp&quot;: &quot;string&quot;, &quot;version_notes&quot;: &quot;string&quot; } } title [Optional ; Not repeatable ; String] The title of the metadata document (which may be the title of the study itself). The metadata document is the DDI metadata file (XML or JSON file) that is being generated. The “Document title” should mention the geographic scope of the data collection as well as the time period covered. For example: “DDI 2.5: Albania Living Standards Study 2012”. idno [Optional ; Not repeatable ; String] A unique identifier for the metadata document. This identifier must be unique in the catalog where the metadata are intended to be published. Ideally, the identifier should also be unique globally. This is different from the unique identifier idno found in section study_description / title_statement, although it is good practice to generate identifiers that establish a clear connection between the two identifiers. The Document ID could also include the metadata document version identifier. For example, if the “Primary identifier” of the study is “ALB_LSMS_2012”, the “Document ID” in the Metadata information could be “IHSN_DDI_v01_ALB_LSMS_2012” if the DDI metadata are produced by the IHSN. Each organization should establish systematic rules to generate such IDs. A validation rule can be set (using a regular expression) in user templates to enforce a specific ID format. The identifier should not contain blank spaces. producers [Optional ; Repeatable] The metadata producer is the person or organization with the financial and/or administrative responsibility for the processes whereby the metadata document was created. This is a “Recommended” element. For catalog administration purposes, information on the producer and on the date of metadata production is useful. name [Optional ; Not repeatable ; String] The name of the person or organization in charge of the production of the DDI metadata. If the name of individuals cannot be provided due to an organization’s data protection rules, the title of the person, or an anonymized identifier, can be provided (or this field can be left blank if no other option is available). abbr [Optional ; Not repeatable ; String] The initials of the person, or the abbreviation of the organization’s name mentioned in name. affiliation [Optional ; Not repeatable ; String] The affiliation of the person or organization mentioned in name. role [Optional ; Not repeatable ; String] The specific role of the person or organization mentioned in name in the production of the DDI metadata. prod_date [Optional ; Not repeatable ; String] The date the DDI metadata document was produced (not the date it was distributed or archived), preferably entered in ISO 8601 format (YYYY-MM-DD or YYY-MM). This is a “Recommended” element, as information on the producer and on the date of metadata production is useful for catalog administration purposes. version_statement [Optional ; Not repeatable] A version statement for the metadata (DDI) document. Documenting a dataset is not a trivial exercise. It may happen that, having identified errors or gaps in a DDI document, or after receiving suggestions for improvement or additional input, the DDI metadata are modified. The version_statement describes the version of the metadata document. It is good practice to provide a version number and date, and information on what distinguishes the current version from the previous one(s). version [Optional ; Not repeatable ; String] The label of the version, also known as release or edition. For example, Version 1.2 version_date [Optional ; Not repeatable ; String] The date when this version of the metadata document (DDI file) was produced, preferably identifying an exact date. This will usually correspond to the prod_date element. It is recommended to enter the date in the ISO 8601 date format (YYYY-MM-DD or YYYY-MM or YYYY). version_resp [Optional ; Not repeatable ; String] The organization or person responsible for this version of the metadata document. version_notes [Optional ; Not repeatable ; String] This element can be used to clarify information/annotation regarding this version of the metadata document, for example to indicate what is new or specific in this version comparing with a previous version. my_ddi &lt;- list( doc_desc = list( title = &quot;Albania Living Standards Study 2012&quot;, idno = &quot;DDI_WB_ALB_2012_LSMS_v02&quot;, producers = list( list(name = &quot;Development Data Group&quot;, abbr = &quot;DECDG&quot;, affiliation = &quot;World Bank&quot;, role = &quot;Production of the DDI-compliant metadata&quot; ) ), prod_date = &quot;2021-02-16&quot;, version_statement = list( version = &quot;Version 2.0&quot;, version_date = &quot;2021-02-16&quot;, version_resp = &quot;OD&quot;, version_notes = &quot;Version identical to Version 1.0 except for the Data Appraisal section which was added.&quot; ) ), # ... (other sections of the DDI) ) 5.4.2 Study description study_desc [Required ; Not repeatable] The study_desc or study description consists of information about the data collection or study that the DDI-compliant documentation file describes. This section includes study-level information such as scope and coverage, objectives, producers, sampling, data collection dates and methods, etc. &quot;study_desc&quot;: { &quot;title_statement&quot;: {}, &quot;authoring_entity&quot;: [], &quot;oth_id&quot;: [], &quot;production_statement&quot;: {}, &quot;distribution_statement&quot;: {}, &quot;series_statement&quot;: {}, &quot;version_statement&quot;: {}, &quot;bib_citation&quot;: &quot;string&quot;, &quot;bib_citation_format&quot;: &quot;string&quot;, &quot;holdings&quot;: [], &quot;study_notes&quot;: &quot;string&quot;, &quot;study_authorization&quot;: {}, &quot;study_info&quot;: {}, &quot;study_development&quot;: {}, &quot;method&quot;: {}, &quot;data_access&quot;: {} } 5.4.2.1 Title statement title_statement [Required ; Not repeatable] The title statement for the study. &quot;title_statement&quot;: { &quot;idno&quot;: &quot;string&quot;, &quot;identifiers&quot;: [ { &quot;type&quot;: &quot;string&quot;, &quot;identifier&quot;: &quot;string&quot; } ], &quot;title&quot;: &quot;string&quot;, &quot;sub_title&quot;: &quot;string&quot;, &quot;alternate_title&quot;: &quot;string&quot;, &quot;translated_title&quot;: &quot;string&quot; } idno [Required ; Not repeatable ; String] idno is the primary identifier of the dataset. It is a unique identification number used to identify the study (survey, census or other). A unique identifier is required for cataloguing purpose, so this element is declared as “Required”. The identifier will allow users to cite the dataset properly. The identifier must be unique within the catalog. Ideally, it should also be globally unique; the recommended option is to obtain a Digital Object Identifier (DOI) for the study. Alternatively, the idno can be constructed by an organization using a consistent scheme. The scheme could for example be “catalog-country-study-year-version”, where country is the 3-letter ISO country code, producer is the abbreviation of the producing agency, study is the study acronym, year is the reference year (or the year the study started), version is a version number. Using that scheme, the Uganda 2005 Demographic and Health Survey for example would have the following idno (where “MDA” stand for “My Data Archive”): MDA_UGA_DHS_2005_v01. Note that the schema allows you to provide more than one identifier for a same study (in element identifiers); a catalog-specific identifier is thus not incompatible with a globally unique identifier like a DOI. The identifier should not contain blank spaces. identifiers [Optional ; Repeatable] This repeatable element is used to enter identifiers (IDs) other than the idno entered in the Title statement. It can for example be a Digital Object Identifier (DOI). The idno can be repeated here (the idno element does not provide a type parameter; if a DOI or other standard reference ID is used as idno, it is recommended to repeat it here with the identification of its type). type [Optional ; Not repeatable ; String] The type of unique ID, e.g. “DOI”. identifier [Required ; Not repeatable ; String] The identifier itself. title [Required ; Not repeatable ; String] This element is “Required”. Provide here the full authoritative title for the study. Make sure to use a unique name for each distinct study. The title should indicate the time period covered. For example, in a country conducting monthly labor force surveys, the title of a study would be like “Labor Force Survey, December 2020”. When a survey spans two years (for example, a household income and expenditure survey conducted over a period of 12 months from June 2020 to June 2021), the range of years can be provided in the title, for example “Household Income and Expenditure Survey 2020-2021”. The title of a survey should be its official name as stated on the survey questionnaire or in other study documents (report, etc.). Including the country name in the title is optional (another metadata element is used to identify the reference countries). Pay attention to the consistent use of capitalization in the title. sub_title [Optional ; Not repeatable ; String] The sub-title is a secondary title used to amplify or state certain limitations on the main title, for example to add information usually associated with a sequential qualifier for a survey. For example, we may have “[country] Universal Primary Education Project, Impact Evaluation Survey 2007” as title, and “Baseline dataset” as sub-title. Note that this information could also be entered as a Title with no Subtitle: “[country] Universal Primary Education Project, Impact Evaluation Survey 2007 - Baseline dataset”. alternate_title [Optional ; Not repeatable ; String] The alternate_title will typically be used to capture the abbreviation of the survey title. Many surveys are known and referred to by their acronym. The survey reference year(s) may be included. For example, the “Demographic and Health Survey 2012” would be abbreviated as “DHS 2012”, or the “Living Standards Measurement Study 2020-2012” as “LSMS 2020-2021”. translated_title [Optional ; Not repeatable ; String] In countries with more than one official language, a translation of the title may be provided here. Likewise, the translated title may simply be a translation into English from a country’s own language. Special characters should be properly displayed, such as accents and other stress marks or different alphabets. my_ddi &lt;- list( # ... , study_desc = list( title_statement = list( idno = &quot;ML_ALB_2012_LSMS_v02&quot;, identifiers = list( list(type = &quot;DOI&quot;, identifier = &quot;XXX-XXXX-XXX&quot;) ), title = &quot;Living Standards Study 2012&quot;, alternate_title = &quot;LSMS 2012&quot;, translated_title = &quot;Anketa e Matjes së Nivelit të Jetesës (AMNJ) 2012&quot; ) ), # ... ) 5.4.2.2 Authoring entity authoring_entity [Optional ; Repeatable] The name and affiliation of the person, corporate body, or agency responsible for the study’s substantive and intellectual content (the “authoring entity” or “primary investigator”). Generally, in a survey, the authoring entity will be the institution implementing the survey. Repeat the element for each authoring entity, and enter the affiliation when relevant. If various institutions have been equally involved as main investigators, then should all be listed. This only includes the agencies responsible for the implementation of the study, not sponsoring agencies or entities providing technical assistance (for which other metadata elements are available). The order in which authoring entities are listed is discretionary. It can be alphabetic or by significance of contribution. Individual persons can also be mentioned, if not prohibited by privacy protection rules. &quot;authoring_entity&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;affiliation&quot;: &quot;string&quot; } ] name [Optional ; Not repeatable ; String] The name of the person, corporate body, or agency responsible for the work’s substantive and intellectual content. The primary investigator will in most cases be an institution, but could also be an individual in the case of small-scale academic surveys. If persons are mentioned, use the appropriate format of Surname, First name. affiliation [Optional ; Not repeatable ; String] The affiliation of the person, corporate body, or agency mentioned in name. my_ddi &lt;- list( # ... , study_desc = list( # ... , authoring_entity = list( list(name = &quot;National Statistics Office of Popstan (NSOP)&quot;, affiliation = &quot;Ministry of Planning&quot;), list(name = &quot;Department of Public Health of Popstan (DPH)&quot;, affiliation = &quot;Ministry of Health&quot;) ), # ... ) ) 5.4.2.3 Other entity oth_id [Optional ; Repeatable] This element is used to acknowledge any other people and organizations that have in some form contributed to the study. This does not include other producers which should be listed in producers, and financial sponsors which should be listed in the element funding_agencies. &quot;oth_id&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;role&quot;: &quot;string&quot;, &quot;affiliation&quot;: &quot;string&quot; } ] name [Required ; Not repeatable ; String] The name of the person or organization. role [Optional ; Not repeatable ; String] A brief description of the specific role of the person or organization mentioned in name. affiliation [Optional ; Not repeatable ; String] The affiliation of the person or organization mentioned in name. my_ddi &lt;- list( # ... , study_desc = list( # ... , oth_id = list( list(name = &quot;John Doe&quot;, role = &quot;Technical advisor in sample design&quot;, affiliation = &quot;World Bank Group&quot; ) ), # ... ) ) 5.4.2.4 Production statement production_statement [Optional ; Not repeatable] A production statement for the work at the appropriate level. &quot;production_statement&quot;: { &quot;producers&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;abbr&quot;: &quot;string&quot;, &quot;affiliation&quot;: &quot;string&quot;, &quot;role&quot;: &quot;string&quot; } ], &quot;copyright&quot;: &quot;string&quot;, &quot;prod_date&quot;: &quot;string&quot;, &quot;prod_place&quot;: &quot;string&quot;, &quot;funding_agencies&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;abbr&quot;: &quot;string&quot;, &quot;grant&quot;: &quot;string&quot;, &quot;role&quot;: &quot;string&quot; } ] } producers [Optional ; Repeatable] This field is provided to list other interested parties and persons that have played a significant but not the leading technical role in implementing and producing the data (which will be listed in authoring_entity), and not the financial sponsors (which will be listed in funding_agencies). name [Required ; Not repeatable ; String] The name of the person or organization. abbr [Optional ; Not repeatable ; String] The official abbreviation of the organization mentioned in name. affiliation [Optional ; Not repeatable ; String] The affiliation of the person or organization mentioned in name. role [Optional ; Not repeatable ; String] A succinct description of the specific contribution by the person or organization in the production of the data. copyright [Optional ; Not repeatable ; String] A copyright statement for the study at the appropriate level. prod_date [Optional ; Not repeatable ; String] This is the date (preferably entered in ISO 8601 format: YYYY-MM-DD or YYYY-MM or YYYY) of the actual and final production of the version of the dataset being documented. At least the month and year should be provided. A regular expression can be entered in user templates to validate the information captured in this field. prod_place [Optional ; Not repeatable ; String] The address of the organization that produced the study. funding_agencies [Optional ; repeatable] The source(s) of funds for the production of the study. If different funding agencies sponsored different stages of the production process, use the role attribute to distinguish them. name [Required ; Not repeatable ; String] The name of the funding agency. abbr [Optional ; Not repeatable ; String] The abbreviation (acronym) of the funding agency mentioned in name. grant [Optional ; Not repeatable ; String] The grant number. If an agency has provided more than one grant, list them all separated with a “;”. role [Optional ; Not repeatable ; String] The specific contribution of the funding agency mentioned in name. This element is used when multiple funding agencies are listed to distinguish their specific contributions. This example shows the Bangladesh 2018-2019 Demographic and Health Survey (DHS) my_ddi &lt;- list( # ... , study_desc = list( # ... , production_statement = list( producers = list( list(name = &quot;National Institute of Population Research and Training&quot;, abbr = &quot;NIPORT&quot;, role = &quot;Primary investigator&quot;), list(name = &quot;Medical Education and Family Welfare Division&quot;, role = &quot;Advisory&quot;), list(name = &quot;Ministry of Health and Family Welfare&quot;, abbr = &quot;MOHFW&quot;, role = &quot;Advisory&quot;), list(name = &quot;Mitra and Associates&quot;, role = &quot;Data collection - fieldwork&quot;), list(name = &quot;ICF (consulting firm)&quot;, role = &quot;Technical assistance / DHS Program&quot;) ), prod_date = &quot;2019&quot;, prod_place = &quot;Dhaka, Bangladesh&quot;, funding_agencies = list( list(name = &quot;United States Agency for International Development&quot;, abbr = &quot;USAID&quot;) ) ), # ..., ) # ... ) 5.4.2.5 Distribution statement distribution_statement [Optional ; Not repeatable] A distribution statement for the study. &quot;distribution_statement&quot;: { &quot;distributors&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;abbr&quot;: &quot;string&quot;, &quot;affiliation&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ], &quot;contact&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;affiliation&quot;: &quot;string&quot;, &quot;email&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ], &quot;depositor&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;abbr&quot;: &quot;string&quot;, &quot;affiliation&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ], &quot;deposit_date&quot;: &quot;string&quot;, &quot;distribution_date&quot;: &quot;string&quot; } distributors [Optional ; Repeatable] The organization(s) designated by the author or producer to generate copies of the study output including any necessary editions or revisions. name [Required ; Not repeatable ; String] The name of the distributor. It can be an individual or an organization. abbr [Optional ; Not repeatable ; String] The official abbreviation of the organization mentioned in name. affiliation [Optional ; Not repeatable ; String] The affiliation of the person or organization mentioned in name. uri [Optional ; Not repeatable ; String] A URL to the ordering service or download facility on a Web site. contact [Optional ; Repeatable] Names and addresses of individuals responsible for the study. Individuals listed as contact persons will be used as resource persons regarding problems or questions raised by users. name [Required ; Not repeatable ; String] The name of the person or organization that can be contacted. affiliation [Optional ; Not repeatable ; String] The affiliation of the person or organization mentioned in name. email [Optional ; Not repeatable ; String] An email address for the contact mentioned in name. uri [Optional ; Not repeatable ; String] A URL to the contact mentioned in name. depositor [Optional ; Repeatable] The name of the person (or institution) who provided this study to the archive storing it. name [Required ; Not repeatable ; String] The name of the depositor. It can be an individual or an organization. abbr [Optional ; Not repeatable ; String] The official abbreviation of the organization mentioned in name. affiliation [Optional ; Not repeatable ; String] The affiliation of the person or organization mentioned in name. uri [Optional ; Not repeatable ; String] A URL to the depositor deposit_date [Optional ; Not repeatable ; String] The date that the study was deposited with the archive that originally received it. The date should be entered in the ISO 8601 format (YYYY-MM-DD or YYYY-MM or YYYY). The exact date should be provided when possible. distribution_date [Optional ; Not repeatable ; String] The date that the study was made available for distribution/presentation. The date should be entered in the ISO 8601 format (YYYY-MM-DD or YYYY-MM or YYYY). The exact date should be provided when possible. This example is @@@@@@@@@@@@ my_ddi &lt;- list( doc_desc = list( # ... ), study_desc = list( # ... , distribution_statement = list( distributors = list( list(name = &quot;World Bank Microdata Library&quot;, abbr = &quot;WBML&quot;, affiliation = &quot;World Bank Group&quot;, uri = &quot;http:/microdata.worldbank.org&quot;) ), contact = list( list(name = &quot;&quot;, affiliation = &quot;&quot;, email = &quot;&quot;, uri = &quot;&quot;) ), depositor = list( list(name = &quot;&quot;, abbr = &quot;&quot;, affiliation = &quot;&quot;, uri = &quot;&quot;) ), deposit_date = &quot;&quot;, distribution_date = &quot;&quot; ), # ... ) # ... ) 5.4.2.6 Series statement series_statement [Optional; Not repeatable] A study may be repeated at regular intervals (such as an annual labor force survey), or be part of an international survey program (such as the MICS, DHS, LSMS and others). The series statement provides information on the series. &quot;series_statement&quot;: { &quot;series_name&quot;: &quot;string&quot;, &quot;series_info&quot;: &quot;string&quot; } series_name [Optional ; Not repeatable ; String] The name of the series to which the study belongs. For example, “Living Standards Measurement Study (LSMS)” or “Demographic and Health Survey (DHS)” or “Multiple Indicator Cluster Survey VII (MICS7)”. A description of the series can be provided in the element “series_info”. series_info [Optional ; Not repeatable ; String] A brief description of the characteristics of the series, including when it started, how many rounds were already implemented, and who is in charge would be provided here. my_ddi &lt;- list( doc_desc = list( # ... ), study_desc = list( # ... , series_statement = list( list(series_name = &quot;Multiple Indicator Cluster Survey (MICS) by UNICEF&quot;, series_info = &quot;The Multiple Indicator Cluster Survey, Round 3 (MICS3) is the third round of MICS surveys, previously conducted around 1995 (MICS1) and 2000 (MICS2). MICS surveys are designed by UNICEF, and implemented by national agencies in participating countries. MICS was designed to monitor various indicators identified at the World Summit for Children and the Millennium Development Goals. Many questions and indicators in MICS3 are consistent and compatible with the prior round of MICS (MICS2) but less so with MICS1, although there have been a number of changes in definition of indicators between rounds. Round 1 covered X countries, round 2 covered Y countries, and Round 3 covered Z countries.&quot;) ), # ... ), # ... ) 5.4.2.7 Version statement version_statement [Optional; Not repeatable] Version statement for the study. &quot;version_statement&quot;: { &quot;version&quot;: &quot;string&quot;, &quot;version_date&quot;: &quot;string&quot;, &quot;version_resp&quot;: &quot;string&quot;, &quot;version_notes&quot;: &quot;string&quot; } The version statement should contain a version number followed by a version label. The version number should follow a standard convention to be adopted by the data repository. We recommend that larger series be defined by a number to the left of a decimal and iterations of the same series by a sequential number that identifies the release. The left number could for example be (0) for the raw, unedited dataset; (1) for the edited dataset, non anonymized, available for internal use at the data producing agency; and (2) the edited dataset, prepared for dissemination to secondary users (possibly anonymized). Example: v0: Basic raw data, resulting from the data capture process, before any data editing is implemented. v1.0: Edited data, first iteration, for internal use only. v1.1: Edited data, second iteration, for internal use only. v2.1: Edited data, anonymized and packaged for public distribution. version [Optional ; Not repeatable ; String] The version number, also known as release or edition. version_date [Optional ; Not repeatable ; String] The ISO 8601 standard for dates (YYYY-MM-DD) is recommended for use with the “date” attribute. version_resp [Optional ; Not repeatable ; String] The person(s) or organization(s) responsible for this version of the study. version_notes [Optional ; Not repeatable ; String] Version notes should provide a brief report on the changes made through the versioning process. The note should indicate how this version differs from other versions of the same dataset. my_ddi &lt;- list( # ... study_desc = list( # ... , version_statement = list( version = &quot;Version 1.1&quot;, version_date = &quot;2021-02-09&quot;, version_resp = &quot;National Statistics Office, Data Processing unit&quot;, version_notes = &quot;This dataset contains the edited version of the data that were used to produce the Final Survey Report. It is equivalent to version 1.0 of the dataset, except for the addition of an additional variable (variable weight2) containing a calibrated version of the original sample weights (variable weight)&quot; ), # ... ), # ... ) 5.4.2.8 Bibliographic citation bib_citation [Optional ; Not repeatable ; String] Complete bibliographic reference containing all of the standard elements of a citation that can be used to cite the study. The bib_citation_format (see below) is provided to enable specification of the particular citation style used, e.g., APA, MLA, or Chicago. 5.4.2.9 Bibliographic citation format bib_citation_format [Optional ; Not repeatable ; String] This element is used to specify the particular citation style used in the field bib_citation described above, e.g., APA, MLA, or Chicago. my_ddi &lt;- list( doc_desc = list( # ... ), study_desc = list( # ... , bib_citation = &quot;&quot;, bib_citation_format = &quot;&quot; # ... ), # ... ) 5.4.2.10 Holdings holdings [Optional ; Repeatable] Information concerning either the physical or electronic holdings of the study being described. &quot;holdings&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;location&quot;: &quot;string&quot;, &quot;callno&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ] name [Optional ; Not repeatable ; String] Name of the physical or electronic holdings of the cited study. location [Optional ; Not repeatable ; String] The physical location where a copy of the study is held. callno [Optional ; Not repeatable ; String] The call number at the location specified in location. uri [Optional ; Not repeatable ; String] A URL for accessing the electronic copy of the cited study from the location mentioned in name. my_ddi &lt;- list( doc_desc = list( # ... ), study_desc = list( # ... , holdings = list( name = &quot;World Bank Microdata Library&quot;, location = &quot;World Bank, Development Data Group&quot;, uri = &quot;http://microdata.worldbank.org&quot; ), # ... ), # ... ) 5.4.2.11 Study notes study_notes [Optional ; Not repeatable] This element can be used to provide additional information on the study which cannot be accommodated in the specific metadata elements of the schema, in the form of a free text field. 5.4.2.12 Study autorization study_authorization [Optional ; Not repeatable] &quot;study_authorization&quot;: { &quot;date&quot;: &quot;string&quot;, &quot;agency&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;affiliation&quot;: &quot;string&quot;, &quot;abbr&quot;: &quot;string&quot; } ], &quot;authorization_statement&quot;: &quot;string&quot; } Provides structured information on the agency that authorized the study, the date of authorization, and an authorization statement. This element will be used when a special legislation is required to conduct the data collection (for example a Census Act) or when the approval of an Ethics Board or other body is required to collect the data. date [Optional ; Not repeatable ; String] The date, preferably entered in ISO 8601 format (YYYY-MM-DD), when the authorization to conduct the study was granted. agency [Optional ; Repeatable] Identification of the agency that authorized the study. name [Optional ; Not repeatable ; String] Name of the agent or agency that authorized the study. affiliation [Optional ; Not repeatable ; String] The institutional affiliation of the authorizing agent or agency mentioned in name. abbr [Optional ; Not repeatable ; String] The abbreviation of the authorizing agent’s or agency’s name. authorization_statement [Optional ; Not repeatable ; String] The text of the authorization (or a description and link to a document or other resource containing the authorization statement). my_ddi &lt;- list( doc_desc = list( # ... ), study_desc = list( # ... , study_authorization = list( date = &quot;2018-02-23&quot;, agency = list( name = &quot;Institutional Review Board of the University of Popstan&quot;, abbr = &quot;IRB-UP&quot;) ), authorization_statement = &quot;The required documentation covering the study purpose, disclosure information, questionnaire content, and consent statements was delivered to the IRB-UP on 2017-12-27 and was reviewed by the compliance officer. Statement of authorization for the described study was issued on 2018-02-23.&quot; # ... ), # ... ) 5.4.2.13 Study information study_info [Required ; Not repeatable] This section contains the metadata elements needed to describe the core elements of a study including the dates of data collection and reference period, the country and other geographic coverage information, and more. These elements are not required in the DDI standard, but documenting a study without provinding at least some of this information would make the metadata mostly irrelevant. &quot;study_info&quot;: { &quot;study_budget&quot;: &quot;string&quot;, &quot;keywords&quot;: [], &quot;topics&quot;: [], &quot;abstract&quot;: &quot;string&quot;, &quot;time_periods&quot;: [], &quot;coll_dates&quot;: [], &quot;nation&quot;: [], &quot;bbox&quot;: [], &quot;bound_poly&quot;: [], &quot;geog_coverage&quot;: &quot;string&quot;, &quot;geog_coverage_notes&quot;: &quot;string&quot;, &quot;geog_unit&quot;: &quot;string&quot;, &quot;analysis_unit&quot;: &quot;string&quot;, &quot;universe&quot;: &quot;string&quot;, &quot;data_kind&quot;: &quot;string&quot;, &quot;notes&quot;: &quot;string&quot;, &quot;quality_statement&quot;: {}, &quot;ex_post_evaluation&quot;: {} } study_budget [Optional ; Not repeatable ; String] This is a free-text field, not a structured element. The budget of a study will ideally be described by budget line. The currency used to describe the budget should be specified. This element can also be used to document issues related to the budget (e.g., documenting possible under-run and over-run). my_ddi &lt;- list( # ... , study_desc = list( # ... , study_info = list( study_budget = &quot;The study had a total budget of 500,000 USD allocated as follows: By type of expense: - Staff: 150,000 USD - Consultants (incl. interviewers): 180,000 USD - Travel: 50,000 USD - Equipment: 90,000 USD - Other: 30,000 USD By activity - Study design (questionnaire design and testing, sampling, piloting): 100,000 USD - Data collection: 250,000 USD - Data processing and tabulation: 80,000 USD - Analysis and dissemination: 50,000 USD - Evaluation: 20,000 USD By source of funding: - Government budget: 300,000 USD - External sponsors - Grant ABC001 - 150,000 USD - Grant XYZ987 - 50,000 USD&quot;, # ... ), # ... ) keywords [Optional ; Repeatable] &quot;keywords&quot;: [ { &quot;keyword&quot;: &quot;string&quot;, &quot;vocab&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ] Keywords are words or phrases that describe salient aspects of a data collection’s content. The addition of keywords can significantly improve the discoverability of data. Keywords can summarize and improve the description of the content or subject matter of a study. For example, keywords “poverty”, “inequality”, “welfare”, and “prosperity” could be attached to a household income survey used to generate poverty and inequality indicators (for which these keywords may not appear anywhere else in the metadata). A controlled vocabulary can be employed. Keywords can be selected from a standard thesaurus, preferably an international, multilingual thesaurus. - keyword [ Required ; String ; Non repeatable] A keyword (or phrase). - vocab [Optional ; Not repeatable ; String] The controlled vocabulary from which the keyword is extracted, if any. - uri [Optional ; Not repeatable ; String] The URI of the controlled vocabulary used, if any. my_ddi &lt;- list( doc_desc = list( # ... ), study_desc = list( # ... , study_info = list( # ... , keywords = list( list(keyword = &quot;poverty&quot;, vocab = &quot;UNESCO Thesaurus&quot;, uri = &quot;http://vocabularies.unesco.org/browser/thesaurus/en/&quot;), list(keyword = &quot;income distribution&quot;, vocab = &quot;UNESCO Thesaurus&quot;, uri = &quot;http://vocabularies.unesco.org/browser/thesaurus/en/&quot;), list(keyword = &quot;inequality&quot;, vocab = &quot;UNESCO Thesaurus&quot;, uri = &quot;http://vocabularies.unesco.org/browser/thesaurus/en/&quot;) ), # ... ), # ... ) topics [Optional ; Repeatable] The topics field indicates the broad substantive topic(s) that the study covers. A topic classification facilitates referencing and searches in on-line data catalogs. &quot;topics&quot;: [ { &quot;topic&quot;: &quot;string&quot;, &quot;vocab&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ] topic [Required ; Not repeatable] The label of the topic. Topics should be selected from a standard controlled vocabulary such as the Council of European Social Science Data Archives (CESSDA) Topic Classification. vocab [Required ; Not repeatable] The specification (name including the version) of the controlled vocabulary in use. uri [Required ; Not repeatable] A link (URL) to the controlled vocabulary website. my_ddi &lt;- list( doc_desc = list( # ... ), study_desc = list( # ... , study_info = list( # ... , topics = list( list(topic = &quot;Equality, inequality and social exclusion&quot;, vocab = &quot;CESSDA topics classification&quot;, uri = &quot;https://vocabularies.cessda.eu/vocabulary/TopicClassification&quot;), list(topic = &quot;Social and occupational mobility&quot;, vocab = &quot;CESSDA topics classification&quot;, uri = &quot;https://vocabularies.cessda.eu/vocabulary/TopicClassification&quot;) ), # ... ), # ... ) abstract [Optional ; Not repeatable ; String] An un-formatted summary describing the purpose, nature, and scope of the data collection, special characteristics of its contents, major subject areas covered, and what questions the primary investigator(s) attempted to answer when they conducted the study. The summary should ideally be between 50 and 5000 characters long. The abstract should provide a clear summary of the purposes, objectives and content of the survey. It should be written by a researcher or survey statistician aware of the study. Inclusion of this element is strongly recommended. This example is for the Afrobarometer Survey 1999-2000, Merged Round 1 dataset. my_ddi &lt;- list( doc_desc = list( # ... ), study_desc = list( # ... , study_info = list( # ... , abstract = &quot;The Afrobarometer is a comparative series of public attitude surveys that assess African citizen&#39;s attitudes to democracy and governance, markets, and civil society, among other topics. The 12 country dataset is a combined dataset for the 12 African countries surveyed during round 1 of the survey, conducted between 1999-2000 (Botswana, Ghana, Lesotho, Mali, Malawi, Namibia, Nigeria South Africa, Tanzania, Uganda, Zambia and Zimbabwe), plus data from the old Southern African Democracy Barometer, and similar surveys done in West and East Africa.&quot;, # ... ), # ... ) time_periods [Optional ; Repeatable] This refers to the time period (also known as span) covered by the data, not the dates of data collection. &quot;time_periods&quot;: [ { &quot;start&quot;: &quot;string&quot;, &quot;end&quot;: &quot;string&quot;, &quot;cycle&quot;: &quot;string&quot; } ] start [Required ; Not repeatable ; String] The start date for the cycle being described. Enter the date in ISO 8601 format (YYYY-MM-DD or YYYY-MM or YYYY). end [Required ; Not repeatable ; String] The end date for the cycle being described. Enter the date in ISO 8601 format (YYYY-MM-DD or YYYY-MM or YYYY). Indicate open-ended dates with two decimal points (..) cycle [Optional ; Not repeatable ; String] The cycle attribute permits specification of the relevant cycle, wave, or round of data. coll_dates [Optional ; Repeatable] Contains the date(s) when the data were collected, which may be different from the date the data refer to (see time_periods above). For example, data may be collected over a period of 2 weeks (coll_dates) about household expenditures during a reference week (time_periods) preceding the beginning of data collection. Use the event attribute to specify the “start” and “end” for each period entered. &quot;coll_dates&quot;: [ { &quot;start&quot;: &quot;string&quot;, &quot;end&quot;: &quot;string&quot;, &quot;cycle&quot;: &quot;string&quot; } ] start [Required ; Not repeatable ; String] Date the data collection started (for the specified cycle, if any). Enter the date in ISO 8601 format (YYYY-MM-DD or YYYY-MM or YYYY). end [Required ; Not repeatable ; String] Date the data collection ended (for the specified cycle, if any). Enter the date in ISO 8601 format (YYYY-MM-DD or YYYY-MM or YYYY). cycle [Optional ; Not repeatable ; String] Identification of the cycle of data collection. The cycle attribute permits specification of the relevant cycle, wave, or round of data. For example, a household consumption survey could visit households in four phases (one per quarter). Each quarter would be a cycle, and the specific dates of data collection for each quarter would be entered. This example is for an impact evaluation survey with a baseline and two follow-up surveys) my_ddi &lt;- list( doc_desc = list( # ... ), study_desc = list( # ... , study_info = list( # ... , time_periods = list( list(start = &quot;2020-01-10&quot;, end = &quot;2020-01-16&quot;, cycle = &quot;Baseline survey&quot;), list(start = &quot;2020-07-10&quot;, end = &quot;2020-07-16&quot;, cycle = &quot;First follow-up survey&quot;), list(start = &quot;2021-01-10&quot;, end = &quot;2021-01-16&quot;, cycle = &quot;Second and last follow-up survey&quot;), ), coll_dates = list( list(start = &quot;2020-01-17&quot;, end = &quot;2020-01-25&quot;, cycle = &quot;Baseline survey&quot;), list(start = &quot;2020-07-17&quot;, end = &quot;2020-07-24&quot;, cycle = &quot;First follow-up survey&quot;), list(start = &quot;2021-01-17&quot;, end = &quot;2021-01-22&quot;, cycle = &quot;Second and last follow-up survey&quot;) ), # ... ), # ... ) nation [Optional ; Repeatable] Indicates the country or countries (or “economies”, or “territories”) covered in the study (but not the sub-national geographic areas). If the study covers more than one country, they will be entered separately. &quot;nation&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;abbreviation&quot;: &quot;string&quot; } ] name [Required ; Not repeatable ; String] The country name, even in cases where the study does not cover the entire country. abbreviation [Optional ; Not repeatable ; String] The abbreviation will contain a country code, preferably the 3-letter ISO 3166-1 country code. bbox [Optional ; Repeatable] This element is used to define one or multiple bounding box(es), which are the rectangular fundamental geometric description of the geographic coverage of the data. A bounding box is defined by west and east longitudes and north and south latitudes, and includes the largest geographic extent of the dataset’s geographic coverage. The bounding box provides the geographic coordinates of the top left (north/west) and bottom-right (south/east) corners of a rectangular area. This element can be used in catalogs as the first pass of a coordinate-based search. This element is optional, but if the bound_poly element (see below) is used, then the bbox element must be included. &quot;bbox&quot;: [ { &quot;west&quot;: &quot;string&quot;, &quot;east&quot;: &quot;string&quot;, &quot;south&quot;: &quot;string&quot;, &quot;north&quot;: &quot;string&quot; } ] west [Required ; Not repeatable ; String] West longitude of the bounding box. east [Required ; Not repeatable ; String] East longitude of the bounding box. south [Required ; Not repeatable ; String] South latitude of the bounding box. north [Required ; Not repeatable ; String] North latitude of the bounding box. This example is for a study covering the islands of Madagascar and Mauritius my_ddi &lt;- list( doc_desc = list( # ... ), study_desc = list( # ... , study_info = list( # ... , nation = list( list(name = &quot;Madagascar&quot;, abbreviation = &quot;MDG&quot;), list(name = &quot;Mauritius&quot;, abbreviation = &quot;MUS&quot;) ), bbox = list( list(name = &quot;Madagascar&quot;, west = &quot;43.2541870461&quot;, east = &quot;50.4765368996&quot;, south = &quot;-25.6014344215&quot;, north = &quot;-12.0405567359&quot;), list(name = &quot;Mauritius&quot;, west = &quot;56.6&quot;, east = &quot;72.466667&quot;, south = &quot;-20.516667&quot;, north = &quot;-5.25&quot;) ), # ... ), # ... ) bound_poly [Optional ; Repeatable] The bbox metadata element (see above) describes a rectangular area representing the entire geographic coverage of a dataset. The element bound_poly allows for a more detailed description of the geographic coverage, by allowing multiple and non-rectangular polygons (areas) to be described. This is done by providing list(s) of latitude and longitude coordinates that define the area(s). It should only be used to define the outer boundaries of the covered areas. This field is intended to enable a refined coordinate-based search, not to actually map an area. Note that if the bound_poly element is used, then the element bbox MUST be present as well, and all points enclosed by the bound_poly MUST be contained within the bounding box defined in bbox. &quot;bound_poly&quot;: [ { &quot;lat&quot;: &quot;string&quot;, &quot;lon&quot;: &quot;string&quot; } ] lat [Required ; Not repeatable ; String] The latitude of the coordinate. lon [Required ; Not repeatable ; String] The longitude of the coordinate. This example shows a polygon for the State of Nevada, USA my_ddi &lt;- list( doc_desc = list( # ... ), study_desc = list( # ... , study_info = list( # ... , bound_poly = list( list(lat = &quot;42.002207&quot;, lon = &quot;-120.005729004&quot;), list(lat = &quot;42.002207&quot;, lon = &quot;-114.039663&quot;), list(lat = &quot;35.9&quot;, lon = &quot;-114.039663&quot;), list(lat = &quot;36.080&quot;, lon = &quot;-114.544&quot;), list(lat = &quot;35.133&quot;, lon = &quot;-114.542&quot;), list(lat = &quot;35.00208499998&quot;, lon = &quot;-114.63288&quot;), list(lat = &quot;35.00208499998&quot;, lon = &quot;-114.63323&quot;), list(lat = &quot;38.999&quot;, lon = &quot;-120.005729004&quot;), list(lat = &quot;42.002207&quot;, lon = &quot;-120.005729004&quot;) ), # ... ), # ... ) geog_coverage [Optional ; Not repeatable ; String] Information on the geographic coverage of the study. This includes the total geographic scope of the data, and any additional levels of geographic coding provided in the variables. Typical entries will be “National coverage”, “Urban areas”, “Rural areas”, “State of …”, “Capital city”, etc. This does not describe where the data were collected; it describes which area the data are representative of. This means for example that a sample survey could be declared as having a national coverage even if some districts of the country where not included in the sample, as long as the sample is nationally representative. geog_coverage_notes [Optional ; Not repeatable ; String] Additional information on the geographic coverage of the study entered as a free text field. geog_unit [Optional ; Not repeatable ; String] Describes the levels of geographic aggregation covered by the data. Particular attention must be paid to include information on the lowest geographic area for which data are representative. my_ddi &lt;- list( doc_desc = list( # ... ), study_desc = list( # ... , study_info = list( # ... , geog_coverage = &quot;National coverage&quot;, geog_coverage_notes = &quot;The sample covered the urban and rural areas of all provinces of the country. Some areas of province X were however not accessible due to civil unrest.&quot;, geog_unit = &quot;The survey provides data representative at the national, provincial and district levels. For the capital city, the data are representative at the ward level.&quot;, # ... ), # ... ) analysis_unit [Optional ; Not repeatable ; String] A study can have multiple units of analysis. This field will list the various units that can be analyzed. For example, a Living Standard Measurement Study (LSMS) may have collected data on households and their members (individuals), on dwelling characteristics, on prices in local markets, on household enterprises, on agricultural plots, and on characteristics of health and education facilities in the sample areas. my_ddi &lt;- list( doc_desc = list( # ... ), study_desc = list( # ... , study_info = list( # ... , analysis_unit = &quot;Data were collected on households, individuals (household members), dwellings, commodity prices at local markets, household enterprises, agricultural plots, and characteristics of health and education facilities.&quot; # ... ), # ... ) universe [Optional ; Not repeatable ; String] The universe is the group of persons (or other units of observations, like dwellings, facilities, or other) that are the object of the study and to which any analytic results refer. The universe will rarely cover the entire population of the country. Sample household surveys, for example, may not cover homeless, nomads, diplomats, community households. Population censuses do not cover diplomats. Facility surveys may be limited to facilities of a certain type (e.g., public schools). Try to provide the most detailed information possible on the population covered by the survey/census, focusing on excluded categories of the population. For household surveys, age, nationality, and residence commonly help to delineate a given universe, but any of a number of factors may be involved, such as sex, race, income, veteran status, criminal convictions, etc. In general, it should be possible to tell from the description of the universe whether a given individual or element (hypothetical or real) is a member of the population under study. my_ddi &lt;- list( doc_desc = list( # ... ), study_desc = list( # ... , study_info = list( # ... , universe = &quot;The survey covered all de jure household members (usual residents), all women aged 15-49 years resident in the household, and all children aged 0-4 years (under age 5) resident in the household.&quot;, # ... ), # ... ) data_kind [Optional ; Not repeatable ; String] This field describes the main type of microdata generated by the study: survey data, census/enumeration data, aggregate data, clinical data, event/transaction data, program source code, machine-readable text, administrative records data, experimental data, psychological test, textual data, coded textual, coded documents, time budget diaries, observation data/ratings, process-produced data, etc. A controlled vocabulary should be used as this information may be used to build facets (filters) in a catalog user interface. my_ddi &lt;- list( doc_desc = list( # ... ), study_desc = list( # ... , study_info = list( # ... , data_kind = &quot;Sample survey data&quot;, # ... ), # ... ) notes [Optional ; Not repeatable ; String] This element is provided to document any specific situations, observations, or events that occurred during data collection. Consider stating such items like: Was a training of enumerators held? (elaborate) Was a pilot survey conducted? Did any events have a bearing on the data quality? (elaborate) How long did an interview take on average? In what language(s) were the interviews conducted? Were there any corrective actions taken by management when problems occurred in the field? my_ddi &lt;- list( doc_desc = list( # ... ), study_desc = list( # ... , study_info = list( # ... , notes = &quot;The pre-test for the survey took place from August 15, 2006 - August 25, 2006 and included 14 interviewers who would later become supervisors for the main survey. Each interviewing team comprised of 3-4 female interviewers (no male interviewers were used due to the sensitivity of the subject matter), together with a field editor and a supervisor and a driver. A total of 52 interviewers, 14 supervisors and 14 field editors were used. Training of interviewers took place at the headquarters of the Statistics Office from July 1 to July 12, 2006. Data collection took place over a period of about 6 weeks from September 2, 2006 until October 17, 2006. Interviewing took place everyday throughout the fieldwork period, although interviewing teams were permitted to take one day off per week. Interviews averaged 35 minutes for the household questionnaire (excluding water testing), 23 minutes for the women&#39;s questionnaire, and 27 for the under five children&#39;s questionnaire (excluding the anthropometry). Interviews were conducted primarily in English, but occasionally used local translation. Six staff members of the Statistics Office provided overall fieldwork coordination and supervision.&quot; # ... ), # ... ) quality_statement [Optional ; Not Repeatable] This section lists the specific standards complied with during the execution of this study, and provides the option to formulate a general statement on the quality of the data. Any known quality issue should be reported here. Such issues are better reported by the data producer or curator, not left to the secondary analysts to discover. Transparency in reporting quality issues will increase credibility and reputation of the data provider. &quot;quality_statement&quot;: { &quot;compliance_description&quot;: &quot;string&quot;, &quot;standards&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;producer&quot;: &quot;string&quot; } ], &quot;other_quality_statement&quot;: &quot;string&quot; } compliance_description [Optional ; Not repeatable ; String] A statement on compliance with standard quality assessment procedures. The list of these standards can be documented in the next element, standards. standards [Optional ; Repeatable] An itemized list of quality standards complied with during the execution of the study. name [Optional ; Not repeatable ; String] The name of the quality standard, if such a standard was used. Include the date when the standard was published, and the version of the standard with which the study is compliant, and the “URI” attribute includes . producer [Optional ; Not repeatable ; String] The producer of the quality standard mentined in name. other_quality_statement [Optional ; Not repeatable ; String] Any additional statement on the quality of the data, entered as free text. This can be independent of any particular quality standard. @@@ complete the example my_ddi &lt;- list( doc_desc = list( # ... ), study_desc = list( # ... , study_info = list( # ... , quality_statement = list( compliance_description = &quot;&quot;, standards = list( list(name = &quot;&quot;, producer = &quot;&quot;) ), other_quality_statement = &quot;&quot; ), # ... ), # ... ) ex_post_evaluation [Optional ; Not Repeatable] Ex-post evaluations are frequently done within large statistical or research organizations, in particular when a study is intended to be repeated. Such evaluations are recommended by the Generic Statistical Business Process Model (GSBPM). This section of the schema is used to describe the evaluation procedures and their outcomes. &quot;ex_post_evaluation&quot;: { &quot;completion_date&quot;: &quot;string&quot;, &quot;type&quot;: &quot;string&quot;, &quot;evaluator&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;affiliation&quot;: &quot;string&quot;, &quot;abbr&quot;: &quot;string&quot;, &quot;role&quot;: &quot;string&quot; } ], &quot;evaluation_process&quot;: &quot;string&quot;, &quot;outcomes&quot;: &quot;string&quot; } completion_date [Optional ; Not repeatable ; String] The date the ex-post evaluation was completed. type [Optional ; Not Repeatable] The type attribute identifies the type of evaluation with or without the use of a controlled vocabulary. evaluator [Optional ; Repeatable] The evaluator element identifies the person(s) and/or organization(s) involved in the evaluation. name [Optional ; Not repeatable ; String] The name of the person or organization involved in the evaluation. affiliation [Optional ; Not repeatable ; String] The affiliation of the individual or organization mentioned in name. abbr [Optional ; Not repeatable ; String] An abbreviation for the organization mentioned in name. role [Optional ; Not repeatable ; String] The specific role played by the individual or organization mentioned in name in the evaluation process. evaluation_process [Optional ; Not repeatable ; String] A description of the evaluation process. This may include information on the dates the evaluation was conducted, cost/budget, relevance, institutional or legal arrangements, et. outcomes [Optional ; Not repeatable ; String] A description of the outcomes of the evaluation. It may include a reference to an evaluation report. my_ddi &lt;- list( doc_desc = list( # ... ), study_desc = list( # ... , study_info = list( # ... , ex_post_evaluation = list( completion_date = &quot;2020-04-30&quot;, type = &quot;Independent evaluation requested by the survey sponsor&quot;, evaluator = list( list(name = &quot;John Doe&quot;, affiliation = &quot;Alpha Consulting, Ltd.&quot;, abbr = &quot;AC&quot;, role = &quot;Evaluation of the sampling methodology&quot;), list(name = &quot;Jane Smith&quot;, affiliation = &quot;Beta Statistical Services, Ltd.&quot;, abbr = &quot;BSS&quot;, role = &quot;Evaluation of the data processing and analysis&quot;) ), evaluation_process = &quot;In-depth review of pre-collection and collection procedures&quot;, outcomes = &quot;The following steps were highly effective in increasing response rates.&quot; ) ), # ... ) 5.4.2.14 Study development study_development [Optional ; Not repeatable] &quot;study_development&quot;: { &quot;development_activity&quot;: [ { &quot;activity_type&quot;: &quot;string&quot;, &quot;activity_description&quot;: &quot;string&quot;, &quot;participants&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;affiliation&quot;: &quot;string&quot;, &quot;role&quot;: &quot;string&quot; } ], &quot;resources&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;origin&quot;: &quot;string&quot;, &quot;characteristics&quot;: &quot;string&quot; } ], &quot;outcome&quot;: &quot;string&quot; } ] } This section is used to describe the process that led to the production of the final output of the study, from its inception/design to the dissemination of the final output. development_activity [Optional ; Repeatable] @@@@ missing in schema; must be added then screenshot taken Each activity will be documented separately. The Generic Statistical Business Process Model (GSBPM) provides a useful decomposition of such a process, which can be used to list the activities to be described. This is a repeatable set of metadata elements; each activity should be documented separately. activity_type [Optional ; Not repeatable ; String] The type of activity. A controlled vocabulary can be used, possibly comprising the main components of the GSBPM: {Needs specification, Design, Build, Collect, Process, Analyze, Disseminate, Evaluate}). activity_description [Optional ; Not repeatable ; String] A brief description of the activity. participants [Optional ; Repeatable] A list of participants (persons or organizations) in the activity. This is a repeatable set of elements; each participant can be documented separately. name [Optional ; Not repeatable ; String] Name of the participating person or organization. affiliation [Optional ; Not repeatable ; String] Affiliation of the person or organization mentioned in name. role [Optional ; Not repeatable ; String] Specific role (participation) of the person or organization mentioned in name. resources [Optional ; Not Repeatable] A description of the data sources and other resources used to implement the activity. name [Optional ; Not repeatable ; String] The name of the resource. origin [Optional ; Not repeatable ; String] The origin of the resource mentioned in name. characteristics [Optional ; Not repeatable ; String] The characteristics of the resource mentioned in name. outcome [Optional ; Not repeatable ; String] Description of the main outcome of the activity. my_ddi &lt;- list( doc_desc = list( # ... ), study_desc = list( # ... , study_info = list( # ... ), study_development = list( development_activity = list( list( activity_type = &quot;Questionnaire design and piloting&quot;, activity_description = &quot;&quot;, participants = list( list(name = &quot;&quot;, affiliation = &quot;&quot;, role = &quot;&quot;), list(name = &quot;&quot;, affiliation = &quot;&quot;, role = &quot;&quot;), list(name = &quot;&quot;, affiliation = &quot;&quot;, role = &quot;&quot;) ), resources = list( list(name = &quot;&quot;, origin = &quot;&quot;, characteristics = &quot;&quot;) ), outcome = &quot;&quot; ), list( activity_type = &quot;Interviewers training&quot;, activity_description = &quot;&quot;, participants = list( list(name = &quot;&quot;, affiliation = &quot;&quot;, role = &quot;&quot;), list(name = &quot;&quot;, affiliation = &quot;&quot;, role = &quot;&quot;), list(name = &quot;&quot;, affiliation = &quot;&quot;, role = &quot;&quot;) ), resources = list( list(name = &quot;&quot;, origin = &quot;&quot;, characteristics = &quot;&quot;) ), outcome = &quot;&quot; ) ) ), # ... ) 5.4.2.15 Method method [Optional ; Not Repeatable] This section describes the methodology and processing involved in a study. &quot;method&quot;: { &quot;data_collection&quot;: {}, &quot;method_notes&quot;: &quot;string&quot;, &quot;analysis_info&quot;: {}, &quot;study_class&quot;: null, &quot;data_processing&quot;: [], &quot;coding_instructions&quot;: [] } data_collection [Optional ; Not Repeatable] A block of metadata elements used to describe the methodology employed in a data collection. This includes the design of the questionnaire, sampling, supervision of field work, and other characteristics of the data collection phase. &quot;data_collection&quot;: { &quot;time_method&quot;: &quot;string&quot;, &quot;data_collectors&quot;: [], &quot;collector_training&quot;: [], &quot;frequency&quot;: &quot;string&quot;, &quot;sampling_procedure&quot;: &quot;string&quot;, &quot;sample_frame&quot;: {}, &quot;sampling_deviation&quot;: &quot;string&quot;, &quot;coll_mode&quot;: null, &quot;research_instrument&quot;: &quot;string&quot;, &quot;instru_development&quot;: &quot;string&quot;, &quot;instru_development_type&quot;: &quot;string&quot;, &quot;sources&quot;: [], &quot;coll_situation&quot;: &quot;string&quot;, &quot;act_min&quot;: &quot;string&quot;, &quot;control_operations&quot;: &quot;string&quot;, &quot;weight&quot;: &quot;string&quot;, &quot;cleaning_operations&quot;: &quot;string&quot; } time_method [Optional ; Not repeatable ; String] The time method or time dimension of the data collection. A controlled vocabulary can be used. The entries for this element may include “panel survey”, “cross-section”, “trend study”, or “time-series”. data_collectors [Optional ; Not Repeatable] The entity (individual, agency, or institution) responsible for administering the questionnaire or interview or compiling the data. &quot;data_collectors&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;affiliation&quot;: &quot;string&quot;, &quot;abbr&quot;: &quot;string&quot;, &quot;role&quot;: &quot;string&quot; } ] name [Optional ; Not repeatable ; String] In most cases, we will record here the name of the agency, not the name of interviewers. Only in the case of very small-scale surveys, with a very limited number of interviewers, the name of persons will be included as well. affiliation [Optional ; Not repeatable ; String] The affiliation of the data collector mentioned in name. abbr [Optional ; Not repeatable ; String] The abbreviation given to the agency mentioned in name. role [Optional ; Not repeatable ; String] The specific role of the person or agency mentioned in name. collector_training [Optional ; Repeatable] Describes the training provided to data collectors including interviewer training, process testing, compliance with standards etc. This set of elements is repeatable, to capture different aspects of the training process. &quot;collector_training&quot;: [ { &quot;type&quot;: &quot;string&quot;, &quot;training&quot;: &quot;string&quot; } ] type [Optional ; Not repeatable ; String] The type of training being described. For example, “Training of interviewers”, “Training of controllers”, “Training of cartographers”, “Training on the use of tablets for data collection”, etc. training [Optional ; Not repeatable ; String] A brief description of the training. This may include information on the dates and duration, audience, location, content, trainers, issues, etc. frequency [Optional ; Not repeatable ; String] For data collected at more than one point in time, the frequency with which the data were collected. sampling_procedure [Optional ; Not repeatable ; String] This field only applies to sample surveys. It describes the type of sample and sample design used to select the survey respondents to represent the population. This section should include summary information that includes (but is not limited to): sample size (expected and actual) and how the sample size was decided; level of representation of the sample; sample frame used, and listing exercise conducted to update it; sample selection process (e.g., probability proportional to size or over sampling); stratification (implicit and explicit); design omissions in the sample; strategy for absent respondents/not found/refusals (replacement or not). Detailed information on the sample design is critical to allow users to adequately calculate sampling errors and confidence intervals for their estimates. To do that, they will need to be able to clearly identify the variables in the dataset that represent the different levels of stratification and the primary sampling unit (PSU). In publications and reports, the description of sampling design often contains complex formulas and symbols. As the XML and JSON formats used to store the metadata are plain text files, they cannot contain these complex representations. You may however provide references (title/author/date) to documents where such detailed descriptions are provided, and make sure that the documents (or links to the documents) are provided in the catalog where the survey metadata are published. sample_frame [Optional ; Not Repeatable] A description of the sample frame used for identifying the population from which the sample was taken. For example, a telephone book may be a sample frame for a phone survey. Or the listing of enumeration areas (EAs) of a population census can provide a sample frame for a household survey. In addition to the name, label and text describing the sample frame, this structure lists who maintains the sample frame, the period for which it is valid, a use statement, the universe covered, the type of unit contained in the frame as well as the number of units available, the reference period of the frame and procedures used to update the frame. &quot;sample_frame&quot;: { &quot;name&quot;: &quot;string&quot;, &quot;valid_period&quot;: [ { &quot;event&quot;: &quot;string&quot;, &quot;date&quot;: &quot;string&quot; } ], &quot;custodian&quot;: &quot;string&quot;, &quot;universe&quot;: &quot;string&quot;, &quot;frame_unit&quot;: { &quot;is_primary&quot;: null, &quot;unit_type&quot;: &quot;string&quot;, &quot;num_of_units&quot;: &quot;string&quot; }, &quot;reference_period&quot;: [ { &quot;event&quot;: &quot;string&quot;, &quot;date&quot;: &quot;string&quot; } ], &quot;update_procedure&quot;: &quot;string&quot; } name [Optional ; Not Repeatable] The name (title) of the sample frame. valid_period [Optional ; Repeatable] Defines a time period for the validity of the sampling frame, using a list of events and dates. event [Optional ; Not repeatable ; String] The event can for example be start or end. date [Optional ; Not repeatable ; String] The date corresponding to the event, entered in ISO 8601 format: YYYY-MM-DD. custodian [ Optional ; Not Repeatable] Custodian identifies the agency or individual responsible for creating and/or maintaining the sample frame. universe [Optional ; Not Repeatable] A description of the universe of population covered by the sample frame. Age,nationality, and residence commonly help to delineate a given universe, but any of a number of factors may be involved, such as sex, race, income, etc. The universe may consist of elements other than persons, such as housing units, court cases, deaths, countries, etc. In general, it should be possible to tell from the description of the universe whether a given individual or element (hypothetical or real) is included in the sample frame. frame_unit [Optional ; Not Repeatable] Provides information about the sampling frame unit. is_primary [Optional ; Boolean ; Not Repeatable] This boolean attribute (true/false) indicates whether the unit is primary or not. unit_type [Optional ; Not repeatable ; String] The type of the sampling frame unit (for example “household”, or “dwelling”). num_of_units [Optional ; Not Repeatable ; String] The number of units in the sample frame, possibly with information on its distribution (e.g. by urban/rural, province, or other). reference_period [Optional ; Not Repeatable] Indicates the period of time in which the sampling frame was actually used for the study in question. Use ISO 8601 date format to enter the relevant date(s). event [Optional ; Not repeatable ; String] Indicates the type of event that the date corresponds to, e.g., “start”, “end”, “single”. date [Optional ; Not repeatable ; String] The relevant date in ISO 8601 date/time format. update_procedure [Optional ; Not repeatable ; String] This element is used to describe how and with what frequency the sample frame is updated. For example: “The lists and boundaries of enumeration areas are updated every ten years at the occasion of the population census cartography work. Listing of households in enumeration areas are updated as and when needed, based on their selection in survey samples.” sampling_deviation [Optional ; Not repeatable ; String] Sometimes the reality of the field requires a deviation from the sampling design (for example due to difficulty to access to zones due to weather problems, political instability, etc). If for any reason, the sample design has deviated, this can be reported here. This element will provide information indicating the correspondence as well as the possible discrepancies between the sampled units (obtained) and available statistics for the population (age, sex-ratio, marital status, etc.) as a whole. coll_mode [Optional ; Repeatable ; String] The mode of data collection is the manner in which the interview was conducted or information was gathered. Ideally, a controlled vocabulary will be used to constrain the entries in this field (which could include items like “telephone interview”, “face-to-face paper and pen interview”, “face-to-face computer-assisted interviews (CAPI)”, “mail questionnaire”, “computer-aided telephone interviews (CATI)”, “self-administered web forms”, “measurement by sensor”, and others. This is a repeatable field, as some data collection activities implement multi-mode data collection (for example, a population census can offer respondents the options to submit information via web forms, telephone interviews, mailed forms, or face-to-face interviews. Note that in the API description (see screenshot above), the element is described as having type “null”, not {}. This is due to the fact that the element can be entered either as a list (repeatable element) or as a string. research_instrument [Optional ; Not repeatable ; String] The research instrument refers to the questionnaire or form used for collecting data. The following should be mentioned: - List of questionnaires and short description of each (all questionnaires must be provided as External Resources) - In what language(s) was/were the questionnaire(s) available? - Information on the questionnaire design process (based on a previous questionnaire, based on a standard model questionnaire, review by stakeholders). If a document was compiled that contains the comments provided by the stakeholders on the draft questionnaire, or a report prepared on the questionnaire testing, a reference to these documents can be provided here. instru_development [Optional ; Not repeatable ; String] Describe any development work on the data collection instrument. This may include a description of the review process, standards followed, and a list of agencies/people consulted. instru_development_type [Optional ; Repeatable ; String] The instrument development type. This element will be used when a pre-defined list of options (controlled vocabulary) is available. sources [Optional ; Repeatable] A description of sources used for developing the methodology of the data collection. &quot;sources&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;origin&quot;: &quot;string&quot;, &quot;characteristics&quot;: &quot;string&quot; } ] name [Optional ; Not repeatable ; String] The name and other information on the source. For example, “United States Internal Revenue Service Quarterly Payroll File” origin [Optional ; Not repeatable ; String] For historical materials, information about the origin(s) of the sources and the rules followed in establishing the sources should be specified. This may not be relevant to survey data. characteristics [Optional ; Not repeatable ; String] Assessment of characteristics and quality of source material. This may not be relevant to survey data. coll_situation [Optional ; Not repeatable ; String] A description of noteworthy aspects of the data collection situation. Includes information on factors such as cooperativeness of respondents, duration of interviews, number of call-backs, etc. act_min [Optional ; Not repeatable ; String] A summary of actions taken to minimize data loss. This includes information on actions such as follow-up visits, supervisory checks, historical matching, estimation, etc. Note that this element does not have to include detailed information on response rates, as a specific metadata element is provided for that purpose in section analysis_info / response_rate (see below). control_operations [Optional ; Not repeatable ; String] This element will provide information on the oversight of the data collection, i.e. on methods implemented to facilitate data control performed by the primary investigator or by the data archive. weight [Optional ; Not repeatable ; String] This field only applies to sample surveys. The use of sampling procedures may make it necessary to apply weights to produce accurate statistical results. Describe here the criteria for using weights in analysis of a collection, and provide a list of variables used as weighting coefficient. If more than one variable is a weighting variable, describe how these variables differ from each other and what the purpose of each one of them is. cleaning_operations [Optional ; Not repeatable ; String] A description of the methods used to clean or edit the data, e.g., consistency checking, wild code checking, etc. The data editing should contain information on how the data was treated or controlled for in terms of consistency and coherence. This item does not concern the data entry phase but only the editing of data whether manual or automatic. It should provide answers to questions like: Was a hot deck or a cold deck technique used to edit the data? Were corrections made automatically (by program), or by visual control of the questionnaire? What software was used? If materials are available (specifications for data editing, report on data editing, programs used for data editing), they should be listed here and provided as external resources in data catalogs (the best documentation of data editing consists of well-documented reproducible scripts). Example for the data_collection section: ```r my_ddi &lt;- list( doc_desc = list( # ... ), study_desc = list( # ... , study_info = list( # ... ), study_development = list( # ... ), method = list( data_collection = list( time_method = &quot;cross-section&quot;, data_collectors = list( list(name = &quot;Staff from the Central Statistics Office&quot;, abbr = &quot;NSO&quot;, affiliation = &quot;Ministry of Planning&quot;) ), collector_training = list( list( type = &quot;Training of interviewers&quot;, training = &quot;72 staff (interviewers) were trained from [date] to [date] at the NSO headquarters. The training included 2 days of field work.&quot; ), list( type = &quot;Training of controllers and supervisors&quot;, training = &quot;A 3-day training of 10 controlers and 2 supervisors was organized from [date] to [date]. The controllers and supervisors had previously participated in the interviewer training.&quot; ) ), sampling_procedure = &quot;A list of 500 Enumeration Areas (EAs) were randomly selected from the sample frame, 300 in urban areas and 200 in rural areas. In each selected EA, 10 households were then randomly selected. 5000 households were thus selected for the sample (3000 urban and 2000 rural). The distribution of the sample (households) by province is as follows: - Province A: Total: 1800 Urban: 1000 Rural: 800 - Province B: Total: 1200 Urban: 500 Rural: 700 - Province C: Total: 2000 Urban: 1500 Rural: 500&quot;, sample_frame = list( name = &quot;Listing of Enumeration Areas (EAs) from the Population and Housing Census 2011&quot;, custodian = &quot;National Statistics Office&quot;, universe = &quot;The sample frame contains 25365 EAs covering the entire territory of the country. EAs contain an average of 400 households in rural areas, and 580 in urban areas. &quot;, frame_unit = list( is_primary = true, unit_type = &quot;Enumeration areas (EAs)&quot;, num_of_units = &quot;25365, including 15100 in urban areas, and 10265 in rural areas.&quot; ), update_procedure = &quot;The sample frame only provides EAs; a full household listing was conducted in each selected EA to provide an updated list of households.&quot; ), sampling_deviation = &quot;Due to floods in two sampled rural in province A, two EAs could not be reached. The sample was thus reduced to 4980 households. The response rate was 90%, so the actual final sample size was 4482 households.&quot;, coll_mode = &quot;Face-to-face interviews, conducted using tablets (CAPI)&quot;, research_instrument = &quot;The questionnaires for the Generic MICS were structured questionnaires based on the MICS3 Model Questionnaire with some modifications and additions. A household questionnaire was administered in each household, which collected various information on household members including sex, age, relationship, and orphanhood status. The household questionnaire includes household characteristics, support to orphaned and vulnerable children, education, child labour, water and sanitation, household use of insecticide treated mosquito nets, and salt iodization, with optional modules for child discipline, child disability, maternal mortality and security of tenure and durability of housing. In addition to a household questionnaire, questionnaires were administered in each household for women age 15-49 and children under age five. For children, the questionnaire was administered to the mother or caretaker of the child. The women&#39;s questionnaire include women&#39;s characteristics, child mortality, tetanus toxoid, maternal and newborn health, marriage, polygyny, female genital cutting, contraception, and HIV/AIDS knowledge, with optional modules for unmet need, domestic violence, and sexual behavior. The children&#39;s questionnaire includes children&#39;s characteristics, birth registration and early learning, vitamin A, breastfeeding, care of illness, malaria, immunization, and anthropometry, with an optional module for child development. The questionnaires were developed in English from the MICS3 Model Questionnaires and translated into local languages. After an initial review the questionnaires were translated back into English by an independent translator with no prior knowledge of the survey. The back translation from the local language version was independently reviewed and compared to the English original. Differences in translation were reviewed and resolved in collaboration with the original translators. The English and local language questionnaires were both piloted as part of the survey pretest.&quot;, instru_development = &quot;The questionnaire was pre-tested with split-panel tests, as well as an analysis of non-response rates for individual items, and response distributions.&quot;, coll_situation = &quot;Floods in province A made access to two selected enumeration areas impossible.&quot;, act_min = &quot;Local authorities and local staff from the Ministry of Health contributed to an awareness campaign, which contributed to achieving a response rate of 90%.&quot;, control_operations = &quot;Interviewing was conducted by teams of interviewers. Each interviewing team comprised of 3-4 female interviewers, a field editor and a supervisor, and a driver. Each team used a 4 wheel drive vehicle to travel from cluster to cluster (and where necessary within cluster). The role of the supervisor was to coordinate field data collection activities, including management of the field teams, supplies and equipment, finances, maps and listings, coordinate with local authorities concerning the survey plan and make arrangements for accommodation and travel. Additionally, the field supervisor assigned the work to the interviewers, spot checked work, maintained field control documents, and sent completed questionnaires and progress reports to the central office. The field editor was responsible for validating questionnaires at the end of the day when the data form interviews were transferred to their laptops. This included checking for missed questions, skip errors, fields incorrectly completed, and checking for inconsistencies in the data. The field editor also observed interviews and conducted review sessions with interviewers. Responsibilities of the supervisors and field editors are described in the Instructions for Supervisors and Field Editors, together with the different field controls that were in place to control the quality of the fieldwork. Field visits were also made by a team of central staff on a periodic basis during fieldwork. The senior staff of NSO also made 3 visits to field teams to provide support and to review progress.&quot;, weight = &quot;Sample weights were calculated for each of the data files. Sample weights for the household data were computed as the inverse of the probability of selection of the household, computed at the sampling domain level (urban/rural within each region). The household weights were adjusted for non-response at the domain level, and were then normalized by a constant factor so that the total weighted number of households equals the total unweighted number of households. The household weight variable is called HHWEIGHT and is used with the HH data and the HL data. Sample weights for the women&#39;s data used the un-normalized household weights, adjusted for non-response for the women&#39;s questionnaire, and were then normalized by a constant factor so that the total weighted number of women&#39;s cases equals the total unweighted number of women&#39;s cases. Sample weights for the children&#39;s data followed the same approach as the women&#39;s and used the un-normalized household weights, adjusted for non-response for the children&#39;s questionnaire, and were then normalized by a constant factor so that the total weighted number of children&#39;s cases equals the total unweighted number of children&#39;s cases.&quot;, cleaning_operations = &quot;Data editing took place at a number of stages throughout the processing, including: a) Office editing and coding b) During data entry c) Structure checking and completenes d) Secondary editing e) Structural checking of SPSS data files Detailed documentation of the editing of data can be found in the &#39;Data processing guidelines&#39; document provided as an external resource.&quot; ) ) ), # ... ) ) ``` method_notes [Optional ; Not repeatable ; String] This element is provided to capture any additional relevant information on the data collection methodology, which could not fit in the previous metadata elements. analysis_info [Optional ; Not Repeatable] This block of elements is used to organize information related to data quality and appraisal. &quot;analysis_info&quot;: { &quot;response_rate&quot;: &quot;string&quot;, &quot;sampling_error_estimates&quot;: &quot;string&quot;, &quot;data_appraisal&quot;: &quot;string&quot; } response_rate [Optional ; Not repeatable ; String] The response rate is the percentage of sample units that participated in the survey based on the original sample size. Omissions may occur due to refusal to participate, impossibility to locate the respondent, or other reason. This element is used to provide a narrative description of the response rate, possibly by stratum or other criteria, and if possible with an identification of possible causes. If information is available on the causes of non-response (refusal/not found/other), it can be reported here. This field can also be used to describe non-responses in population censuses. sampling_error_estimates [Optional ; Not repeatable ; String] Sampling errors are intended to measure how precisely one can estimate a population value from a given sample. For sampling surveys, it is good practice to calculate and publish sampling error. This field is used to provide information on these calculations (not to provide the sampling errors themselves, which should be made available in publications or reports). Information can be provided on which ratios/indicators have been subjected to the calculation of sampling errors, and on the software used for computing the sampling error. Reference to a report or other document where the results can be found can also be provided. data_appraisal [Optional ; Not repeatable ; String] This section is used to report any other action taken to assess the reliability of the data, or any observations regarding data quality. Describe here issues such as response variance, interviewer and response bias, question bias, etc. For a population census, this can include information on the main results of a post enumeration survey (a report should be provided in external resources and mentioned here); it can also include relevant comparisons with data from other sources that can be used as benchmarks. my_ddi &lt;- list( doc_desc = list( # ... ), study_desc = list( # ... , study_info = list( # ... ), study_development = list( # ... ), method = list( # ... , analysis_info = list( response_rate = &quot;Of these, 4996 were occupied households and 4811 were successfully interviewed for a response rate of 96.3%. Within these households, 7815 eligible women aged 15-49 were identified for interview, of which 7505 were successfully interviewed (response rate 96.0%), and 3242 children aged 0-4 were identified for whom the mother or caretaker was successfully interviewed for 3167 children (response rate 97.7%). These give overall response rates (household response rate times individual response rate) for the women&#39;s interview of 92.5% and for the children&#39;s interview of 94.1%.&quot;, sampling_error_estimates = &quot;Estimates from a sample survey are affected by two types of errors: 1) non-sampling errors and 2) sampling errors. Non-sampling errors are the results of mistakes made in the implementation of data collection and data processing. Numerous efforts were made during implementation of the 2005-2006 MICS to minimize this type of error, however, non-sampling errors are impossible to avoid and difficult to evaluate statistically. If the sample of respondents had been a simple random sample, it would have been possible to use straightforward formulae for calculating sampling errors. However, the 2005-2006 MICS sample is the result of a multi-stage stratified design, and consequently needs to use more complex formulae. The SPSS complex samples module has been used to calculate sampling errors for the 2005-2006 MICS. This module uses the Taylor linearization method of variance estimation for survey estimates that are means or proportions. This method is documented in the SPSS file CSDescriptives.pdf found under the Help, Algorithms options in SPSS. Sampling errors have been calculated for a select set of statistics (all of which are proportions due to the limitations of the Taylor linearization method) for the national sample, urban and rural areas, and for each of the five regions. For each statistic, the estimate, its standard error, the coefficient of variation (or relative error - the ratio between the standard error and the estimate), the design effect, and the square root design effect (DEFT - the ratio between the standard error using the given sample design and the standard error that would result if a simple random sample had been used), as well as the 95 percent confidence intervals (+/-2 standard errors). Details of the sampling errors are presented in the sampling errors appendix to the report and in the sampling errors table presented in the external resources.&quot;, data_appraisal = &quot;A series of data quality tables and graphs are available to review the quality of the data and include the following: - Age distribution of the household population - Age distribution of eligible women and interviewed women - Age distribution of eligible children and children for whom the mother or caretaker was interviewed - Age distribution of children under age 5 by 3 month groups - Age and period ratios at boundaries of eligibility - Percent of observations with missing information on selected variables - Presence of mother in the household and person interviewed for the under 5 questionnaire - School attendance by single year age - Sex ratio at birth among children ever born, surviving and dead by age of respondent - Distribution of women by time since last birth - Scatter plot of weight by height, weight by age and height by age - Graph of male and female population by single years of age - Population pyramid The results of each of these data quality tables are shown in the appendix of the final report. The general rule for presentation of missing data in the final report tabulations is that a column is presented for missing data if the percentage of cases with missing data is 1% or more. Cases with missing data on the background characteristics (e.g. education) are included in the tables, but the missing data rows are suppressed and noted at the bottom of the tables in the report.&quot; ), # ... ) # ... ) study_class [Optional ; Repeatable ; String] This element can be used to give the data archive’s class or study status number, which indicates the processing status of the study. But it can also be used as an element to indicate the type of study, based on a controlled vocabulary. The element is repeatable, allowing one study to belong to more than one class. Note that in the API description (see screenshot above), the element is described as having type “null”, not {}. This is due to the fact that the element can be entered either as a list (repeatable element) or as a string. data_processing [Optional ; Repeatable] @@@@ Improve definition of elements &quot;data_processing&quot;: [ { &quot;type&quot;: &quot;string&quot;, &quot;description&quot;: &quot;string&quot; } ] This element is used to describe how data were electronically captured (e.g., entered in the field, in a centralized manner by data entry clerks, captured electronically using tablets and a CAPI application, via web forms, etc.). Information on devices and software used for data capture can also be provided here. Other data processing procedures not captured elsewhere in the documentation can be described here (tabulation, etc.) - type [Optional ; Not repeatable ; String] The type attribute supports better classification of this activity, including the optional use of a controlled vocabulary. The vocabulary could include options like “data capture”, “data validation”, “variable derivation”, “tabulation”, “data visualizations”, anonymization“, ”documentation”, etc. - description [Optional ; Repeatable ; String] A description of a data processing task. coding_instructions [Optional ; Repeatable] The coding_instructions elements can be used to describe specific coding instructions used in data processing, cleaning, or tabulation. Providing this information may however be complex and very tedious for datasets with a significant number of variables, where hundreds of commands are used to process the data. An alternative option, preferable in many cases, will be to publish reproducible data editing, tabulation and analysis scripts together with the data, as related resources. &quot;coding_instructions&quot;: [ { &quot;related_processes&quot;: &quot;string&quot;, &quot;type&quot;: &quot;string&quot;, &quot;txt&quot;: &quot;string&quot;, &quot;command&quot;: &quot;string&quot;, &quot;formal_language&quot;: &quot;string&quot; } ] related_processes [Optional ; Not repeatable ; String] The related_processes links a coding instruction to one or more processes such as “data editing”, “recoding”, “imputations and derivations”, “tabulation”, etc. type [Optional ; Not repeatable ; String] The “type” attribute supports the classification of this activity (e.g. “topcoding”). A controlled vocabulary can be used. txt [Optional ; Not repeatable ; String] A description of the code/command, in a human readable form. command [Optional ; Not repeatable ; String] The command code for the coding instruction. formal_language [Optional ; Not repeatable ; String] The language of the command code, e.g. “Stata”, “R”, “SPSS”, “SAS”, “Python”, etc. my_ddi &lt;- list( doc_desc = list( # ... ), study_desc = list( # ... , study_info = list( # ... ), study_development = list( # ... ), method = list( # ... , study_class = &quot;&quot;, data_processing = list( list(type = &quot;Data capture&quot;, description = &quot;Data collection was conducted using tablets and Survey Solutions software. Multiple quality controls and validations are embedded in the questionnaire.&quot;), list(type = &quot;Batch data editing&quot;, description = &quot;Data editing was conducted in batch using a R script, including techniques of hot deck, imputations, and recoding.&quot;), list(type = &quot;Tabulation and visualizations&quot;, description = &quot;The 25 tables and the visualizations published in the survey report were produced using Stata (script &#39;tabulation.do&#39;).&quot;), list(type = &quot;Anonymization&quot;, description = &quot;An anonymized version of the dataset, published as a public use file, was created using the R package sdcMicro.&quot;) ), coding_instructions = list( list(related_processes = &quot;&quot;, type = &quot;&quot;, txt = &quot;Suppression of observations with ...&quot;, command = &quot;&quot;, formal_language = &quot;Stata&quot;), list(related_processes = &quot;&quot;, type = &quot;&quot;, txt = &quot;Top coding age&quot;, command = &quot;&quot;, formal_language = &quot;Stata&quot;), list(related_processes = &quot;&quot;, type = &quot;&quot;, txt = &quot;&quot;, command = &quot;&quot;, formal_language = &quot;Stata&quot;) ) ) # ... ) 5.4.2.16 Data access data_access [Optional ; Not Repeatable] This section describes the access conditions and terms of use for the dataset. This set of elements should be used when the access conditions are well-defined and are unlikely to change. An alternative option is to document the terms of use in the catalog where the data will be published, instead of “freezing” them in a metadata file. &quot;data_access&quot;: { &quot;dataset_availability&quot;: { &quot;access_place&quot;: &quot;string&quot;, &quot;access_place_url&quot;: &quot;string&quot;, &quot;original_archive&quot;: &quot;string&quot;, &quot;status&quot;: &quot;string&quot;, &quot;coll_size&quot;: &quot;string&quot;, &quot;complete&quot;: &quot;string&quot;, &quot;file_quantity&quot;: &quot;string&quot;, &quot;notes&quot;: &quot;string&quot; }, &quot;dataset_use&quot;: {} } dataset_availability [Optional ; Not Repeatable] Information on the availability and storage of the dataset. access_place [Optional ; Not repeatable ; String] Name of the location where the data collection is currently stored. access_place_url [Optional ; Not repeatable ; String] The URL of the website of the location where the data collection is currently stored. original_archive [Optional ; Not repeatable ; String] Archive from which the data collection was obtained, if any (the originating archive). Note that the schema we propose provides an element provenance, which is not part of the DDI, that can be used to document the origin of a dataset. status [Optional ; Not repeatable ; String] A statement of the data availability. An archive may need to indicate that a collection is unavailable because it is embargoed for a period of time, because it has been superseded, because a new edition is imminent, etc. This element will rarely be used. coll_size [Optional ; Not repeatable ; String] Extent of the collection. This is a summary of the number of physical files that exist in a collection. We will record here the number of files that contain data and note whether the collection contains other machine-readable documentation and/or other supplementary files and information such as data dictionaries, data definition statements, or data collection instruments. This element will rarely be used. complete [Optional ; Not repeatable ; String] This item indicates the relationship of the data collected to the amount of data coded and stored in the data collection. Information as to why certain items of collected information were not included in the data file stored by the archive should be provided here. Example: “Because of embargo provisions, data values for some variables have been masked. Users should consult the data definition statements to see which variables are under embargo.” This element will rarely be used. file_quantity [Optional ; Not repeatable ; String] The total number of physical files associated with a collection. This element will rarely be used. notes [Optional ; Not repeatable ; String] Additional information on the dataset availability, not included in one of the elements above. my_ddi &lt;- list( doc_desc = list( # ... ), study_desc = list( # ... , study_info = list( # ... ), study_development = list( # ... ), method = list( # ...), data_access = list( dataset_availability = list( access_place = &quot;World Bank Microdata Library&quot;, access_place_url = &quot;http://microdata.worldbank.org&quot;, status = &quot;Available for public use&quot;, coll_size = &quot;4 data files + machine-readable questionnaire and report (2 PDF files) + data editing script (1 Stata do file).&quot;, complete = &quot;The variables &#39;latitude&#39; and &#39;longitude&#39; (GPS location of respondents) is not included, for confidentiality reasons.&quot;, file_quantity = &quot;7&quot; ), # ... ) ) # ... ) dataset_use [Optional ; Not Repeatable] Information on the terms of use for the study dataset. &quot;dataset_use&quot;: { &quot;conf_dec&quot;: [ { &quot;txt&quot;: &quot;string&quot;, &quot;required&quot;: &quot;string&quot;, &quot;form_url&quot;: &quot;string&quot;, &quot;form_id&quot;: &quot;string&quot; } ], &quot;spec_perm&quot;: [ { &quot;txt&quot;: &quot;string&quot;, &quot;required&quot;: &quot;string&quot;, &quot;form_url&quot;: &quot;string&quot;, &quot;form_id&quot;: &quot;string&quot; } ], &quot;restrictions&quot;: &quot;string&quot;, &quot;contact&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;affiliation&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot;, &quot;email&quot;: &quot;string&quot; } ], &quot;cit_req&quot;: &quot;string&quot;, &quot;deposit_req&quot;: &quot;string&quot;, &quot;conditions&quot;: &quot;string&quot;, &quot;disclaimer&quot;: &quot;string&quot; } conf_dec [Optional ; Repeatable] This element is used to determine if signing of a confidentiality declaration is needed to access a resource. We may indicate here what Affidavit of Confidentiality must be signed before the data can be accessed. Another option is to include this information in the next element (Access conditions). If there is no confidentiality issue, this field can be left blank. txt [Optional ; Not repeatable ; String] A statement on confidentiality and limitations to data use. This statement does not replace a more comprehensive data agreement (see Access condition). An example of statement could be the following: “Confidentiality of respondents is guaranteed by Articles N to NN of the National Statistics Act of [date]. Before being granted access to the dataset, all users have to formally agree: To make no copies of any files or portions of files to which s/he is granted access except those authorized by the data depositor. Not to use any technique in an attempt to learn the identity of any person, establishment, or sampling unit not identified on public use data files. To hold in strictest confidence the identification of any establishment or individual that may be inadvertently revealed in any documents or discussion, or analysis. That such inadvertent identification revealed in her/his analysis will be immediately and in confidentiality brought to the attention of the data depositor.” required [Optional ; Not repeatable ; String] The “required” attribute is used to aid machine processing of this element. The default specification is “yes”. form_url [Optional ; Not repeatable ; String] The \"form_url element is used to provide a link to an online confidentiality declaration form. form_id [Optional ; Not repeatable ; String] Indicates the number or ID of the confidentiality declaration form that the user must fill out. spec_perm [Optional ; Repeatable] This element is used to determine if any special permissions are required to access a resource. txt [Optional ; Not repeatable ; String] A statement on the special permissions required to access the dataset. required [Optional ; Not repeatable ; String] The required is used to aid machine processing of this element. The default specification is “yes”. form_url [Optional ; Not repeatable ; String] The form_url is used to provide a link to a special on-line permissions form. form_id [Optional ; Not repeatable ; String] The “form_id” indicates the number or ID of the special permissions form that the user must fill out. restrictions [Optional ; Not repeatable ; String] Any restrictions on access to or use of the collection such as privacy certification or distribution restrictions should be indicated here. These can be restrictions applied by the author, producer, or distributor of the data. This element can for example contain a statement (extracted from the DDI documentation) like: “In preparing the data file(s) for this collection, the National Center for Health Statistics (NCHS) has removed direct identifiers and characteristics that might lead to identification of data subjects. As an additional precaution NCHS requires, under Section 308(d) of the Public Health Service Act (42 U.S.C. 242m), that data collected by NCHS not be used for any purpose other than statistical analysis and reporting. NCHS further requires that analysts not use the data to learn the identity of any persons or establishments and that the director of NCHS be notified if any identities are inadvertently discovered. Users ordering data are expected to adhere to these restrictions.” contact [Optional ; Repeatable] Users of the data may need further clarification and information on the terms of use and conditions to access the data. This set of elements is used to identify the contact persons who can be used as resource persons regarding problems or questions raised by the user community. name [Optional ; Not repeatable ; String] Name of the person. Note that in some cases, it might be better to provide a title/function than the actual name of the person. Keep in mind that people do not stay forever in their position. affiliation [Optional ; Not repeatable ; String] Affiliation of the person. uri [Optional ; Not repeatable ; String] URI for the person; it can be the URL of the organization the person belongs to. email [Optional ; Not repeatable ; String] The email element is used to indicate an email address for the contact individual mentioned in name. Ideally, a generic email address should be provided. It is easy to configure a mail server in such a way that all messages sent to the generic email address would be automatically forwarded to some staff members. cit_req [Optional ; Not repeatable ; String] A citation requirement that indicates the way that the dataset should be referenced when cited in any publication. Providing a citation requirement will guarantee that the data producer gets proper credit, and that results of analysis can be linked to the proper version of the dataset. The data access policy should explicitly mention the obligation to comply with the citation requirement. The citation should include at least the primary investigator, the name and abbreviation of the dataset, the reference year, and the version number. Include also a website where the data or information on the data is made available by the official data depositor. Ideally, the citation requirement will include a DOI (see the DataCite website for recommendations). deposit_req [Optional ; Not repeatable ; String] Information regarding data users’ responsibility for informing archives of their use of data through providing citations to the published work or providing copies of the manuscripts. conditions [Optional ; Not repeatable ; String] Indicates any additional information that will assist the user in understanding the access and use conditions of the data collection. disclaimer [Optional ; Not repeatable ; String] A disclaimer limits the liability that the data producer or data custodian has regarding the use of the data. A standard legal statement should be used for all datasets from a same agency. The following formulation could be used: The user of the data acknowledges that the original collector of the data, the authorized distributor of the data, and the relevant funding agency bear no responsibility for use of the data or for interpretations or inferences based upon such uses. Example ```r my_ddi &lt;- list( doc_desc = list( # ... ), study_desc = list( # ... , study_info = list( # ... ), study_development = list( # ... ), method = list( # ...), data_access = list( # ..., dataset_use = list( conf_dec = list( list(txt = &quot;Confidentiality of respondents is guaranteed by Articles N to NN of the National Statistics Act. All data users are required to sign an affidavit of confidentiality.&quot;, required = &quot;yes&quot;, form_url = &quot;http://datalibrary.org/affidavit&quot;, form_id = &quot;F01_AC_v01&quot;) ), spec_perm = list( list(txt = &quot;Permission will only be granted to residents of [country].&quot;, required = &quot;yes&quot;, form_url = &quot;http://datalibrary.org/residency&quot;, form_id = &quot;F02_RS_v01&quot;) ), restrictions = &quot;Data will only be shared with users who are registered to the National Data Center and have successfuly completed the training on data privacy and responsible data use. Only users who legally reside in [country] will be authorized to access the data.&quot;, contact = list( list(name = &quot;Head, Data Processing Division&quot;, affiliation = &quot;National Statistics Office&quot;, uri = &quot;www.cso.org/databank&quot;, email = &quot;dataproc@cso.org&quot;) ), cit_req = &quot;National Statistics Office of Popstan. Multiple Indicators Cluster Survey 2000 (MICS 2000). Version 01 of the scientific use dataset (April 2001). DOI: XXX-XXXX-XXX&quot;, deposit_req = &quot;To provide funding agencies with essential information about use of archival resources and to facilitate the exchange of information among researchers and development practitioners, users of the Microdata Library data are requested to send to the Microdata Library bibliographic citations for, or copies of, each completed manuscript or thesis abstract. Please indicate in a cover letter which data were used.&quot;, disclaimer = &quot;The user of the data acknowledges that the original collector of the data, the authorized distributor of the data, and the relevant funding agency bear no responsibility for use of the data or for interpretations or inferences based upon such uses.&quot; ) ), # ... ) ``` notes [Optional ; Not repeatable ; String] Any additional information related to data access that is not contained in the specific metadata elements provided in the section data_access. 5.4.3 Description of data files data_files [Optional ; Repeatable] The data_files section is the DDI section that contains the elements needed to describe each data file that form the study dataset. These are elements at the file level; it does not include the information at the variable level, which are contained in a separate section of the standard. &quot;data_files&quot;: [ { &quot;file_id&quot;: &quot;string&quot;, &quot;file_name&quot;: &quot;string&quot;, &quot;file_type&quot;: &quot;string&quot;, &quot;description&quot;: &quot;string&quot;, &quot;case_count&quot;: 0, &quot;var_count&quot;: 0, &quot;producer&quot;: &quot;string&quot;, &quot;data_checks&quot;: &quot;string&quot;, &quot;missing_data&quot;: &quot;string&quot;, &quot;version&quot;: &quot;string&quot;, &quot;notes&quot;: &quot;string&quot; } ] file_id [Optional ; Not repeatable ; String] A unique file identifier (within the metadata document, not necessarily within a catalog). This will typically be the electronic file name. file_name [Optional ; Not repeatable ; String] This is not the name of the electronic file (which is provided in the previous element). It is a short title (label) that will help distinguish a particular file/part from other files/parts in the dataset. file_type [Optional ; Not repeatable ; String] The type of data files. For example, raw data (ASCII), or software-dependent files such as SAS / Stata / SPSS data file, etc. Provide specific information (e.g. Stata 10 or Stata 15, SPSS Windows or SPSS Export, etc.) Note that in an on-line catalog, data can be made available in multiple formats. In such case, the file_type element is not useful. description [Optional ; Not repeatable ; String] The file_id and file_name elements provide limited information on the content of the file. The description element is used to provide a more detailed description of the file content. This description should clearly distinguish collected variables and derived variables. It is also useful to indicate the availability in the data file of some particular variables such as the weighting coefficients. If the file contains derived variables, it is good practice to refer to the computer program that generated it. Information about the data file(s) that comprises a collection. case_count [Optional ; Numeric ; Not Repeatable] Number of cases or observations in the data file. The value is 0 by default. var_count [Optional ; Numeric ; Not Repeatable] Number of variables in the data file. The value is 0 by default. producer [Optional ; Not repeatable ; String] The name of the agency that produced the data file. Most data files will have been produced by the survey primary investigator. In some cases however, auxiliary or derived files from other producers may be released with a data set. This may for example be a file containing derived variables generated by a researcher. data_checks [Optional ; Not repeatable ; String] Use this element if needed to provide information about the types of checks and operations that have been performed on the data file to make sure that the data are as correct as possible, e.g. consistency checking, wildcode checking, etc. Note that the information included here should be specific to the data file. Information about data processing checks that have been carried out on the data collection (study) as a whole should be provided in the Data editing element at the study level. You may also provide here a reference to an external resource that contains the specifications for the data processing checks (that same information may be provided also in the Data Editing filed in the Study Description section). missing_data [Optional ; Not repeatable ; String] A description of missing data (number of missing cases, cause of missing values, etc.) version [Optional ; Not repeatable ; String] The version of the data file. A data file may undergo various changes and modifications. File specific versions can be tracked in this element. This field will in most cases be left empty. notes [Optional ; Not repeatable ; String] This field aims to provide information on the specific data file not covered elsewhere. Example for UNICEF MICS dataset my_ddi &lt;- list( doc_desc = list( # ... ), study_desc = list( # ... ), data_files = list( list(file_id = &quot;HHS2020_S01&quot;, file_name = &quot;Household roster (demographics)&quot;, description = &quot;The file contains the demographic information on all individuals in the sample&quot;, case_count: 10000, var_count: 12, producer = &quot;National Statistics Office&quot;, missing_data = &quot;Values of age outside valid range (0 to 100) have been replaced with &#39;missing&#39;.&quot;, version = &quot;1.0 (edited, not anonymized)&quot;, notes = &quot;&quot; ), list(file_id = &quot;HHS2020_S03A&quot;, file_name = &quot;Section 3A - Education&quot;, description = &quot;The file contains data related to section 3A of the household survey questionnaire (Education of household members aged 6 to 24 years). It also contains the weighting coefficient, and various recoded variables on levels of education.&quot;, case_count: 2500, var_count: 17, producer = &quot;National Statistics Office&quot;, data_checks = &quot;Education level (variable EDUCLEV) has been edited using hotdeck imputation when the reported value was out of acceptable range considering the AGE of the person.&quot;, version = &quot;1.0 (edited, not anonymized)&quot; ), list(file_id = &quot;HHS2020_CONSUMPTION&quot;, file_name = &quot;Annualized household consumption by products and services&quot;, description = &quot;The file contains derived data on household consumption, annualized and aggregated by category of products and services. The file also contains a regional price deflator variable and the household weighting coefficient. The file was generated using a Stata program named &#39;cons_aggregate.do&#39;.&quot;, case_count: 42000, var_count: 15, producer = &quot;National Statistics Office&quot;, data_checks = &quot;Outliers have been detected (&gt; median + 5*IQR) for each product/service; fixed by imputation (regression model).&quot;, missing_data = &quot;Missing consumption values are treated as 0&quot;, version = &quot;1.0 (edited, not anonymized)&quot; ) ), # ... ) 5.4.4 Variable description The DDI Codebook metadata standard provides multiple elements to document variables contained in a micro-dataset. There is much value in documenting variables: - it makes the data usable by providing users with a detailed data dictionary; - it makes the data more discoverable as all keywords included in the description of variables are indexed in data catalogs; - it allows users to assess the comparability of data across sources; - it enables the development of question banks; and - it adds transparency and credibility to the data especially when derived or imputed variables are documented. All possible effort should thus be made to generate and publish detailed variable-level documentation. A micro-dataset can contain many variables. Some survey datasets include hundreds or event thousands of variables. Documenting variables can thus be a tedious process. The use of a specialized DDI metadata editor can make this process considerably more efficient. Much of the variable-level metadata can indeed be automatically extracted from the electronic data files. Data files in Stata, SPSS or other common formats include variable names, variable and value labels, and in some cases notes that can be extracted. And the variable-level summary statistics that are part of the metadata can be generated from the data files. Further, software applications used for capturing data like Survey Solutions from the World Bank or CsPro from the US Census Bureau can export variable metadata, including the variable names, the variable and value labels, and possibly the formulation of questions and the interviewers instructions when the software is used for conducting computer assisted personal interviews (CAPI). Survey Solutions and CsPro can export metadata in multiple formats, including the DDI Codebook. Multiple options exist to make the documentation of variables efficient. As much as possible, tedious manual curation of variable-level information should be avoided. variables [Optional ; Repeatable] The metadata elements we describe below apply independently to each variable in the dataset. &quot;variables&quot;: [ { &quot;file_id&quot;: &quot;string&quot;, &quot;vid&quot;: &quot;string&quot;, &quot;name&quot;: &quot;string&quot;, &quot;labl&quot;: &quot;string&quot;, &quot;var_intrvl&quot;: &quot;discrete&quot;, &quot;var_dcml&quot;: &quot;string&quot;, &quot;var_wgt&quot;: 0, &quot;loc_start_pos&quot;: 0, &quot;loc_end_pos&quot;: 0, &quot;loc_width&quot;: 0, &quot;loc_rec_seg_no&quot;: 0, &quot;var_imputation&quot;: &quot;string&quot;, &quot;var_derivation&quot;: &quot;string&quot;, &quot;var_security&quot;: &quot;string&quot;, &quot;var_respunit&quot;: &quot;string&quot;, &quot;var_qstn_preqtxt&quot;: &quot;string&quot;, &quot;var_qstn_qstnlit&quot;: &quot;string&quot;, &quot;var_qstn_postqtxt&quot;: &quot;string&quot;, &quot;var_forward&quot;: &quot;string&quot;, &quot;var_backward&quot;: &quot;string&quot;, &quot;var_qstn_ivuinstr&quot;: &quot;string&quot;, &quot;var_universe&quot;: &quot;string&quot;, &quot;var_sumstat&quot;: [], &quot;var_txt&quot;: &quot;string&quot;, &quot;var_catgry&quot;: [], &quot;var_std_catgry&quot;: {}, &quot;var_codinstr&quot;: &quot;string&quot;, &quot;var_concept&quot;: [], &quot;var_format&quot;: {}, &quot;var_notes&quot;: &quot;string&quot; } ] file_id [Required ; Not repeatable ; String] A dataset can be composed of multiple data files. The file_id is the name of the data file that contains the variable being documented. This file name should correspond to a file_id listed in the data_file section of the DDI. vid [Required ; Not repeatable ; String] A unique identifier given to the variable. This can be a system-generated ID, such as a sequential number within each data file. The vid is not the variable name. name [Required ; Not repeatable ; String] The name of the variable in the data file. The name should be entered exactly as found in the data file (not abbreviated or converted to upper or lower cases, as some software applications are case-sensitive). This information can be programmatically extracted from the data file. The variable name is limited to eight characters in some statistical analysis software such as SAS or SPSS. labl [Optional ; Not repeatable ; String] All variables should have a label that provides a short but clear indication of what the variable contains. Ideally, all variables in a data file will have a different label. File formats like Stata or SPSS often contain variable labels. Variable labels can also be found in data dictionaries in software applications like Survey Solutions or CsPro. Avoid using the question itself as a label (specific elements are available to capture the literal question text; see below). Think of a label as what you would want to see in a tabulation of the variables. Keep in mind that software applications like Stata and others impose a limit to the number of characters in a label (often, 80). var_intrvl [Optional ; Not repeatable ; String] This element indicates whether the intervals between values for the variable are discrete or continuous. var_dcml [Optional ; Not repeatable ; String] This element refers to the number of decimal points in the values of the variable. var_wgt [Optional ; Not repeatable ; Numeric] This element, which applies to dataset from sample surveys, indicates whether the variable is a sample weight (value “1”) or not (value “0). Sample weights play an important role in the calculation of summary statistics and sampling errors, and should therefore be flagged. loc_start_pos [Optional ; Not repeatable ; Numeric] The starting position of the variable when the data are saved in an ASCII fixed-format data file. loc_end_pos [Optional ; Not repeatable ; Numeric] The end position of the variable when the data are saved in an ASCII fixed-format data file. loc_width [Optional ; Not repeatable ; Numeric] The length of the variable (the maximum number of characters used for its values) in an ASCII fixed-format data file. loc_rec_seg_no [Optional ; Not repeatable ; Numeric] Record segment number, deck or card number the variable is located on. var_imputation [Optional ; Not repeatable ; String] Imputation is the process of estimating values for variables when a value is missing. The element is used to describe the procedure used to impute values when missing. var_derivation [Optional ; Not repeatable ; String] Used only in the case of a derived variable, this element provides both a description of how the derivation was performed and the command used to generate the derived variable, as well as a specification of the other variables in the study used to generate the derivation. The var_derivation element is used to provide a brief description of this process. As full transparency in derivation processes is critical to build trust and ensure replicability or reproducibility, the information captured in this element will often not be sufficient. A reference to a document and/or computer program can in such case be provided in this element, and the document/scripts provided as external resources. For example, a variable “TOT_EXP” containing the annualized total household expenditure obtained from a household budget survey may be the result of a complex process of aggregation, de-seasonalization, and more. In such case, the information provided in the var_derivation element could be: “TOT_EXP was obtained by aggregating expenditure data on all goods and services, available in sections 4 to 6 of the household questionnaire. It contains imputed rental values for owner-occupied dwellings. The values have been deflated by a regional price deflator available in variable REG_DEF. All values are in local currency. Outliers have been fixed by imputation. Details on the calculations are available in Appendix 2 of the Report on Data Processing, and in the Stata program [generate_hh_exp_total.do].” var_security [Optional ; Not repeatable ; String] This element is used to provide information regarding levels of access, e.g., public, subscriber, need to know. var_respunit [Optional ; Not repeatable ; String] Provides information regarding who provided the information contained within the variable, e.g., head of household, respondent, proxy, interviewer. var_qstn_preqtxt [Optional ; Not repeatable ; String] The pre-question texts are the instructions provided to the interviewers and printed in the questionnaire before the literal question. This does not apply to all variables. Do not confuse this with instructions provided in the interviewer’s manual. var_qstn_qstnlit [Optional ; Not repeatable ; String] The literal question is the full text of the questionnaire as the enumerator is expected to ask it when conducting the interview. This does not apply to all variables (it does not apply to derived variables). var_qstn_postqtxt [Optional ; Not repeatable ; String] The post-question texts are instructions provided to the interviewers, printed in the questionnaire after the literal question. Post-question can be used to enter information on skips provided in the questionnaire. This does not apply to all variables. Do not confuse this with instructions provided in the interviewer’s manual. With the previous three elements, one should be able to understand how the question was formulated in a questionnaire. In the example below (extracted from the UNICEF Malawi 2006 MICS survey questionnaire), we find: a pre-question: “Ask this question ONLY ONCE for each mother/caretaker (even if she has more children).” a literal question: “Sometimes children have severe illnesses and should be taken immediately to a health facility. What types of symptoms would cause you to take your child to a health facility right away?” a post-question: “Keep asking for more signs or symptoms until the mother/caretaker cannot recall any additional symptoms. Circle all symptoms mentioned. DO NOT PROMPT WITH ANY SUGGESTIONS” var_forward [Optional ; Not repeatable ; String] Contains a reference to the IDs of possible following questions. This can be used to document forward skip instructions. var_backward [Optional ; Not repeatable ; String] Contains a reference to IDs of possible preceding questions. This can be used to document backward skip instructions. var_qstn_ivuinstr [Optional ; Not repeatable ; String] Specific instructions to the individual conducting an interview. The content will typically be entered by copy/pasting instructions in the interviewer’s manual (or in the CAPI application). In cases where the same instructions relate to multiple variables, repeat the same information in the metadata for all these variables. NOTE: In earlier version of the documentation, due to a typo, the element was named var_qstn_ivulnstr. var_universe [Optional ; Not repeatable ; String] The universe at the variable level defines the population the question applied to. It reflects skip patterns in a questionnaire. This information can typically be copy/pasted from the survey questionnaire. Try to be as specific as possible. This information is critical for the analyst, as it explains why missing values may be found in a variable. In the example below (from the Malawi MICS 2006 survey questionnaire), the universe for questions ED1 to ED2 will be “Household members age 5 and above”, and the universe for Question ED3 will be “Household members age 5 and above who ever attended school or pre-school”. var_sumstat [Optional ; Repeatable] The DDI metadata standard provides multiple elements to capture various summary statistics such as minimum, maximum, or mean values (weighted and un-weighted) for each variable (note that frequency statistics for categorical variables are reported in var_catgry described below). The content of the var_sumstat section will be easy to fill out programmatically (using R or Python) or using a specialized DDI metadata editor, which can read the data file and generate the summary statistics. &quot;var_sumstat&quot;: [ { &quot;type&quot;: &quot;string&quot;, &quot;value&quot;: null, &quot;wgtd&quot;: &quot;string&quot; } ] type [Required ; Not repeatable ; String] The type of statistics being shown: mean, median, mode, valid cases, invalid cases, minimum, maximum, or standard deviation. value [Required ; Not repeatable ; Numeric] The value of the summary statistics mentioned in type. wgtd [Required ; Not repeatable ; String] Indicates whether the statistics reported in value are weighted or not (for variables in sample surveys). Enter “weighted” if weighted, otherwise leave this element empty. var_txt [Optional ; Not repeatable ; String] This element provides a space to describe the variable in detail. Not all variables require a definition. var_catgry [Optional ; Repeatable] Variable categories are the lists of codes (and their meaning) that apply to a categorical variable. This block of elements is used to describe the categories (code and label) and optionally capture their weighted and/or un-weighted frequencies. &quot;var_catgry&quot;: [ { &quot;value&quot;: &quot;string&quot;, &quot;label&quot;: &quot;string&quot;, &quot;stats&quot;: [ { &quot;type&quot;: &quot;string&quot;, &quot;value&quot;: null, &quot;wgtd&quot;: &quot;string&quot; } ] } ] value [Required ; Not repeatable ; String] The value here is the code assigned to a variable category. For example, a variable “Sex” could have value 1 for “Male” and value 2 for “Female”. label [Required ; Not repeatable ; String] The label attached to the code mentioned in value. stats [Optional ; Repeatable] This repeatable block of elements will contain the summary statistics for the category (not for the variable) being documented. This may include frequencies, percentages, or cross-tabulation results. type [Required ; Not repeatable ; String] The type of the summary statistic. This will usually be freq for frequency. value [Required ; Not repeatable ; Numeric] The value of the summary statistic, for the corresponding type. wgtd [Optional ; Not repeatable ; String] Indicates whether the statistic reported in value are weighted or not (for variables in sample surveys). Enter “weighted” if weighted, otherwise leave this element empty. var_std_catgry [Optional ; Not repeatable] This element is used to indicate that the codes used for a categorical variable are from a standard international or other classification, like COICOP, ISIC, ISO country codes, etc. &quot;var_std_catgry&quot;: { &quot;name&quot;: &quot;string&quot;, &quot;source&quot;: &quot;string&quot;, &quot;date&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } name [Required ; Not repeatable ; String] The name of the classification, e.g. “International Standard Industrial Classification of All Economic Activities (ISIC), Revision 4” source [Required ; Not repeatable ; String] The source of the classification, e.g. “United Nations” date [Required ; Not repeatable ; String] The version (typically a date) of the classification used for the study. uri [Required ; Not repeatable ; String] A URL to a website where an electronic copy and more information on the classification can be obtained. var_codinstr [Optional ; Not repeatable ; String] The coder instructions for the variable. These are any special instructions to those who converted information from one form to another (e.g., textual to numeric) for a particular variable. var_concept [Optional ; Repeatable] The general subject to which the parent element may be seen as pertaining. This element serves the same purpose as the keywords and topic classification elements, but at the variable description level. &quot;var_concept&quot;: [ { &quot;title&quot;: &quot;string&quot;, &quot;vocab&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ] title [Optional ; Not repeatable ; String] The name (label) of the concept. vocab [Optional ; Not repeatable ; String] The controlled vocabulary, if any, from which the concept `title’ was taken. uri [Optional ; Not repeatable ; String] The location for the controlled vocabulary mentioned in `vocab’. var_format [Optional ; Not repeatable] The technical format of the variable in question. &quot;var_format&quot;: { &quot;type&quot;: &quot;string&quot;, &quot;name&quot;: &quot;string&quot;, &quot;note&quot;: &quot;string&quot; } type [Optional ; Not repeatable ; String] Indicates if the variable is numeric, fixed string, dynamic string, or date. Numeric variables are used to store any number, integer or floating point (decimals). A fixed string variable has a predefined length which enables the publisher to handle this data type more efficiently. Dynamic string variables can be used to store open-ended questions. name [Optional ; Not repeatable ; String] In some cases may provide the name of the particular, proprietary format used. note [Optional ; Not repeatable ; String] Additional information on the variable format. var_notes Optional ; Not repeatable ; String] This element is provided to record any additional or auxiliary information related to the specific variable. Example for two variables only: my_ddi &lt;- list( doc_desc = list( # ... ), study_desc = list( # ... ), data_files = list( # ... ), variables = list( list(file_id = &quot;&quot;, vid = &quot;&quot;, name = &quot;&quot;, labl = &quot;Main occupation&quot;, var_intrvl = &quot;discrete&quot;, var_imputation = &quot;&quot;, var_respunit = &quot;&quot;, var_qstn_preqtxt = &quot;&quot;, var_qstn_qstnlit = &quot;&quot;, var_qstn_postqtxt = &quot;&quot;, var_qstn_ivulnstr = &quot;&quot;, var_universe = &quot;&quot;, var_sumstat = list(list(type = &quot;&quot;, value = &quot;&quot;, wgtd = &quot;&quot;)), var_txt = &quot;&quot;, var_forward = &quot;&quot;, var_catgry = list(list(value = &quot;&quot;, label = &quot;&quot;, stats = list(list(type = &quot;&quot;, value = &quot;&quot;, wgtd = &quot;&quot;), list(type = &quot;&quot;, value = &quot;&quot;, wgtd = &quot;&quot;), list(type = &quot;&quot;, value = &quot;&quot;, wgtd = &quot;&quot;)), list(value = &quot;&quot;, label = &quot;&quot;, stats = list(list(type = &quot;&quot;, value = &quot;&quot;, wgtd = &quot;&quot;), list(type = &quot;&quot;, value = &quot;&quot;, wgtd = &quot;&quot;), list(type = &quot;&quot;, value = &quot;&quot;, wgtd = &quot;&quot;)), var_std_catgry = list(), var_codinstr = &quot;&quot;, var_concept = list(list(title = &quot;&quot;, vocab = &quot;&quot;, uri = &quot;&quot;)), var_format = list(type = &quot;numeric&quot;, name = &quot;&quot;) ), list(file_id = &quot;&quot;, vid = &quot;&quot;, name = &quot;V75_HH_CONS&quot;, labl = &quot;Household total consumption&quot;, var_intrvl = &quot;continuous&quot;, var_dcml = &quot;&quot;, var_wgt = 0, var_imputation = &quot;&quot;, var_derivation = &quot;&quot;, var_security = &quot;&quot;, var_respunit = &quot;&quot;, var_qstn_preqtxt = &quot;&quot;, var_qstn_qstnlit = &quot;&quot;, var_qstn_postqtxt = &quot;&quot;, var_qstn_ivulnstr = &quot;&quot;, var_universe = &quot;&quot;, var_sumstat = list(list(type = &quot;&quot;, value = &quot;&quot;, wgtd = &quot;&quot;)), var_txt = &quot;&quot;, var_codinstr = &quot;&quot;, var_concept = list(list(title = &quot;&quot;, vocab = &quot;&quot;, uri = &quot;&quot;)), var_format = list(type = &quot;&quot;, name = &quot;&quot;, value = &quot;&quot;), var_notes = &quot;&quot; ) ), # ... ) 5.4.5 Variable groups variable_groups [Optional ; Repeatable] In a dataset, variables are grouped by data file. For the convenience of users, the DDI allows data curators to organize the variables into different, “virtual” groups to organize variables by theme, type of respondent, or any other criteria. Grouping variables is optional, and will not impact the way variables are stored in the data files. One variable can belong to more than a group, and a group of variables can contain variables from more than one data file. The variable groups do not necessarily have to cover all variables in the data files. Variable groups can also contain other variable groups. &quot;variable_groups&quot;: [ { &quot;vgid&quot;: &quot;string&quot;, &quot;variables&quot;: &quot;string&quot;, &quot;variable_groups&quot;: &quot;string&quot;, &quot;group_type&quot;: &quot;subject&quot;, &quot;label&quot;: &quot;string&quot;, &quot;universe&quot;: &quot;string&quot;, &quot;notes&quot;: &quot;string&quot;, &quot;txt&quot;: &quot;string&quot;, &quot;definition&quot;: &quot;string&quot; } ] vgid [Optional ; Not repeatable ; String] A unique identifier (within the DDI metadata file) for the variable group. variables [Optional ; Not repeatable ; String] The list of variables (variable identifiers - vid) in the group. Enter a list with items separated by a space, e.g. “V21 V22, V30”. variable_groups [Optional ; Not repeatable ; String] The variable groups (vgid) that are embedded in this variable group. Enter a list with items separated by a space, e.g. “VG2, VG5”. group_type [Optional ; Subject ; Not Repeatable] The type of grouping of the variables. A controlled vocabulary should be used. The DDI proposes the following vocabulary: {section, multipleResp, grid, display, repetition, subject, version, iteration, analysis, pragmatic, record, file, randomized, other}. A description of the groups can be found in this document by W. Thomas, W. Block, R. Wozniak and J. Buysse. label [Optional ; Not repeatable ; String] A short description of the variable group. universe [Optional ; Not repeatable ; String] The universe can be a population of individuals, households, facilities, organizations, or others, which can be defined by any type of criteria (e.g., “adult males”, “private schools”, “small and medium-size enterprises”, etc.). notes [Optional ; Not repeatable ; String] Used to provide additional information about the variable group. txt [Optional ; Not repeatable ; String] A more detailed description of variable group than the one provided in label. definition [Optional ; Not repeatable ; String] A brief rationale for the variable grouping. my_ddi &lt;- list( doc_desc = list( # ... ), study_desc = list( # ... ), data_files = list( # ... ), variables = list( # ... ), variable_groups = list( list(vgid = &quot;vg01&quot;, variables = &quot;&quot;, variable_groups = &quot;&quot;, group_type = &quot;subject&quot;, label = &quot;&quot;, universe = &quot;&quot;, notes = &quot;&quot;, txt = &quot;&quot;, definition = &quot;&quot; ), list(vgid = &quot;vg02&quot;, variables = &quot;&quot;, variable_groups = &quot;&quot;, group_type = &quot;subject&quot;, label = &quot;&quot;, universe = &quot;&quot;, notes = &quot;&quot;, txt = &quot;&quot;, definition = &quot;&quot; ) ), # ... ) 5.4.6 Provenance provenance [Optional ; Repeatable] Metadata can be programmatically harvested from external catalogs. The provenance group of elements is used to store information on the provenance of harvested metadata, and on alterations that may have been made to the harvested metadata. These elements are NOT part of the DDI metadata standard. &quot;provenance&quot;: [ { &quot;origin_description&quot;: { &quot;harvest_date&quot;: &quot;string&quot;, &quot;altered&quot;: true, &quot;base_url&quot;: &quot;string&quot;, &quot;identifier&quot;: &quot;string&quot;, &quot;date_stamp&quot;: &quot;string&quot;, &quot;metadata_namespace&quot;: &quot;string&quot; } } ] origin_description [Required ; Not repeatable] The origin_description elements are used to describe when and from where metadata have been extracted or harvested. harvest_date [Required ; Not repeatable ; String] The date and time the metadata were harvested, entered in ISO 8601 format. altered [Optional ; Not repeatable ; Boolean] A boolean variable (“true” or “false”; “true by default) indicating whether the harvested metadata have been modified before being re-published. In many cases, the unique identifier of the study (element idno in the Study Description / Title Statement section) will be modified when published in a new catalog. base_url [Required ; Not repeatable ; String] The URL from where the metadata were harvested. identifier [Optional ; Not repeatable ; String] The unique dataset identifier (idno element) in the source catalog. When harvested metadata are re-published in a new catalog, the identifier will likely be changed. The identifier element in provenance is used to maintain traceability. date_stamp [Optional ; Not repeatable ; String] The date stamp (in UTC date format) of the metadata record in the originating repository (this should correspond to the date the metadata were last updated in the source catalog). metadata_namespace [Optional ; Not repeatable ; String] @@@@@@@ 5.4.7 Tags tags [Optional ; Repeatable] As shown in section 1.7 of the Guide, tags, when associated with tag_groups, provide a powerful and flexible solution to enable custom facets (filters) in data catalogs. Tags are NOT part of the DDI codebook standard. &quot;tags&quot;: [ { &quot;tag&quot;: &quot;string&quot;, &quot;tag_group&quot;: &quot;string&quot; } ] tag [Required ; Not repeatable ; String] A user-defined tag. tag_group [Optional ; Not repeatable ; String] A user-defined group (optional) to which the tag belongs. Grouping tags allows implementation of controlled facets in data catalogs. 5.4.8 LDA topics lda_topics [Optional ; Not repeatable] &quot;lda_topics&quot;: [ { &quot;model_info&quot;: [ { &quot;source&quot;: &quot;string&quot;, &quot;author&quot;: &quot;string&quot;, &quot;version&quot;: &quot;string&quot;, &quot;model_id&quot;: &quot;string&quot;, &quot;nb_topics&quot;: 0, &quot;description&quot;: &quot;string&quot;, &quot;corpus&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ], &quot;topic_description&quot;: [ { &quot;topic_id&quot;: null, &quot;topic_score&quot;: null, &quot;topic_label&quot;: &quot;string&quot;, &quot;topic_words&quot;: [ { &quot;word&quot;: &quot;string&quot;, &quot;word_weight&quot;: 0 } ] } ] } ] We mentioned in Chapter 1 the importance of producing rich metadata, and the opportunities that machine learning offers to enrich (or “augment”) metadata in a largely automated manner. One application of machine learning, more specifically of natural language processing, to enrich metadata related to publications is the topic extraction using Latent Dirichlet Allocation (LDA) models. LDA models must be trained on large corpora of documents. They do not require any pre-defined taxonomy of topics. The approach consists of “clustering” words that are likely to appear in similar contexts (the number of “clusters” or “topics” is a parameter provided when training a model). Clusters of related words form “topics”. A topic is thus defined by a list of keywords, each one of them provided with a score indicating its importance in the topic. Typically, the top 10 words that represent a topic will be used to describe it. The description of the topics covered by a document (in this case, the “document” is a compilation of elements from the dataset metadata) can be indexed to improve searchability (possibly in a selective manner, by setting thresholds on the topic shares and word weights). Once an LDA topic model has been trained, it can be used to infer the topic composition of any document. This inference will then provide the share that each topic represents in the document. The sum of all represented topics is 1 (100%). The metadata element lda_topics is provided to allow data curators to store information on the inferred topic composition of the documents listed in a catalog. Sub-elements are provided to describe the topic model, and the topic composition. The lda_topics element is NOT part of the DDI Codebook standard. Important note: the topic composition of a document is specific to a topic model. To ensure consistency of the information captured in the lda_topics elements, it is important to make use of the same model(s) for generating the topic composition of all documents in a catalog. If a new, better LDA model is trained, the topic composition of all documents in the catalog should be updated. The lda_topics element includes the following metadata fields: model_info [Optional ; Not repeatable] Information on the LDA model. source [Optional ; Not repeatable ; String] The source of the model (typically, an organization). author [Optional ; Not repeatable ; String] The author(s) of the model. version [Optional ; Not repeatable ; String] The version of the model, which could be defined by a date or a number. model_id [Optional ; Not repeatable ; String] The unique ID given to the model. nb_topics [Optional ; Not repeatable ; Numeric] The number of topics in the model (the number of topics to be extracted from a corpus is the key parameter of any LDA model). description [Optional ; Not repeatable ; String] A brief description of the model. corpus [Optional ; Not repeatable ; String] A brief description of the corpus on which the LDA model was trained. uri [Optional ; Not repeatable ; String] A link to a web page where additional information on the model is available. topic_description [Optional ; Repeatable] The topic composition of the document. topic_id [Optional ; Not repeatable ; String] The identifier of the topic; this will often be a sequential number (Topic 1, Topic 2, etc.). topic_score [Optional ; Not repeatable ; Numeric] The share of the topic in the document (%). topic_label [Optional ; Not repeatable ; String] The label of the topic, if any (not automatically generated by the LDA model). topic_words [Optional ; Not repeatable] The list of N keywords describing the topic (e.g., the top 5 words). word [Optional ; Not repeatable ; String] The word. word_weight [Optional ; Not repeatable ; Numeric] The weight of the word in the definition of the topic. This is specific to the model, not to a document. lda_topics = list( list( model_info = list( list(source = &quot;World Bank, Development Data Group&quot;, author = &quot;A.S.&quot;, version = &quot;2021-06-22&quot;, model_id = &quot;Mallet_WB_75&quot;, nb_topics = 75, description = &quot;LDA model, 75 topics, trained on Mallet&quot;, corpus = &quot;World Bank Documents and Reports (1950-2021)&quot;, uri = &quot;&quot;)) ), topic_description = list( list(topic_id = &quot;topic_27&quot;, topic_score = 32, topic_label = &quot;Education&quot;, topic_words = list(list(word = &quot;school&quot;, word_weight = &quot;&quot;) list(word = &quot;teacher&quot;, word_weight = &quot;&quot;), list(word = &quot;student&quot;, word_weight = &quot;&quot;), list(word = &quot;education&quot;, word_weight = &quot;&quot;), list(word = &quot;grade&quot;, word_weight = &quot;&quot;)), list(topic_id = &quot;topic_8&quot;, topic_score = 24, topic_label = &quot;Gender&quot;, topic_words = list(list(word = &quot;women&quot;, word_weight = &quot;&quot;) list(word = &quot;gender&quot;, word_weight = &quot;&quot;), list(word = &quot;man&quot;, word_weight = &quot;&quot;), list(word = &quot;female&quot;, word_weight = &quot;&quot;), list(word = &quot;male&quot;, word_weight = &quot;&quot;)), list(topic_id = &quot;topic_39&quot;, topic_score = 22, topic_label = &quot;Forced displacement&quot;, topic_words = list(list(word = &quot;refugee&quot;, word_weight = &quot;&quot;) list(word = &quot;programme&quot;, word_weight = &quot;&quot;), list(word = &quot;country&quot;, word_weight = &quot;&quot;), list(word = &quot;migration&quot;, word_weight = &quot;&quot;), list(word = &quot;migrant&quot;, word_weight = &quot;&quot;)), list(topic_id = &quot;topic_40&quot;, topic_score = 11, topic_label = &quot;Development policies&quot;, topic_words = list(list(word = &quot;development&quot;, word_weight = &quot;&quot;) list(word = &quot;policy&quot;, word_weight = &quot;&quot;), list(word = &quot;national&quot;, word_weight = &quot;&quot;), list(word = &quot;strategy&quot;, word_weight = &quot;&quot;), list(word = &quot;activity&quot;, word_weight = &quot;&quot;)) ) ) ) 5.4.9 Embeddings embeddings [Optional ; Repeatable] In Chapter 1 (section 1.n), we briefly introduced the concept of word embeddings and their use in implementation of semantic search tools. Word embedding models convert text (words, phrases, documents) into large-dimension numeric vectors (e.g., a vector of 100 or 200 numbers) that are representative of the semantic content of the text. In this case, the text would be a compilation of selected elements of the dataset metadata. The vectors are generated by submitting a text to a pre-trained word embedding model (possibly via an API). The word vectors do not have to be stored in the document metadata to be exploited by search engines. When a semantic search tool is implemented in a catalog, the vectors will be stored in a database end processed by a tool like Milvus. A metadata element is however provided to store the vectors for preservation and sharing purposes. This block of metadata elements is repeatable, allowing multiple vectors to be stored. When using vectors in a search engine, it is critical to only use vectors generated by one same model. The embeddings element is NOT part of the DDI Codebook standard. &quot;embeddings&quot;: [ { &quot;id&quot;: &quot;string&quot;, &quot;description&quot;: &quot;string&quot;, &quot;date&quot;: &quot;string&quot;, &quot;vector&quot;: { } } ] The embeddings element contains four metadata fields: - id [Optional ; Not repeatable ; String] A unique identifier of the word embedding model used to generate the vector. - description [Optional ; Not repeatable ; String] A brief description of the model. This may include the identification of the producer, a description of the corpus on which the model was trained, the identification of the software and algorithm used to train the model, the size of the vector, etc. - date [Optional ; Not repeatable ; String] The date the model was trained (or a version date for the model). - vector [Required ; Not repeatable ; Object] @@@@@@@@ do not offer options The numeric vector representing the document, provided as an object (array or string). [1,4,3,5,7,9] 5.4.10 Additional additional [Optional ; Not repeatable] The additional element is provided to allow users of the API to create their own elements and add them to the schema. It is not part of the DDI Codebook standard. All custom elements must be added within the element block; embedding them elsewhere in the schema would cause DDI schema validation to fail in NADA. 5.5 Generating and publishing DDI metadata The DDI-Codebook metadata standard provides multiple elements to describe the variables in detail. This includes elements that are usually not found in data dictionaries, like summary statistics. Generating this information and manually capturing it in a DDI-compliant metadata file could be tedious. Indeed, some datasets contains hundreds or even thousands of variables. Some of the metadata (list of variables, possibly variable and value labels, and summary statistics) can be automatically extracted from the data files. Specialized metadata editors, who can read the data files, extract metadata, and generate DDI-compliant output are thus the preferred option to document microdata. Other software have the capability to generate variable-level metadata in DDI-compliant, such as CsPro and Survey Solutions (CAPI applications). Stata and R scripts also provide solutions to generate variable-level metadata out of data files. We present some of these tools below. 5.5.1 Using the World Bank Metadata Editor @@@ Update this whole section with proper screenshots and description The World Bank Metadata Editor is compliant with the DDI-Codebook 2.5. It is an open source software. [@@@@@ not yet - wait for license] It is a flexible application that can also accommodate other standards and schemas such as the Dublin Core (for documents) and the ISO 19139 (for geospatial data). When importing data files, variable-level metadata is automatically generated including variable names, summary statistics, and variable and value labels if available in the source data files. Additional variable-level metadata can then be added manually. The Metadata Editor provides forms to enter all other related metadata using the DDI-Codebook 2.5 standard, including the study description and a description of external resources. The World Bank Metadata Editor exports the metadata (for microdataset) in DDI-Codebook 2.5 format (XML) and in JSON format. Metadata related to external resources can be exported to a Dublin Core file. A transformation of the metadata files into a PDF document is also implemented. 5.5.2 Using R or Python DDI-compliant metadata can also be generated and published in a NADA catalog programmatically. Programming languages like R and Python provides much flexibility to generate such metadata, including variable-level metadata. We provide here and example where a dataset is available in Stata format. We use two data files from the Core Welfare Indicator Questionnaire (CWIQ) survey conducted in Liberia in 2007 (the full dataset has 12 data files; the extension of the script to the full dataset would be straightforward). One data file, named “sec_abcde_individual.dta”, contains individual-level variables. The other data file, named “sec_fgh_ _household.dta”, contains household-level variables. The content of the Stata files is as follows: When generating the variable-level metadata, we want to extract the value labels from the data files, keeping the original [code - value label] pairs as they are in the original dataset. For example, if the Stata dataset has codes 1 = Male and 2 = Female for variable sex, we do not want them to be changed for example to 1 = Female and 2 = Male by the data import process. The import process in R packages do not always maintain the code/label pairs; some convert categorical data into factors and assign codes and value labels independently from the original coding. # In http://catalog.ihsn.org/catalog/1523 library(nadar) library(haven) library(rlist) library(stringr) # ---------------------------------------------------------------------------------- my_keys &lt;- read.csv(&quot;C:/confidential/my_API_keys.csv&quot;, header=F, stringsAsFactors=F) set_api_key(&quot;my_keys[1,1&quot;) set_api_url(&quot;https://.../index.php/api/&quot;) set_api_verbose(FALSE) # ---------------------------------------------------------------------------------- id = &quot;LBR_CWIQ_2007&quot; setwd(&quot;D:/LBR_CWIQ_2007&quot;) thumb = &quot;liberia_cwiq.JPG&quot; # This image will be used as a thumbnail # The literal questions are only found in a PDF file; we extract them. # If list of questions had been available in MS-Excel format of equivalent, we # would import it from that file. literal_questions = list( b1 = &quot;Is [NAME] male or female?&quot;, b2 = &quot;How long has [NAME] been away in the last 12 months?&quot;, b3 = &quot;What is [NAME]&#39;s relationship to the head of household?&quot;, b4 = &quot;How old was [NAME] at last birthday?&quot;, b5 = &quot;What is [NAME]&#39;s marital status?&quot;, b6 = &quot;Is [NAME]&#39;s father alive?&quot;, b7 = &quot;Is [NAME]&#39;s father living in the household?&quot;, b8 = &quot;Is [NAME]&#39;s mother alive?&quot;, b9 = &quot;Is [NAME]&#39;s mother living in the household?&quot;, c1 = &quot;Can [NAME] read and write in any language?&quot;, c2 = &quot;Has [NAME] ever attended school?&quot;, c3 = &quot;What is the highest grade [NAME] completed?&quot;, c4 = &quot;Did [NAME] attend school last year?&quot;, c5 = &quot;Is [NAME] currently in school?&quot;, c6 = &quot;What is the current grade [NAME] is attending?&quot;, c7 = &quot;Who runs the school [NAME] is attending?&quot;, c8 = &quot;Did [NAME] have any problems with school?&quot;, c9 = &quot;Why is [NAME] not currently in school?&quot;, c10= &quot;Why has [NAME] not started school?&quot; # Etc. (we do not include all questions in the example) ) # Generate file-level and variable-level metadata for the two data files list_data_files = c(&quot;sec_abcde_individual.dta&quot;, &quot;sec_fgh_household.dta&quot;) list_var = list() list_df = list() vno = 1 fno = 1 for (datafile in list_data_files) { data &lt;- read_dta(datafile) # Generate file-level metadata # Create a file identifier (sequential) fid = paste0(&quot;F&quot;, str_pad(fno, 2, pad = &quot;0&quot;)) fno = fno + 1 # Add core metadata case_n = nrow(data) # Nb of observations in the data file var_n = length(data) # Nb of variables in the data file df = list(file_id = fid, file_name = datafile, case_count = case_n, var_count = var_n) list_df = list.append(list_df, df) # Generate variable-level metadata for(v in 1:length(data)) { # Create a variable identifier (sequential) vid = paste0(&quot;V&quot;, str_pad(vno, 4, pad = &quot;0&quot;)) vno = vno + 1 # Variable name and literal question vname = names(data[v]) question = as.character(literal_questions[vname]) if(is.null(question)) question = &quot;&quot; # Extract the variable label (trim leading and trailing white spaces) var_lab &lt;- trimws(attr(data[[v]], &#39;label&#39;)) if(is.null(var_lab)) var_lab = &quot;&quot; # Variable-level summary statistics vval = sum(!is.na(data[[v]])) vmis = sum(is.na(data[[v]])) vmin = as.character(min(data[[v]], na.rm = TRUE)) vmax = as.character(max(data[[v]], na.rm = TRUE)) vstats = list( list(type = &quot;valid&quot;, value = vval), list(type = &quot;system missing&quot;, value = vmis), list(type = &quot;minimum&quot;, value = vmin), list(type = &quot;maximum&quot;, value = vmax) ) # Extract the (original) codes and value labels and calculate frequencies freqs = list() val_lab &lt;- attr(data[[v]], &#39;labels&#39;) if(!is.null(val_lab) &amp; typeof(data[[v]]) != &quot;character&quot;) { freq_tbl = table(data[[v]]) for (i in 1:length(val_lab)) { f = list(value = as.character(val_lab[i]), labl = as.character(names(val_lab[i])), stats = list( list(type = &quot;count&quot;, value = sum(data[[v]] == val_lab[i], na.rm = TRUE) ) ) ) freqs = list.append(freqs, f) } } # Compile the variable-level metadata list_v = list( file_id = fid, vid = vid, name = vname, labl = var_lab, var_qstn_qstnlit = question, var_sumstat = vstats, var_catgry = freqs) # Add to the list of variables already documented list_var = list.append(list_var, list_v) } } # Generate the DDI-compliant metadata cwiq_ddi_metadata &lt;- list( doc_desc = list( producers = list( list(name = &quot;WB consultants&quot;) ), prod_date = &quot;2008-02-19&quot; ), study_desc = list( title_statement = list( idno = id, title = &quot;Core Welfare Indicators Questionnaire 2007&quot; ), authoring_entity = list( list(name = &quot;Liberia Institute of Statistics and Geo_Information Services&quot;) ), study_info = list( coll_dates = list( list(start = &quot;2007-08-06&quot;, end = &quot;2007-09-22&quot;) ), nation = list( list(name = &quot;Liberia&quot;, abbreviation = &quot;LBR&quot;) ), abstract = &quot;The Government of Liberia (GoL) is committed to producing a Poverty Reduction Strategy Paper (PSRP). To do this, the GoL will need to undertake an analysis of qualitative and quantitative sources to understand the nature of poverty (&#39;Where are we?&#39;); to develop a macro-economic framework, and conduct broad based and participatory consultations to choose objectives, define and prioritize strategies (&#39;Where do we want to go? How far can we get?); and to develop a monitoring and evaluation system (&#39;How will we know when we get there?). The analysis of the nature of poverty, the Poverty Profile, will establish the overall rate of poverty incidence, identifying the poor in relation to their location, habits, occupations, means of access to and use of government services, and their living standards in regard to health, education, nutrition. Given the capacity constraints it has been agreed that this information will be collected in a single visit survey using the Core Welfare Indicators Questionnaire (CWIQ) survey with an additional module to cover household income, expenditure and consumption. This will provide information to estimate welfare levels &amp; poverty incidence, which can be combined and analyzed with the sectoral information from the main CWIQ questionnaire. While countries with more capacity usually do a household income, expenditure and consumption survey over 12 months, the single visit approach has been used in a number of countries (mainly in West Africa) fairly successfully.&quot;, geog_coverage = &quot;National&quot; ), method = list( data_collection = list( coll_mode = &quot;face to face interview&quot;, sampling_procedure = &quot;The CWIQ survey will be carried out on a sample of 3,600 randomly selected households located in 300 randomly selected clusters. This was the same basic sample used by the 2007 Liberian DHS. However, for Monrovia, a new listing was carried out and new EAs were chosen and the sampled households were chosen from that list. For rural areas, the same EAs were used but a new sample selection of housholds was drawn. Any household that may have participated in the LDHS was systematically eliminated. Twelve (12) households were selected in each of the 300 EA using systematic sampling. The total number of households and number of EAs sampled in each County are given in the table below. (More on the Sampling under the External Resources).&quot;, coll_situation = &quot;On average, the interview process lasted about about 2 hours 45 minutes. The Income and Expenditure questionnaire alone took about 2 hours to complete. In many occasions, the questionnaire was completed in 2 sitting sessions.&quot; ) ) ), # Information of data files data_files = list_df, # Information on variables variables = list_var ) # Publish the metadata in the NADA catalog microdata_add( idno = id, repositoryid = &quot;central&quot;, access_policy = &quot;licensed&quot;, published = 1, overwrite = &quot;yes&quot;, metadata = cwiq_ddi_metadata, thumbnail = thumb ) # Add links to data and documents external_resources_add( title = &quot;Liberia, CWIQ 2007, Dataset in Stata 15 format&quot;, idno = id, dcdate = &quot;2007&quot;, language = &quot;English&quot;, country = &quot;Liberia&quot;, dctype = &quot;dat/micro&quot;, file_path = &quot;LBR_CWIQ_2007_Stata15.zip&quot;, description = &quot;Liberia CWIQ dataset in Stata 15 format (2 data files)&quot;, overwrite = &quot;yes&quot; ) external_resources_add( title = &quot;Liberia, CWIQ 2007, Dataset in SPSS Windows format&quot;, idno = id, dcdate = &quot;2007&quot;, language = &quot;English&quot;, country = &quot;Liberia&quot;, dctype = &quot;dat/micro&quot;, file_path = &quot;LBR_CWIQ_2007_Stata15.zip&quot;, description = &quot;Liberia CWIQ dataset in SPSS for Windows [.sav] format (2 data files)&quot;, overwrite = &quot;yes&quot; ) external_resources_add( title = &quot;CWIQ 2007 Questionnaire&quot;, idno = id, dcdate = &quot;2007&quot;, language = &quot;English&quot;, country = &quot;Liberia&quot;, dctype = &quot;doc/ques&quot;, file_path = &quot;LCWIQ2007_.pdf&quot;, overwrite = &quot;yes&quot; ) After running the script, the metadata (and links) are available in the NADA catalog. "],["chapter06.html", "Chapter 6 Geographic data and services 6.1 Background 6.2 Geographic information metadata standards 6.3 Schema description 6.4 ISO 19110 Feature Catalogue (feature_catalogue) 6.5 Provenance 6.6 Tags 6.7 LDA topics 6.8 Embeddings 6.9 Additional 6.10 Complete examples 6.11 Useful tools", " Chapter 6 Geographic data and services 6.1 Background To make geographic information discoverable and to facilitate their dissemination and use, the ISO Technical Committee on Geographic Information/Geomatics (ISO/TC211) created a set of metadata standards to describe geographic datasets (ISO 19115), geographic data structures (ISO 19115-2 / ISO 19110), and geographic data services (ISO 19119). These standards have been “unified” into a common XML specification (ISO 19139). This set of standards, known as the ISO 19100 series, served as the cornerstone of multiple initiatives to improve the documentation and management of geographic information such as the Open Geospatial Consortium (OGC), the US Federal Geographic Data Committee (FDGC), the European INSPIRE directive, or more recently the Research Data Alliance (RDA), among others. The ISO 19100 standards have been designed to cover the large scope of geographic information. The level of detail they provide goes beyond the needs of most data curators. What we present in this Guide is a subset of the standards, which focuses on what we consider as the core requirements to describe and catalog geographic datasets and services. References and links to resources where more detailed information can be found are provided in appendix. 6.2 Geographic information metadata standards Geographic information metadata standards cover three types of resources: i) datasets, ii) data structure definitions, and iii) data services. Each one of these three components is the object of a specific standard. To support their implementation, a common XML specification (ISO 19139) covering the three standards has been developed. The geographic metadata standard is however, by far, the most complex and “specialized” of all schemas described in this Guide. Its use requires expertise not only in data documentation, but also in the use of geospatial data. We provide in this chapter some information that readers who are not familiar with geographic data may find useful to better understand the purpose and use of the geographic metadata standards. 6.2.1 Documenting geographic datasets - The ISO 19115 standard Geographic datasets “identify and depict geographic locations, boundaries and characteristics of features on the surface of the earth. They include geographic coordinates (e.g., latitude and longitude) and data associated to geographic locations (…)”. (Source: https://www.fws.gov/gis/) The ISO 19115 standard defines the structure and content of the metadata to be used to document geographic datasets. The standard is split into two parts covering: vector data (ISO 19115-1), and raster data including imagery and gridded data (ISO 19115-2). Vector and raster spatial datasets are built with different structures and formats. The following summarizes how these two categories differ and how they can be processed using the R software. The descriptions of vector and raster data provided in this chapter are adapted from: - https://gisgeography.com/spatial-data-types-vector-raster/ - https://datacarpentry.org/organization-geospatial/02-intro-vector-data/index.html] Vector data Vector data are comprised of points, lines, and polygons (areas). A vector point is defined by a single x, y coordinate. Generally, vector points are a latitude and longitude with a spatial reference frame. A point can for example represent the location of a building or facility. When multiple dots are connected in a set order, they become a vector line with each dot representing a vertex. Lines usually represent features that are linear in nature, like roads and rivers. Each bend in the line represents a vertex that has a defined x, y location. When a set of 3 or more vertices is joined in a particular order and closed (i.e. the first and last coordinate pairs are the same), it becomes a polygon. Polygons are used to show boundaries. They will typically represent lakes, oceans, countries and their administrative subdivisions (provinces, states, districts), building footprints, or outline of survey plots. Polygons have an area (which will correspond to the square-footage for a building footprint, to the acreage for an agricultural plot, etc.) Vector data are often provided in one of the following file formats: ESRI Shapefile (actually a zip set of files; not standard and limited as it is based on an outdated DBF format, but still widely used); ESRI GeoDatabase file (not a standard format, but widely used); GML: the Official OGC geospatial standard format, used by standard spatial data services; GeoPackage: the OGC recommended standard for handling vector data; GeoJSON: another OGC standard, often used when a service is associated to the data; KML/KMZ: Keyhole Markup Language, an XML notation for expressing geographic annotation and visualization within two-dimensional maps and three-dimensional Earth browsers; CSV file: Comma-separated values files, with geometries provided in OGC Well-Known-Text (WKT); OSM: An XML-formatted file containing “nodes” (points), “ways” (connections), and “relations” from OpenStreetMap format. Some examples EXAMPLE 1 The figure below provides an example of vector data extracted from Open Street Map for a part of the city of Thimphu, Bhutan (as of 17 May, 2021). The content of this map can be exported as an OSM file. Multiple applications will allow users to read and process OSM files, including open source software applications like QGIS or the R packages sf and osmdata # Example of a R script that reads and shows the content of the map.osm file library(sf) # List the layers contained in the OSM file lyrs &lt;- st_layers(&quot;map.osm&quot;) # Read the layers as sf objects points &lt;- st_read(&quot;map.osm&quot;, layer = &quot;points&quot;) lines &lt;- st_read(&quot;map.osm&quot;, layer = &quot;lines&quot;) polygons &lt;- st_read(&quot;map.osm&quot;, layer = &quot;multipolygons&quot;) EXAMPLE 2 In this second example, we use the R sf (Simple Features) package to read a shape (vector) file of refugee camps in Bangladesh, downloaded from the Humanitarian Data Exchange (HDX) website: # Load the sf package and utilities library(sf) library(utils) # Download and unzip the shape file (published by HDX as a compressed zip format) setwd(&quot;E:/my_data&quot;) url &lt;- &quot;https://data.humdata.org/dataset/1a67eb3b-57d8-4062-b562-049ad62a85fd/resource/ace4b0a6-ef0f-46e4-a50a-8c552cfe7bf3/download/200908_rrc_outline_camp_al1.zip&quot; download.file(url, destfile = &quot;200908_RRC_Outline_Camp_AL1.zip&quot;) unzip(&quot;E:/my_data/200908_RRC_Outline_Camp_AL1.zip&quot;) # Read the file and display core information about its content al1 &lt;- st_read(&quot;./200908_RRC_Outline_Camp_AL1/200908_RRC_Outline_Camp_AL1.shp&quot;) print(al1) plot(al1) # ------------------------------ # Output of the &#39;print&#39; command: # ------------------------------ # Simple feature collection with 35 features and 14 fields # geometry type: MULTIPOLYGON # dimension: XY # bbox: xmin: 92.12973 ymin: 20.91856 xmax: 92.26863 ymax: 21.22292 # geographic CRS: WGS 84 # First 10 features: # District Upazila Settlement Union Name_Alias SSID SMSD__Cnam NPM_Name Area_Acres PeriMe_Met # 1 Cox&#39;s Bazar Ukhia Collective site Palong Khali Bagghona-Putibonia CXB-224 Camp 16 Camp 16 (Potibonia) 130.57004 4136.730 # 2 Cox&#39;s Bazar Ukhia Collective site Palong Khali &lt;NA&gt; CXB-203 Camp 02E Camp 02E 96.58179 4803.162 # 3 ... # # Camp_Name Area_SqM Latitude Longitude geometry # 1 Camp 16 528946.95881724 21.1563813298438 92.1490685817901 MULTIPOLYGON (((92.15056 21... # 2 Camp 2E 391267.799744003 21.2078084302778 92.1643360947381 MULTIPOLYGON (((92.16715 21... # 3 ... # Output of &#39;str&#39; command: # Classes &#39;sf&#39; and &#39;data.frame&#39;: 35 obs. of 15 variables: # $ District : chr &quot;Cox&#39;s Bazar&quot; &quot;Cox&#39;s Bazar&quot; &quot;Cox&#39;s Bazar&quot; &quot;Cox&#39;s Bazar&quot; ... # $ Upazila : chr &quot;Ukhia&quot; &quot;Ukhia&quot; &quot;Ukhia&quot; &quot;Ukhia&quot; ... # $ Settlement: chr &quot;Collective site&quot; &quot;Collective site&quot; &quot;Collective site&quot; &quot;Collective site&quot; ... # $ Union : chr &quot;Palong Khali&quot; &quot;Palong Khali&quot; &quot;Palong Khali&quot; &quot;Raja Palong&quot; ... # $ Name_Alias: chr &quot;Bagghona-Putibonia&quot; NA &quot;Jamtoli-Baggona&quot; &quot;Kutupalong RC&quot; ... # $ SSID : chr &quot;CXB-224&quot; &quot;CXB-203&quot; &quot;CXB-223&quot; &quot;CXB-221&quot; ... # $ SMSD__Cnam: chr &quot;Camp 16&quot; &quot;Camp 02E&quot; &quot;Camp 15&quot; &quot;Camp KRC&quot; ... # $ NPM_Name : chr &quot;Camp 16 (Potibonia)&quot; &quot;Camp 02E&quot; &quot;Camp 15 (Jamtoli)&quot; &quot;Kutupalong RC&quot; ... # $ Area_Acres: num 130.6 96.6 243.3 95.7 160.4 ... # $ PeriMe_Met: num 4137 4803 4722 3095 4116 ... # $ Camp_Name : chr &quot;Camp 16&quot; &quot;Camp 2E&quot; &quot;Camp 15&quot; &quot;Kutupalong RC&quot; ... # $ Area_SqM : chr &quot;528946.95881724&quot; &quot;391267.799744003&quot; &quot;985424.393160958&quot; &quot;387729.666427279&quot; ... # $ Latitude : chr &quot;21.1563813298438&quot; &quot;21.2078084302778&quot; &quot;21.1606399787906&quot; &quot;21.2120281895357&quot; ... # $ Longitude : chr &quot;92.1490685817901&quot; &quot;92.1643360947381&quot; &quot;92.1428956454661&quot; &quot;92.1638095873048&quot; ... # $ geometry :sfc_MULTIPOLYGON of length 35; first list element: List of 1 # This information can be extracted and used to document the data The output of the script shows that the shape file contains 35 features (or “objects”; in this case each object represents a refugee camp) and 14 fields (attributes and variables; including information like the camp name, administrative region, surface area, and more) related to each object. The geometry type (multipolygon) and dimension (XY) provide information on the type of object. “All geometries are composed of points. Points are coordinates in a 2-, 3- or 4-dimensional space. All points in a geometry have the same dimensionality. In addition to X and Y coordinates, there are two optional additional dimensions: a Z coordinate, denoting the altitude; an M coordinate (rarely used), denoting some measure that is associated with the point, rather than with the feature as a whole (in which case it would be a feature attribute); examples could be time of measurement, or measurement error of the coordinates. The four possible cases then are: two-dimensional points refer to x and y, easting and northing, or longitude and latitude, referred to as XY three-dimensional points as XYZ three-dimensional points as XYM four-dimensional points as XYZM (the third axis is Z, the fourth is M) The following seven simple feature types are the most common: Type Description POINT zero-dimensional geometry containing a single point LINESTRING sequence of points connected by straight, non-self intersecting line pieces; one-dimensional geometry POLYGON geometry with a positive area (two-dimensional); sequence of points form a closed, non-self intersecting ring; the first ring denotes the exterior ring, zero or more subsequent rings denote holes in this exterior ring MULTIPOINT set of points; a MULTIPOINT is simple if no two Points in the MULTIPOINT are equal MULTILINESTRING set of linestrings MULTIPOLYGON set of polygons GEOMETRYCOLLECTION set of geometries of any type except GEOMETRYCOLLECTION The remaining ten geometries are rarer : CIRCULARSTRING, COMPOUNDCURVE, CURVEPOLYGON, MULTICURVE, MULTISURFACE, CURVE, SURFACE, POLYHEDRALSURFACE, TIN, TRIANGLE (see https://r-spatial.github.io/sf/articles/sf1.html). The geographic CRS informs us on the coordinate reference system (CRS). Coordinates can only be placed on the Earth’s surface when their CRS is known; this may be a spheroid CRS such as WGS 84, a projected, two-dimensional (Cartesian) CRS such as a UTM zone or Web Mercator, or a CRS in three-dimensions, or including time. In our example above, the CRS is the WGS 84 (World Geodetic System 84), a standard for use in cartography, geodesy, and satellite navigation including GPS. The bbox is the bounding box. Information on a subset (top 10 - only 2 shown above) of the features is displayed in the output of the script, with the list of the 14 available fields. The plot(al1) command in R produces a visualization of the numeric fields in the data file: All this information represents important components of the metadata, which we will want to capture, enrich, and catalog (together with additional information) using the ISO metadata standard. “Enriching” (or “augmenting”) the metadata will consist of providing more contextual information (who produced the data, when, why, etc.) and additional information on the features (e.g., what does the variable ’SMSD__Cnam’ represent?). Raster data Raster data are made up of pixels, also referred to as grid cells. Satellite imagery and other remote sensing data are raster datasets. Grid cells in raster data are usually (but not necessarily) regularly-spaced and square. Data stored in a raster format is arranged in a grid without storing the coordinates of each cell (pixel). The coordinates of the corner points and the spacing of the grid can be used to calculate (rather than to store) the coordinates of each location in a grid. Any given pixel in a grid stores one or more values (in one or more bands). For example, each cell (pixel) value in a satellite image has a red, a green, and a blue value. Cells in raster data could represent anything from elevation, temperature, rainfall, land cover, population density, or others. (Source: https://worldbank.github.io/OpenNightLights/tutorials/mod2_1_data_overview.html) Raster data can be discrete or continuous. Discrete rasters have distinct themes or categories. For example, one grid cell can represent a land cover class, or a soil type. In a discrete raster, each thematic class can be discretely defined (usually represented by an integer) and distinguished from other classes. In other words, each cell is definable and its value applies to the entire area of the cell. For example, the value 1 for a class might indicate “urban area”, value 2 “forest”, and value 3 “others”. Continuous (or non-discrete) rasters are grid cells with gradual changing values, which could for example represent elevation, temperature, or an aerial photograph. The difference between vector and raster data, and between different types of vectors, is clearly illustrated in the figure below taken from the World Bank’s Light Every Night GitHub repository. In GIS applications, vector and raster data are often combined into multi-layer datasets, as shown in the figure below extracted from the County of San Bernardino (US) website. We may occasionally want to convert raster data into vector data. For example, a building footprint layer (vector data, composed of polygons) can be derived from a satellite image (raster data). Such conversions can be implemented in a largely automated manner using machine learning algorithms. Source: https://blogs.bing.com/maps/2019-09/microsoft-releases-18M-building-footprints-in-uganda-and-tanzania-to-enable-ai-assisted-mapping Raster data are often provided in one of the following file formats: GeoTiFF (standard): Most of the remote sensing data are stored as GeoTIFF files. https://www.ogc.org/standards/geotiff NetCDF (standard) https://www.unidata.ucar.edu/software/netcdf/docs/netcdf_introduction.html ECW: https://en.wikipedia.org/wiki/ECW_(file_format) JPEG 2000: https://fr.wikipedia.org/wiki/JPEG_2000 MrSid: https://en.wikipedia.org/wiki/MrSID ArcGrid (ESRI Grid format) GeoTIFF is a popular file format for raster data. A Tagged Image File Format (TIFF or TIF) is a file format designed to store raster-type data. A GeoTIFF file is a TIFF file that contains specific tags to store structured geospatial metadata including: Spatial extent: the area coverage of the file Coordinate reference system: the projection / coordinate reference system used Resolution: the spatial extent of each pixel (spatial resolution) Number of layers: number of layers or bands available in the file TIFF files can be read using (among other options) the R package raster or the Python library rasterio. GeoTIFF files can also be provided as Cloud Optimized GeoTIFFS (COGs). In COGs, the data are structured in a way that allows them to be shared via web services which allow users to query, visualize, or download a user-defined subset of the content of the file, without having to download the entire file. This option can be a major advantage, as geoTIFF files generated by remote sensing/satellite imagery can be very large. Extracting only the relevant part of a file can save significant time and storage space. Some examples EXAMPLE 1 The first example below shows the spatial distribution of the Ethiopian population in 2020. The data file was downloaded from the WorldPop website on 17 May 2021. # Load the raster R package library(raster) # Download a TIF file (spatial distribution of population, Ethiopia, 2020) - 62Mb setwd(&quot;E:/my_data&quot;) url &lt;- &quot;https://data.worldpop.org/GIS/Population/Global_2000_2020_Constrained/2020/maxar_v1/ETH/eth_ppp_2020_constrained.tif&quot; file_name = basename(url) download.file(url, destfile = file_name, mode = &#39;wb&#39;) # Read the file and display core information about its content my_raster_file &lt;- raster(file_name) print(my_raster_file) # ------------------------------ # Output of the &#39;print&#39; command: # ------------------------------ # dimensions : 13893, 17983, 249837819 (nrow, ncol, ncell) # resolution : 0.0008333333, 0.0008333333 (x, y) # extent : 32.99958, 47.98542, 3.322084, 14.89958 (xmin, xmax, ymin, ymax) # crs : +proj=longlat +datum=WGS84 +no_defs # source : E:/my_data/eth_ppp_2020_constrained.tif # names : eth_ppp_2020_constrained # values : 1.36248, 847.9389 (min, max) This output shows that the TIF file contains one layer of cells, forming an image of 13,893 by 17,983 cells. It also provides information on the projection system (datum): WGS 84 (World Geodetic System 84). This information (and more) will be part of the ISO-compliant metadata we want to generate to document and catalog a raster dataset. EXAMPLE 2 In the second example, we demonstrate the advantages of Cloud Optimized GeoTIFFS (COGs). We extract information from the World Bank Light Every Night repository. # Load &#39;aws.s3&#39; package to access the Amazon Web Services (AWS) Simple Storage Service (s3) library(&quot;aws.s3&quot;) # Load &#39;raster&#39; package to read the target GeoTiFF library(&quot;raster&quot;) # List files for World Bank bucket &#39;globalnightlight&#39;, setting a max number of items contents &lt;- get_bucket(bucket = &#39;globalnightlight&#39;, max = 10000) # Get_bucket_df is similar to &#39;get_bucket&#39; but returns the list as a dataframe contents &lt;- get_bucket_df(bucket = &#39;globalnightlight&#39;) # Access DMSP-OLS data for satellite F12 in 1995 F12_1995 &lt;- get_bucket(bucket = &#39;globalnightlight&#39;, prefix = &quot;F121995&quot;) # As data.frame, with all objects listed F12_1995_df &lt;- get_bucket_df(bucket = &#39;globalnightlight&#39;, prefix = &quot;F121995&quot;, max = Inf) # Number of objects nrow(F12_1995_df) # Save the object filename &lt;- &quot;F12199501140101.night.OIS.tir.co.tif&quot; save_object(bucket = &#39;globalnightlight&#39;, object = &quot;F121995/F12199501140101.night.OIS.tir.co.tif&quot;, file = filename) # Read it with raster package rs &lt;- raster(filename) 6.2.2 Describing data structures - The ISO 19115-2 and ISO 19110 standards The ISO 19115-2 provides the necessary metadata elements to describe the structure of raster data. The ISO 19115-1 standard does not provide all necessary metadata elements needed to describe the structure of vector datasets. The description of data structures for vector data (also referred to as feature types) is therefore often omitted. The ISO 19110 standard solves that issue, by providing the means to document the structure of vector datasets (column names and definitions, codes and value labels, measurement units, etc.), which will contribute to making the data more discoverable and usable. 6.2.3 Describing data services - The ISO 19119 standard More and more data are disseminated not in the form of datasets, but as data services via web applications. “Geospatial services provide the technology to create, analyze, maintain, and distribute geospatial data and information.” (https://www.fws.gov/gis/) The ISO 19119 standard provides the elements to document such services. 6.2.4 Unified metadata specification - The ISO/TS 19139 standard The three metadata standards previously described - ISO 19115 for vector and raster datasets, ISO 19110 for vector data structures, and ISO 19119 for data services, provide a set of concepts and definitions useful to describe the geographic information. To facilitate their practical implementation, a digital specification, which defines how this information is stored and organized in an electronic metadata file, is required. The ISO/TS 19139 standard, an XML specification of the ISO 19115/10110/19119/, was created for that purpose. The ISO/TS 19139 is a standard used worldwide to describe geographic information. It is the backbone for the implementation of INSPIRE dataset and service metadata in the European Union. It is supported by a wide range of tools, including desktop applications like Quantum GIS, ESRI ArcGIS), and OGC-compliant metadata catalogs (e.g., GeoNetwork) and geographic servers (e.g., GeoServer). ISO 19139-compliant metadata can be generated and edited using specialized metadata editors such as CatMDEdit or QSphere, or using programmatic tools like Java Apache SIS or the R packages geometa and geoflow, among others. The ISO 19139 specification is complex. To enable and simplify its use in our NADA cataloguing application, we produced a JSON version of (part of) the standard. We selected the elements we considered most relevant for our purpose, and organized them into the JSON schema described below. For data curators with limited expertise in XML and geographic data documentation, this JSON schema will make the production of metadata compliant with the ISO 19139 standard easier. 6.3 Schema description Main structure (describe) @@@@ { &quot;repositoryid&quot;: &quot;string&quot;, &quot;published&quot;: 0, &quot;overwrite&quot;: &quot;no&quot;, &quot;metadata_information&quot;: {}, &quot;description&quot;: {}, &quot;provenance&quot;: [], &quot;tags&quot;: [], &quot;lda_topics&quot;: [], &quot;embeddings&quot;: [], &quot;additional&quot;: { } } 6.3.1 Introduction to ISO19139 Geographic metadata (for both datasets and services) should include core metadata properties, and metadata sections aiming to describe specific aspect of the resource (e.g., resource identification or resource distribution). The content of some metadata elements is controlled by codelists (or controlled vocabularies). A codelist is a pre-defined set of values. The content of an element controlled by a codelist should be selected from that list. This may for example apply to the element “language”, whose content should be selected from the ISO 639 list and codes codes for language names, instead of being free-text. The ISO 19139 suggests but does not impose codelists. It is highly recommended to make use of the suggested codelists (or of specific codelists that may be promoted by agencies or partnerships). Some metadata elements (referred to as common elements) of the ISO 19139 can be repeated in different parts of a metadata file. For example, a standard set of fields is provided to describe a contact, a citation, or a file format. Such common elements can be used in multiple locations of a metadata file (e.g., to provide information on who the contact person is for information on data quality, on data access, on data documentation, etc.) In the following sections, we first present the common elements, then the elements that form the core metadata properties (information on the metadata themselves), followed by the elements from the main metadata sections used to describe the data, and finally the features catalog elements which are used to document attributes and variables related to vector data (ISO 19110). 6.3.2 Common sets of elements Common elements are blocks of metadata fields that can appear in multiple locations of a metadata file. For example, information on contact person(s) or organization(s) may have to be provided in the section of the file where we document the production and maintenance of the data, where we document the production and maintenance of the metadata, where we document the distribution and terms of use of the data, etc. Other types of common elements include online and offline resources, file formats, citations, keywords, constraints, and extent. We describe these sets of elements below. 6.3.2.1 Contact / Responsible party The ISO 19139 specification provides a structured set of metadata elements to describe a contact. A contact is the party (person or organization) responsible for a specific task. The following set of elements can be used to describe a contact: Element Description individualName Name of the individual organisationName Name of the organization positionName Position of the individual in the organization contactInfo Contact information. The contact information is divided into 3 sections: phone(including either voice or facsimile numbers; address, handling the physical address elements (deliveryPoint, city, postalCode, country), contact e-mail (electronicEmailAddress), and onlineResource, e.g., the URL of the organization website (which includes linkage, name, description, protocol, and function ; see below) role Role of the person/organization. A recommended controlled vocabulary is provided by ISO 19139, with the following options: {resourceProvider, custodian, owner, sponsor, user, distributor, originator, pointOfContact, principalInvestigator, processor, publisher, author, coAuthor, collaborator, editor, mediator, rightsHolder, contributor, funder, stakeholder} &quot;contact&quot;: [ { &quot;individualName&quot;: &quot;string&quot;, &quot;organisationName&quot;: &quot;string&quot;, &quot;positionName&quot;: &quot;string&quot;, &quot;contactInfo&quot;: { &quot;phone&quot;: { &quot;voice&quot;: &quot;string&quot;, &quot;facsimile&quot;: &quot;string&quot; }, &quot;address&quot;: { &quot;deliveryPoint&quot;: &quot;string&quot;, &quot;city&quot;: &quot;string&quot;, &quot;postalCode&quot;: &quot;string&quot;, &quot;country&quot;: &quot;string&quot;, &quot;electronicMailAddress&quot;: &quot;string&quot; }, &quot;onlineResource&quot;: { &quot;linkage&quot;: &quot;string&quot;, &quot;name&quot;: &quot;string&quot;, &quot;description&quot;: &quot;string&quot;, &quot;protocol&quot;: &quot;string&quot;, &quot;function&quot;: &quot;string&quot; } }, &quot;role&quot;: &quot;string&quot; } ] 6.3.2.2 Online resource An online resource is a common set of elements frequently used in the geographic data/services schema. It can be used for example to provide a link to an organization website, to a data file or to a document, etc. An online resource is described with the following properties: Element Description linkage URL of the online resource. In case of a geographic standard data services, only the base URL should be provided, without any service parameter. name Name of the online resource. In case of a geographic standard data services, this should be filled with the identifier of the resource as published in the service. Example, for an OGC Web Map Service (WMS), we will use the layer name. description Description of the online resource protocol Web protocol used to get the resource, e.g., FTP, HTTP. In case of a basic HTTP, the ISO 19139 suggests the value ‘WWW:LINK-1.0-http–link’. For geographic standard data services, it is recommended to fill this element with the appropriate protocol identifier. For an OGC Web Map Service (WMS) link for example, use ‘OGC:WMS-1.1.0-http-get-map’ function Function (purpose) of the online resource. &quot;onlineResource&quot;: { &quot;linkage&quot;: &quot;string&quot;, &quot;name&quot;: &quot;string&quot;, &quot;description&quot;: &quot;string&quot;, &quot;protocol&quot;: &quot;string&quot;, &quot;function&quot;: &quot;string&quot; } 6.3.2.3 Offline resource (Medium) An offline resource (medium) is a common set of elements that can be used to describe a physical resource used to distribute a dataset, e.g., a DVD or a CD-ROM. A medium is described with the following properties: Element Description name Name of the medium, eg. ‘dvd’. Recommended code following the ISO/TS 19139 MediumName codelist. Suggested values: {cdRom, dvd, dvdRom, 3halfInchFloppy, 5quarterInchFloppy, 7trackTape, 9trackType, 3480Cartridge, 3490Cartridge, 3580Cartridge, 4mmCartridgeTape, 8mmCartridgeTape, 1quarterInchCartridgeTape, digitalLinearTape, onLine, satellite, telephoneLink, hardcopy} density Density (list of) at which the data is recorded densityUnit Unit(s) of measure for the recording density volumes Number of items in the media identified mediumFormat Method used to write to the medium, e.g. tar . Recommended code following the ISO/TS 19139 MediumFormat codelist. Suggested values: {cpio, tar, highSierra, iso9660, iso9660RockRidge, iso9660AppleHFS, udf} mediumNote Description of other limitations or requirements for using the medium 6.3.2.4 File format The table below lists the ISO 19139 elements used to document a file format. A format is defined at a minimum by its name. It is also recommended to provide a version, and possibly a format specification. It is good practice to provide a standardized format name, using the file’s mime type, e.g., text/csv, image/tiff. A list of available mime types is available from the IANA website. Element Description name Format name - Recommended version Format version (if applicable) - Recommended amendmentNumber Amendment number (if applicable) specification Name of the specification - Recommended fileDecompressionTechnique Technique for file decompression (if applicable) FormatDistributor Contact(s) responsible of the distribution &quot;resourceFormat&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;version&quot;: &quot;string&quot;, &quot;amendmentNumber&quot;: &quot;string&quot;, &quot;specification&quot;: &quot;string&quot;, &quot;fileDecompressionTechnique&quot;: &quot;string&quot;, &quot;FormatDistributor&quot;: { &quot;individualName&quot;: &quot;string&quot;, &quot;organisationName&quot;: &quot;string&quot;, &quot;positionName&quot;: &quot;string&quot;, &quot;contactInfo&quot;: {}, &quot;role&quot;: &quot;string&quot; } } ] 6.3.2.5 Citation The citation is another common element that can be used in various parts of a geographic metadata file. Citations are used to provide detailed information on external resources related to the dataset or service being documented. A citation can be defined using the following set of (mostly optional) elements: Element Description title Title of the resource alternateTitle An alternate title (if applicable) date Date(s) associated to a resource, with sub-elements date and type. This may include different types of dates. The type of date should be provided, and selected from the controlled vocabulary proposed by the ISO 19139: date of {creation, publication, revision, expiry, lastUpdate, lastRevision, nextUpdate, unavailable, inForce, adopted, deprecated, superseded, validityBegins, validityExpires, released, distribution} edition Edition of the resource editionDate Edition date identifier A unique persistent identifier for the metadata. If a DOI is available for the resource, the DOI should be entered here. The same fileIdentifier should be used if no other persistent identifier is available. citedResponsibleParty Contact(s)/party(ies) responsible for the resource. presentationForm Form in which the resource is made available. The ISO 19139 recommends the following controlled vocabulary: {documentDigital, imageDigital, documentHardcopy, imageHardcopy, mapDigital, mapHardcopy, modelDigital, modelHardcopy, profileDigital, profileHardcopy, tableDigital, tableHardcopy, videoDigital, videoHardcopy, audioDigital, audioHardcopy, multimediaDigital, multimediaHardcopy, physicalSample, diagramDigital, diagramHardcopy}. For a geospatial dataset or web-layer, the value mapDigital will be preferred. series A description of the series, in case the resource is part of a series. This include the series name, issueIdentification and page otherCitationDetails Any other citation details to specify collectiveTitle A title in case the resource is part of a broader resource (e.g., data collection) ISBN International Standard Book Number (ISBN); an international standard identification number for uniquely identifying publications that are not intended to continue indefinitely. ISSN International Standard Serial Number (ISSN); an international standard for serial publications. &quot;citation&quot;: { &quot;title&quot;: &quot;string&quot;, &quot;alternateTitle&quot;: &quot;string&quot;, &quot;date&quot;: [ { &quot;date&quot;: &quot;string&quot;, &quot;type&quot;: &quot;string&quot; } ], &quot;edition&quot;: &quot;string&quot;, &quot;editionDate&quot;: &quot;string&quot;, &quot;identifier&quot;: { &quot;authority&quot;: &quot;string&quot;, &quot;code&quot;: null }, &quot;citedResponsibleParty&quot;: [], &quot;presentationForm&quot;: [ &quot;string&quot; ], &quot;series&quot;: { &quot;name&quot;: &quot;string&quot;, &quot;issueIdentification&quot;: &quot;string&quot;, &quot;page&quot;: &quot;string&quot; }, &quot;otherCitationDetails&quot;: &quot;string&quot;, &quot;collectiveTitle&quot;: &quot;string&quot;, &quot;ISBN&quot;: &quot;string&quot;, &quot;ISSN&quot;: &quot;string&quot; } 6.3.2.6 Keywords Keywords contribute significantly to making a resource more discoverable. Entering a list of relevant keywords is therefore highly recommended. Keywords can, but do not have to be selected from a controlled vocabulary (thesaurus). Keywords are documented using the following elements: Element Description type Keywords type. The ISO 19139 provides a recommended controlled vocabulary with the following options: {dataCenter, discipline, place, dataResolution, stratum, temporal, theme, dataCentre, featureType, instrument, platform, process, project, service, product, subTopicCategory} keyword The keyword itself. When possible, existing vocabularies should be preferred to writing free-text keywords. An example of global vocabulary is the Global Change Master Directory that could be a valuable source to reference data domains / disciplines, or the UNESCO Thesaurus. thesaurusName A reference to a thesaurus (if applicable) from which the keywords are extracted. The thesaurus itself should then be documented as a citation. &quot;keywords&quot;: [ { &quot;type&quot;: &quot;string&quot;, &quot;keyword&quot;: &quot;string&quot;, &quot;thesaurusName&quot;: &quot;string&quot; } ] 6.3.2.7 Constraints @@@@ not clear. where is the element useLimitations? … what are the elements used in the schema? The constraints common set of elements will be used to document legal and security constraints associated with the documented dataset or data service. Both types of constraints have one property in common, useLimitation, used to describe the use limitation(s) as free text. &quot;resourceConstraints&quot;: [ { &quot;legalConstraints&quot;: { &quot;useLimitation&quot;: [ &quot;string&quot; ], &quot;accessConstraints&quot;: [ &quot;string&quot; ], &quot;useConstraints&quot;: [ &quot;string&quot; ], &quot;otherConstraints&quot;: [ &quot;string&quot; ] }, &quot;securityConstraints&quot;: { &quot;useLimitation&quot;: [ &quot;string&quot; ], &quot;classification&quot;: &quot;string&quot;, &quot;userNote&quot;: &quot;string&quot;, &quot;classificationSystem&quot;: &quot;string&quot;, &quot;handlingDescription&quot;: &quot;string&quot; } } ] In addition to the useLimitation element, legal constraints (legalConstraints) can be described using the following three metadata elements: Element Description accessConstraints Access constraints. The ISO 19139 provides a controlled vocabulary with the following options: {copyright, patent, patentPending, trademark, license, intellectualPropertyRights, restricted, otherRestrictions, unrestricted, licenceUnrestricted, licenceEndUser, licenceDistributor, private, statutory, confidential, SBU, in-confidence} useConstraints Use constraints. To be entered as free text. Filling this element will depend on the resource that is described. As best practice recommended to fill this element, this is where terms of use, disclaimers, preferred citation or* even data limitations can be captured otherConstraints Any other constraints related to the resource. In addition to the useLimitation element, security constraints (securityConstraints) - which applies essentially to classified resources - can be described using the following four metadata elements: Element Description classification Classification code. The ISO 19139 provides a controlled vocabulary with the following options: {unclassified, restricted, confidential, secret, topSecret, SBU, forOfficialUseOnly, protected, limitedDistribution} userNote Note to users (free text) classificationSystem Information on the system used to classify the information. Organizations may have their own system to classify the information. handlingDescription Additional free-text description of the classification 6.3.2.8 Extent The extent defines the boundaries of the dataset in space (horizontally and vertically) and in time. The ISO 19139 standard defines the extent as follows: Element Description geographicElement Spatial (horizontal) extent element. This can be defined either with a geographicBoundingBox providing the coordinates bounding the limits of the dataset, by means of four properties: southBoundLongitude, westBoundLongitude, northBoundLongitude, eastBoundLongitude (recommended); or using geographicDescription - free text that defines the area covered. When the dataset covers one or more countries, it is recommended to enter the country names in this element, as it can then be used in data catalogs for filtering by geography. verticalElement Spatial (vertical) extent element, providing two properties: minimumValue, maximumValue and verticalCRS (reference to the vertical coordinate reference system) temporalElement Temporal extent element. Depending on the temporal characteristics of the dataset, this will consist in a TimePeriod (made of a beginPosition and endPosition) or a TimeInstant (made of a single timePosition) referencing date/time information according to ISO 8601 &quot;extent&quot;: { &quot;geographicElement&quot;: [ { &quot;geographicBoundingBox&quot;: { &quot;westBoundLongitude&quot;: -180, &quot;eastBoundLongitude&quot;: -180, &quot;southBoundLatitude&quot;: -180, &quot;northBoundLatitude&quot;: -180 }, &quot;geographicDescription&quot;: &quot;string&quot; } ], &quot;temporalElement&quot;: [ { &quot;extent&quot;: null } ], &quot;verticalElement&quot;: [ { &quot;minimumValue&quot;: 0, &quot;maximumValue&quot;: 0, &quot;verticalCRS&quot;: null } ] } 6.3.3 Core metadata properties A set of elements is provided in the ISO 19139 to document the core properties of the metadata (not the data). With a few exceptions, these elements apply to the metadata related to datasets and data services. The table below summarizes these elements and their applicability. A description of the elements follows. Property Description Used in dataset metadata Used in service metadata fileIdentifier Unique persistent identifier for the resource Yes - language Main language used in the metadata description Yes Yes characterSet Character set encoding used in the metadata description Yes Yes parentIdentifier Unique persistent identifier of the parent resource (if any) Yes Yes hierarchyLevel Scope(s) / hierarchy level(s) of the resource. List of pre-defined values suggested by the ISO 19139. See details below. Yes Yes hierarchyLevelName Alternative name definitions for hierarchy levels Yes Yes contact contact(s) associated to the metadata, i.e. persons/organizations in charge of the metadata create/edition/maintenance. For more details, see section on common elements Yes Yes dateStamp Date and time when the metadata record was created or updated Yes Yes metadataStandardName Reference or name of the metadata standard used. Yes Yes metadataStandardVersion Version of the metadata standard. For the ISO/TC211, the version corresponds to the creation/revision year. Yes Yes dataSetURI Unique persistent link to reference the database Yes - &quot;description&quot;: { &quot;idno&quot;: &quot;string&quot;, &quot;language&quot;: &quot;string&quot;, &quot;characterSet&quot;: { &quot;codeListValue&quot;: &quot;string&quot;, &quot;codeList&quot;: &quot;string&quot; }, &quot;parentIdentifier&quot;: &quot;string&quot;, &quot;hierarchyLevel&quot;: [], &quot;hierarchyLevelName&quot;: [], &quot;contact&quot;: [], &quot;dateStamp&quot;: &quot;string&quot;, &quot;metadataStandardName&quot;: &quot;string&quot;, &quot;metadataStandardVersion&quot;: &quot;string&quot;, &quot;dataSetURI&quot;: &quot;string&quot; } 6.3.3.1 Resource identifier (idno) The idno must provide a unique and persistent identifier for the resource (dataset or service). A common approach consists in building a semantic identifier, constructed by concatenating some owner and data characteristics. Although this approach offers the advantages of readability of the identifier, it may not guarantee its global uniqueness and its persistence in time. The use of time periods and/or geographic extents as components of a file identifier is not recommended, as these elements may evolve over time. The use of random identifiers such as the Universally Unique Identifiers (UUID) is sometimes suggested as an alternative, but this approach is also not recommended. The use of Digital Object Identifiers (DOI) as global and unique file identifiers is recommended. 6.3.3.2 Language (language) The metadata language refers to the main language used in the metadata. The recommended practice is to use the ISO 639-2 Language Code List (also known as the alpha-3 language code), e.g. ‘eng’ for English or ‘fra’ for French. 6.3.3.3 Character set (characterSet) The character set encoding of the metadata description. The best practice is to use the utf8 encoding codelist value (UTF-8 encoding). It is capable of encoding all valid character code points in Unicode, a standard for the consistent encoding, representation, and handling of text expressed in most of the world’s writing systems. The World Wide Web Consortium recommends UTF-8 as the default encoding in XML and HTML. UTF-8 is the most common encoding for the World Wide Web. Many text editors will provide you with an option to save your metadata (text) files in UTF-8, which will often be the default option (see below the example of Notepad++ and R Studio). 6.3.3.4 Parent Identifier (parentIdentifier) A geographic data resource can be a subset of a larger dataset. For example, an aquatic species distribution map can be part of a data collection covering all species, or the 2010 population census dataset of a country can be part of a dataset that includes all population censuses for that country since 1900. In such case, the parent identifier metadata element can be used to identify this higher-level resource. As for the fileIdentifier, the parentIdentifier must be a unique identifier persistent in time. In a data catalog, a parentIdentifier will allow the user to move from one dataset to another. The parentIdentifier is generally applied to datasets, although it may in some cases be used in data services descriptions. 6.3.3.5 Hierarchy level(s) (hierarchyLevel) &quot;hierarchyLevel&quot;: [ &quot;string&quot; ] The hierarchylevel defines the scope of the resource. It indicates whether the resource is a collection, a dataset, a series, a service, or another type of resource. The ISO 19139 provides a controlled vocabulary for this element. It is recommended but not mandatory to make use of it. The most relevant levels for the purpose of cataloguing geographic data and services are dataset (for both raster and vector data), service (a capability which a service provider entity makes available to a service user entity through a set of interfaces that define a behavior), and series. Series will be used when the data represent an ordered succession, in time or in space; this will typically apply to time series, but it can also be used to describe other types of series (e.g., a series of ocean water temperatures collected at a succession of depths). The recommended controlled vocabulary for hierarchylevel includes: {dataset, series, service, attribute, attributeType, collectionHardware, collectionSession, nonGeographicDataset, dimensionGroup, feature, featureType, propertyType, fieldSession, software, model, tile, initiative, stereomate, sensor, platformSeries, sensorSeries, productionSeries, transferAggregate, otherAggregate} 6.3.3.6 Hierarchy level name(s) (hierarchyLevelname) &quot;hierarchyLevelName&quot;: [ &quot;string&quot; ] The hierarchyLevelName provides an alternative to describe hierarchy levels, using free text instead of a controlled vocabulary. The use of hierarchyLevel is preferred to the use of hierarchylevelName. 6.3.3.7 Contact(s) (contact) The contact element is a common element described in the common elements section of this chapter. When associated to the metadata, it is used to identify the person(s) or organization(s) in charge of the creation, edition, and maintenance of the metadata. The contact(s) responsible for the metadata are not necessarily the ones who are responsible for the dataset/service creation/edition/maintenance. The latter will be documented in the dataset identification elements of the metadata file. 6.3.3.8 Date stamp (dateStamp) The date stamp associated to the metadata. The metadata date stamp may be automatically filled by metadata editors, and will ideally use the standard ISO 8601 date format: YYYY-MM-DD (possibly with a time). 6.3.3.9 Metadata standard name (metadataStandardName) The name of the geographic metadata standard used to describe the resource. The recommended values are: in the case of vector dataset metadata: ISO 19115 Geographic information - Metadata in the case of grid/imagery dataset metadata: ISO 19115-2 Geographic Information - Metadata Part 2 Extensions for imagery and gridded data in the case of service metadata: ISO 19119 Geographic information - Services 6.3.3.10 Metadata standard version (metadataStandardVersion) The version of the metadata standard being used. It is good practice to enter the standard’s inception/revision year. ISO standards are revised with an average periodicity of 10-year. Although the ISO TC211 geographic information metadata standards have been reviewed, it is still accepted to refer to the original version of the standard as many information systems/catalogs still make use of that version. The recommended values are: in the case of vector dataset metadata: ISO 19115:2003 in the case of grid/imagery dataset metadata: ISO 19115-2:2009 in the case of service metadata: ISO 19119:2005 6.3.3.11 Dataset URI (datasetURI) A unique resource identifier for the dataset, such as a web link that uniquely identifies the dataset. The use of a Digital Object Identifier (DOI) is recommended. 6.3.4 Main metadata sections Geographic data can be diverse and complex. Users need detailed information to discover data and to use them in an informed and responsible manner. The core of the information on data will be provided in various sections of the metadata file. This will include information on the type of data, on the coordinate system being used, on the scope and coverage of the data, on the format and location of the data, on possible quality issues that users need to be aware of, and more. The table below summarizes the main metadata sections, by order of appearance in the ISO 19139 specification. &quot;description&quot;: { &quot;spatialRepresentationInfo&quot;: [], &quot;referenceSystemInfo&quot;: [], &quot;identificationInfo&quot;: [], &quot;contentInfo&quot;: [], &quot;distributionInfo&quot;: {}, &quot;dataQualityInfo&quot;: [], &quot;metadataMaintenance&quot;: {} } Section Description Usability in dataset metadata Usability in service metadata spatialRepresentationInfo The spatial representation of the dataset. Distinction is made between vector and grid (raster) spatial representations. Yes - referenceSystemInfo The reference systems used in the resource. In practice, this will often be limited to the geographic coordinate system. Yes Yes identificationInfo Identifies the resource, including descriptive elements (eg. title, purpose, abstract, keywords) and contact(s) having a role in the resource provision. See details below Yes Yes contentInfo The content of a dataset resource, i.e. how the dataset is structured (dimensions, attributes, variables, etc.). In the case of vector datasets, this relates to separate metadata files compliant with the ISO 19110 standard (Feature Catalogue). In the case of raster / gridded data, this is covered by the ISO 19115-2 extension for imagery and gridded data. Yes - distributionInfo The mode(s) of distribution of the resource (format, online resources), and by whom it is distributed. Yes Yes dataQualityInfo The quality reports on the resource (dataset or service), and in case of datasets, on the provenance / lineage information giving the process steps performed to obtain the dataset resource. Yes Yes metadataMaintenanceInfo The metadata maintenance cycle operated for the resource. Yes Yes These sections are described in more detail below. 6.3.4.1 Spatial representation (spatialRepresentationInfo) &quot;spatialRepresentationInfo&quot;: [ { &quot;vectorSpatialRepresentation&quot;: { &quot;topologyLevel&quot;: &quot;string&quot;, &quot;geometricObjects&quot;: [ { &quot;geometricObjectType&quot;: &quot;string&quot;, &quot;geometricObjectCount&quot;: 0 } ] }, &quot;gridSpatialRepresentation&quot;: { &quot;numberOfDimensions&quot;: 0, &quot;axisDimensionProperties&quot;: [ { &quot;dimensionName&quot;: &quot;string&quot;, &quot;dimensionSize&quot;: 0, &quot;resolution&quot;: 0 } ], &quot;cellGeometry&quot;: &quot;string&quot;, &quot;transformationParameterAvailability&quot;: true } } ] Information on the spatial representation is critical to properly describe a geospatial dataset. The ISO/TS 19139 distinguishes two types of spatial representations, characterized by different properties. The vector spatial representation describes the topology level and the geometric objects of vector datasets using the following two properties: Topology level (topologyLevel) is the type of topology used in the vector spatial dataset. The ISO 19139 provides a controlled vocabulary with the following options: {geometryOnly, topology1D, planarGraph, fullPlanarGraph, surfaceGraph, fullSurfaceGraph, topology3D, fullTopology3D, abstract}. In most cases, vector datasets will be described as geometryOnly which covers common geometry types (points, lines, polygons). Geometric objects (geometricObjects) will define: Geometry type (geometricObjectType): The type of geometry handled. Possible values are: {complex, composite, curve, point, solid, surface}. Geometry count (geometricObjectCount): The number (count) of geometries in the dataset. In the case of an homogeneous geometry type, a single geometricObjectselement can be defined. For complex geometries (mixture of various geometry types), one geometricObjects element will be defined for each geometry type. The grid spatial representation describes gridded (raster) data using the following three properties: Number of dimensions (numberOfDimensions) in the grid. Axis dimension properties (axisDimensionProperties): a list of each dimension including, for each dimension: The name of the dimension type (dimensionName): the ISO 19139 provides a controlled vocabulary with the following options: {row, column, vertical, track, crossTrack, line, sample, time}. These options represent the following: row: ordinate (y) axis column: abscissa (x) axis vertical: vertical (z) axis track: along the direction of motion of the scan point crossTrack: perpendicular to the direction of motion of the scan point line: scan line of a sensor sample: element along a scan line time: duration In the Ethiopia population density file we used as an example of raster data, the types of dimensions will be row and column as the file is a spatial 2D raster. If we had a data with elevation or time dimensions, we would use respectively “vertical” and “time” dimension as name types. The dimension size (dimensionSize): the length of the dimension. The dimension resolution: a resolution number associated to a unit of measurement. This is the resolution of the grid cell dimension. For example: for longitude/latitude dimensions, and a grid at 1deg x 5deg, the ‘row’ dimension will have a resolution of 1 deg, and the ‘column’ dimension will have a resolution of 5 deg for a “vertical” dimension, this will represent the elevation step. For example, the vertical resolution of the mean Ozone concentration between 40m and 50m altitude at a location of longitude x/ latitude y would be 10 m. similar: in case of a spatial-temporal grid, the “time” resolution will represent the time lag (e.g., 1 year, 1 month, 1 week, etc.) between two measures. Cell geometry type (cellGeometry): The type of geometry used for grid cells. Possible values are: {point, area, voxel, stratum} Most “grids” are commonly area-based, but in principle a grid goes beyond this and the grid cells can target a point, an area, or a volume. point: each cell represents a point area: each cell represents an area voxel: each cell represents a volumetric measurement on a regular grid in a three dimensional space stratum: height range for a single point vertical profile 6.3.4.2 Reference system(s) (referenceSystemInfo) The reference system(s) typically (but not necessarily) applies to the geographic reference system of the dataset. Multiple reference systems can be listed if a dataset is distributed with different spatial reference systems. This block of elements may also apply to service metadata. A spatial web-service may support several map projections / geographic coordinate reference systems. &quot;referenceSystemInfo&quot;: [ { &quot;code&quot;: &quot;string&quot;, &quot;codeSpace&quot;: &quot;string&quot; } ] A reference system is defined by two properties: the identifier of the reference system. The recommended practice is to use to the Spatial Reference IDentifier (SRID) number. For example, the SRID of the World Geodetic System (WGS 84) is 4326. the code space of the source authority providing the SRID. The best practice is to use the EPSG authority code EPSG (as most of geographic reference systems are registered in it). Codes from other authorities can be used to define ad-hoc projections, for example: ESRI:54012 (Eckert IV equal area projection) EPSG:4326 (World Geodetic System 84 - aka WGS84), the system used for GPS EPSG:3857 (Web Mercator / Pseudo-Mercator) - widely used for map visualization from web map tile providers. The main reference system registry is EPSG, which provides a “search by name” tool for users who need to find a SRID (global or local/country-specific). Other websites reference geographic systems, but are not authoritative sources including http://epsg.io/ and https://spatialreference.org/ The advantage of these sites is that they go beyond the EPSG registry, and handle other specific registries given by providers like ESRI. The following ESRI projections could be relevant, in particular those in support of world equal-area projected maps (maps conserving area proportions): ESRI:54012 (Eckert IV) ESRI:54009 (Mollweide) ESRI:54030 (Robinson) 6.3.4.3 Identification (identificationInfo) The identification information (identificationInfo) is where the citation elements of the resource will be provided. This may include descriptive information like title, abstract, purpose, keywords, etc., and identification of the parties/contact(s) associated with the resource, such as the owner, publisher, co-authors, etc. Providing and publishing detailed information in these elements will contribute significantly to improving the discoverability of the data. &quot;identificationInfo&quot;: [ { &quot;citation&quot;: {}, &quot;abstract&quot;: &quot;string&quot;, &quot;purpose&quot;: &quot;string&quot;, &quot;credit&quot;: &quot;string&quot;, &quot;status&quot;: &quot;string&quot;, &quot;pointOfContact&quot;: [], &quot;resourceMaintenance&quot;: [], &quot;graphicOverview&quot;: [], &quot;resourceFormat&quot;: [], &quot;descriptiveKeywords&quot;: [], &quot;resourceConstraints&quot;: [], &quot;resourceSpecificUsage&quot;: [], &quot;aggregationInfo&quot;: {}, &quot;extent&quot;: {}, &quot;spatialRepresentationType&quot;: &quot;string&quot;, &quot;spatialResolution&quot;: {}, &quot;language&quot;: [], &quot;characterSet&quot;: [], &quot;topicCategory&quot;: [], &quot;supplementalInformation&quot;: &quot;string&quot;, &quot;serviceIdentification&quot;: {} } ] The identification of a resource includes elements that are common to both datasets and data services, and others that are specific to the type of resource. The following table summarizes the identification elements that can be used for dataset, service, or both. Identification elements applicable to datasets and data services The following metadata elements apply to resources of type dataset and service. Element Description citation A citation set of elements that will describe the dataset/service from a citation perspective, including title, associated contacts, etc. For more details, see section on common elements abstract An abstract for the dataset/service resource purpose A statement describing the purpose of the dataset/service resource credit Credit information. status Status of the resource, with the following recommended controlled vocabulary: {completed, historicalArchive, obsolete, onGoing, planned, required, underDevelopment, final, pending, retired, superseded, tentative, valid, accepted, notAccepted, withdrawn, proposed, deprecated} pointOfContact One ore more points of contacts to associate with the resource. People that can be contacted for information on the dataset/service. For more details, see section contact in the common elements section of the chapter. resourceMaintenance Information on how the resource is maintained, essentially informing on the maintenance and update frequency (maintenanceAndUpdateFrequency). This frequency should be chosen among possible values recommended by the ISO 19139 standard: {continual, daily, weekly, fortnightly, monthly, quarterly, biannually, annually, asNeeded, irregular, notPlanned, unknown}. graphicOverview One or more graphic overview(s) that provide a visual identification of the dataset/service. e.g., a link to a map overview image. A graphicOverview will be defined with 3 properties fileName (or URL), fileDescription, and optionally a fileType. resourceFormat Resource format(s) description. For more details on how to describe a format, see the common elements section of the chapter. descriptiveKeywords A set of keywords that describe the dataset. Keywords are grouped by keyword type, with the possibility to associate a thesaurus (if applicable). For more details how to describe keywords, see the common elements section of the chapter. resourceConstraints Legal and/or Security constraints associated to the resource. For more details how to describe constraints, see the common elements section of the chapter resourceSpecificUsage Information about specific usage(s) of the dataset/service, e.g., a research paper, a success story, etc. aggregationInfo Information on an aggregate or parent resource to which the resource belongs, i.e. a collection. Resource maintenance &quot;resourceMaintenance&quot;: [ { &quot;maintenanceAndUpdateFrequency&quot;: &quot;string&quot; } ] Graphic overview &quot;graphicOverview&quot;: [ { &quot;fileName&quot;: &quot;string&quot;, &quot;fileDescription&quot;: &quot;string&quot;, &quot;fileType&quot;: &quot;string&quot; } ] Resource specific usage &quot;resourceSpecificUsage&quot;: [ { &quot;specificUsage&quot;: &quot;string&quot;, &quot;usageDateTime&quot;: &quot;string&quot;, &quot;userDeterminedLimitations&quot;: &quot;string&quot;, &quot;userContactInfo&quot;: [] } ] For userContactInfo, seee common elements Contact Aggregation information &quot;aggregationInfo&quot;: { &quot;aggregateDataSetName&quot;: &quot;string&quot;, &quot;aggregateDataSetIdentifier&quot;: &quot;string&quot;, &quot;associationType&quot;: &quot;string&quot;, &quot;initiativeType&quot;: &quot;string&quot; } Identification elements applicable to datasets The following metadata elements are specific to resources of type dataset. Element Description spatialRepresentationType The spatial representation type of the dataset. Values should be selected from the following controlled vocabulary: {vector, grid, textTable, tin, stereoModel, video} spatialResolution The spatial resolution of the data as numeric value associated to a unit of measure. language The language used in the dataset. characterSet The character set encoding used in the dataset. topicCategory The topic category(ies) characterizing the dataset resource. Values should be selected from the following controlled vocabulary: {farming, biota, boundaries, climatologyMeteorologyAtmosphere, economy, elevation, environment, geoscientificInformation, health, imageryBaseMapsEarthCover, intelligenceMilitary, inlandWaters, location, oceans, planningCadastre, society, structure, transportation, utilitiesCommunication, extraTerrestrial, disaster} extent Defines the spatial (horizontal and vertical) and temporal region to which the content of the resource applies. For more details, see the common elements section of the chapter supplementalInformation Any additional information, provided as free text. Spatial resolution, language, characterset, and topic category &quot;spatialResolution&quot;: { &quot;uom&quot;: &quot;string&quot;, &quot;value&quot;: 0 }, &quot;language&quot;: [ &quot;string&quot; ], &quot;characterSet&quot;: [ { &quot;codeListValue&quot;: &quot;string&quot;, &quot;codeList&quot;: &quot;string&quot; } ], &quot;topicCategory&quot;: [ &quot;string&quot; ] Identification elements applicable to data services The following metadata elements are specific to resources of type service. Element Description serviceType The type of service (as free text),eg. OGC:WMS serviceTypeVersion The version of the service e.g. 1.3.0 accessProperties Access properties, including description of fees, plannedAvailableDateTime, orderingInstructions and turnaround restrictions Legal and/or Security constraints associated to the service. For more details, see the common elements section of the chapter. keywords Set of service keywords. For more details, see the common elements section of the chapter. extent Defines the spatial (horizontal and vertical) and temporal region to which the service applies (if applicable). see the common elements section of the chapter. coupledResource Eventual resource(s) coupled to a service operation. couplingType The type of coupling between service and coupled resources. Values should be selected from the following controlled vocabulary: {loose, mixed, tight} containsOperations Operation(s) available for the service. See below for details. operatesOn List of dataset identifiers on which the service operates. &quot;serviceIdentification&quot;: { &quot;serviceType&quot;: &quot;string&quot;, &quot;serviceTypeVersion&quot;: &quot;string&quot;, &quot;accessProperties&quot;: { &quot;fees&quot;: &quot;string&quot;, &quot;plannedAvailableDateTime&quot;: &quot;string&quot;, &quot;orderingInstructions&quot;: &quot;string&quot;, &quot;turnaround&quot;: &quot;string&quot; }, &quot;restrictions&quot;: [], &quot;keywords&quot;: [], &quot;coupledResource&quot;: [ { &quot;operationName&quot;: &quot;string&quot;, &quot;identifier&quot;: &quot;string&quot; } ], &quot;couplingType&quot;: &quot;string&quot;, &quot;containsOperations&quot;: [ { &quot;operationName&quot;: &quot;string&quot;, &quot;DCP&quot;: [ &quot;string&quot; ], &quot;operationDescription&quot;: &quot;string&quot;, &quot;invocationName&quot;: &quot;string&quot;, &quot;parameters&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;direction&quot;: &quot;string&quot;, &quot;description&quot;: &quot;string&quot;, &quot;optionality&quot;: &quot;string&quot;, &quot;repeatability&quot;: true, &quot;valueType&quot;: &quot;string&quot; } ], &quot;connectPoint&quot;: { &quot;linkage&quot;: &quot;string&quot;, &quot;name&quot;: &quot;string&quot;, &quot;description&quot;: &quot;string&quot;, &quot;protocol&quot;: &quot;string&quot;, &quot;function&quot;: &quot;string&quot; }, &quot;dependsOn&quot;: [ { } ] } ], &quot;operatesOn&quot;: [ { &quot;uuidref&quot;: &quot;string&quot; } ] } 6.3.4.3.1 Service operation A data service operation is described with the following metadata elements: Element Description operationName Name of the operation DCP Distributed Computing Platform. Recommended value: ‘WebServices’ operationDescription Description of the operation invocationName Name of the operation as invoked when using the service parameters Operation parameter(s). A parameter can be defined with several properties including name, description, direction (in, out, or ‘inout’), optionality (‘Mandatory’ or ‘Optional’), repeatability(true/false), and the valueType (type of value expected, e.g., string, numeric, etc.) connectPoint URL points, defined as online resource(s) dependsOn Service operation(s) the service operation depends on. The service operation(s) descriptions are recommended when the service does not support the self-description of its operations. 6.3.4.4 Content (contentInfo) For vector datasets, the ISO 19115-1 does not provide all necessary elements; the structure of vector datasets is therefore documented using the featureCatalogueDescription of the ISO 19110 (Feature Catalogue) standard. The ISO 19110 is included in the unified ISO 19139 XML specification. Feature catalogue description (featureCatalogueDescription) The Feature Catalogue description aims to link the structural metadata (ISO 19110) to the dataset metadata (ISO 19115). This will be required when the structural metadata is not contained in the same metadata file as the dataset metadata.1 The following elements are used to document this relationship: Element Description complianceCode Indicates whether the dataset complies with the feature catalogue description language Language used in the feature catalogue includedWithDataset Indicates if the feature catalogue description is included with the dataset (essentially, as downloadable resource) featureCatalogueCitation A citation that references the ISO 19110 feature catalogue. As best practice, this citation will essentially use two properties: uuidref giving the persistent identifier of the feature catalogue, href giving a web link to access the ISO 19110 feature catalogue. &quot;contentInfo&quot;: [ { &quot;featureCatalogueDescription&quot;: { &quot;complianceCode&quot;: true, &quot;language&quot;: &quot;string&quot;, &quot;includedWithDataset&quot;: true, &quot;featureCatalogueCitation&quot;: { &quot;title&quot;: &quot;string&quot;, &quot;alternateTitle&quot;: &quot;string&quot;, &quot;date&quot;: [ { &quot;date&quot;: &quot;string&quot;, &quot;type&quot;: &quot;string&quot; } ], &quot;edition&quot;: &quot;string&quot;, &quot;editionDate&quot;: &quot;string&quot;, &quot;identifier&quot;: { &quot;authority&quot;: &quot;string&quot;, &quot;code&quot;: null }, &quot;citedResponsibleParty&quot;: [], &quot;presentationForm&quot;: [ &quot;string&quot; ], &quot;series&quot;: { &quot;name&quot;: &quot;string&quot;, &quot;issueIdentification&quot;: &quot;string&quot;, &quot;page&quot;: &quot;string&quot; }, &quot;otherCitationDetails&quot;: &quot;string&quot;, &quot;collectiveTitle&quot;: &quot;string&quot;, &quot;ISBN&quot;: &quot;string&quot;, &quot;ISSN&quot;: &quot;string&quot; } }, &quot;coverageDescription&quot;: { &quot;contentType&quot;: &quot;string&quot;, &quot;dimension&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;type&quot;: &quot;string&quot; } ] } } ] The feature catalog can be an external metadata file or document. We embedded it our JSON schema. See the section ISO 19110 Feature Catalogue below. Coverage description (coverageDescription) The structure of raster/gridded datasets can be described using the ISO 19115-2 standard, using the coverageDescription element and the following two properties: Element Description contentType Type of coverage content, e.g., ‘image’. It is recommended to define the content type using the controlled vocabulary suggested by the ISO 19139 which contains the following values: {image, thematicClassification, physicalMeasurement, auxillaryInformation, qualityInformation, referenceInformation, modelResult, coordinate, auxilliaryData} dimension List of coverage dimensions. Each dimension can be defined by a name and a type. For the type, a good practice is to rely on primitive data types defined in the XML Schema https://www.w3.org/2009/XMLSchema/XMLSchema.xsd rangeElementDescription List of range element descriptions. Each range element description will have a name/definition (corresponding to the dimension considered), and list of accepted values as rangeElement. For example, for a timeseries with series defined at specific instants in time, the Time dimension of the spatio-temporal coverage could be defined here giving the list of time instants supported by the time series. 6.3.4.5 Distribution (distributionInfo) The distribution information documents who is the actual distributor of the resources, and other aspects of the distribution in term of format and online resources. This information is provided using the following elements: Element Description distributionFormat Format(s) definitions. See the common elements section for information on how to document a format. distributor Contact(s) in charge of the resource distribution. See the common elements section for information on how to document a contact. transferOptions Transfer option(s) to get the resource. To align with the ISO 19139, these resources should be set in an onLine element where all online resources available can be listed, or as offLine for media not available online. &quot;distributionFormat&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;version&quot;: &quot;string&quot;, &quot;amendmentNumber&quot;: &quot;string&quot;, &quot;specification&quot;: &quot;string&quot;, &quot;fileDecompressionTechnique&quot;: &quot;string&quot;, &quot;FormatDistributor&quot;: {} } ] 6.3.4.6 Data quality (dataQualityInfo) Information on the quality of the data will be useful to secondary analysts, to ensure proper use of the data. Data quality is documented in the section dataQualityInfo using three main metadata elements: Element Description scope Scope / hierarchy level targeted by the data quality information section. The ISO 19139 recommends the use of a controlled vocabulary with the following options: {attribute, attributeType, collectionHardware, collectionSession, dataset, series, nonGeographicDataset, dimensionGroup, feature, featureType, propertyType, fieldSession, software, service, model, tile, initiative, stereomate, sensor, platformSeries, sensorSeries, productionSeries, transferAggregate, otherAggregate} report Report(s) describing the quality information, for example a INSPIRE metadata compliance report. To see how to create a data quality conformance report, see details below. lineage The lineage provides the elements needed to describe the process that led to the production of the data. In combination with report, the lineage will allow data users to assess quality conformance. This is an important metadata element. &quot;dataQualityInfo&quot;: [ { &quot;scope&quot;: &quot;string&quot;, &quot;report&quot;: [], &quot;lineage&quot;: { &quot;statement&quot;: &quot;string&quot;, &quot;processStep&quot;: [] } } ] 6.3.4.6.1 Report (report) &quot;report&quot;: [ { &quot;DQ_DomainConsistency&quot;: { &quot;result&quot;: { &quot;nameOfMeasure&quot;: [], &quot;measureIdentification&quot;: &quot;string&quot;, &quot;measureDescription&quot;: &quot;string&quot;, &quot;evaluationMethodType&quot;: [], &quot;evaluationMethodDescription&quot;: &quot;string&quot;, &quot;evaluationProcedure&quot;: {}, &quot;dateTime&quot;: &quot;string&quot;, &quot;result&quot;: [] } } } ] A report describes the result of an assessment of the conformance (or not) of a resource to consistency rules. The result is the main component of a report, which can be described with the following elements: nameOfMeasure: One or more measure names used for the data quality report measureIdentification: Identification of the measure, using a unique identifier (if applicable) measureDescription: A description of the measure evaluationMethodType: Type of evaluation method. The ISO 19139 recommends the use of a controlled vocabulary with the following options: {directInternal, directExternal, indirect} evaluationMethodDescription: Description of the evaluation method evaluationProcedure: Citation of the evaluation procedure (as citation element) dateTime: Date time when the report was established report: Result(s) associated to the report. Each result should be described with a specification, an explanation (of the result of conformance or not conformance), and a pass property indicating if the result was positive (true) or not (false). &quot;result&quot;: { &quot;nameOfMeasure&quot;: [ &quot;string&quot; ], &quot;measureIdentification&quot;: &quot;string&quot;, &quot;measureDescription&quot;: &quot;string&quot;, &quot;evaluationMethodType&quot;: [ &quot;string&quot; ], &quot;evaluationMethodDescription&quot;: &quot;string&quot;, &quot;evaluationProcedure&quot;: { &quot;title&quot;: &quot;string&quot;, &quot;alternateTitle&quot;: &quot;string&quot;, &quot;date&quot;: [ { &quot;date&quot;: &quot;string&quot;, &quot;type&quot;: &quot;string&quot; } ], &quot;edition&quot;: &quot;string&quot;, &quot;editionDate&quot;: &quot;string&quot;, &quot;identifier&quot;: { &quot;authority&quot;: &quot;string&quot;, &quot;code&quot;: null }, &quot;citedResponsibleParty&quot;: [], &quot;presentationForm&quot;: [ &quot;string&quot; ], &quot;series&quot;: { &quot;name&quot;: &quot;string&quot;, &quot;issueIdentification&quot;: &quot;string&quot;, &quot;page&quot;: &quot;string&quot; }, &quot;otherCitationDetails&quot;: &quot;string&quot;, &quot;collectiveTitle&quot;: &quot;string&quot;, &quot;ISBN&quot;: &quot;string&quot;, &quot;ISSN&quot;: &quot;string&quot; }, &quot;dateTime&quot;: &quot;string&quot;, &quot;result&quot;: [] } } 6.3.4.6.2 Lineage (lineage) The lineage provides a structured solution to describe the work flow that led to the production of the data/service, defined by: a general statement of the work flow performed sequence of process steps performed. Each processStep is defined by the following elements: description: Description of the process step performed rationale: Rationale of the process step dateTime: Date of the processing processor: Contact(s) acting as processor(s) for the target step source: Source(s) used for the process step. Each source can have a description and a sourceCitation (as citation element). &quot;lineage&quot;: { &quot;statement&quot;: &quot;string&quot;, &quot;processStep&quot;: [ { &quot;description&quot;: &quot;string&quot;, &quot;rationale&quot;: &quot;string&quot;, &quot;dateTime&quot;: &quot;string&quot;, &quot;processor&quot;: [], &quot;source&quot;: [ { &quot;description&quot;: &quot;string&quot;, &quot;sourceCitation&quot;: { &quot;title&quot;: &quot;string&quot;, &quot;alternateTitle&quot;: &quot;string&quot;, &quot;date&quot;: [ { &quot;date&quot;: &quot;string&quot;, &quot;type&quot;: &quot;string&quot; } ], &quot;edition&quot;: &quot;string&quot;, &quot;editionDate&quot;: &quot;string&quot;, &quot;identifier&quot;: { &quot;authority&quot;: &quot;string&quot;, &quot;code&quot;: null }, &quot;citedResponsibleParty&quot;: [], &quot;presentationForm&quot;: [ &quot;string&quot; ], &quot;series&quot;: { &quot;name&quot;: &quot;string&quot;, &quot;issueIdentification&quot;: &quot;string&quot;, &quot;page&quot;: &quot;string&quot; }, &quot;otherCitationDetails&quot;: &quot;string&quot;, &quot;collectiveTitle&quot;: &quot;string&quot;, &quot;ISBN&quot;: &quot;string&quot;, &quot;ISSN&quot;: &quot;string&quot; } } ] } ] } 6.3.4.7 Metadata maintenance (metadataMaintenanceInfo) The metadataMaintenanceInfo and maintenanceAndUpdateFrequency elements provide information on the maintenance of the metadata including the frequency of updates. The metadataMaintenanceInfo element is a free text element. The information provided in maintenanceAndUpdateFrequency should be chosen from values recommended by the ISO 19139 controlled vocabulary with the following options: {continual, daily, weekly, fortnightly, monthly, quarterly, biannually, annually, asNeeded, irregular, notPlanned, unknown}. &quot;metadataMaintenance&quot;: { &quot;maintenanceAndUpdateFrequency&quot;: &quot;string&quot; } 6.4 ISO 19110 Feature Catalogue (feature_catalogue) We describe below how the ISO 19110 feature catalogue is used to document the structure of a vector dataset (complementing the ISO 10119-1). This is equivalent to producing a “data dictionary” for the variables/features included in a vector dataset. An example of the implementation of such a feature catalogue using R is provided in the Examples section of this chapter (see Example 3 in section 5.5.3). Element Description name Name of the feature catalogue scope Subject domain(s) of feature types defined in this feature catalogue fieldOfApplication One or more fields of applications for this feature catalogue. versionNumber Version number of this feature catalogue, which may include both a major version number or letter and a sequence of minor release numbers or letters, such as ‘3.2.4a.’ The format of this attribute may differ between cataloguing authorities. versionDate Version date producer The responsibleParty in charge of the feature catalogue production functionalLanguage Formal functional language in which the feature operation formal definition occurs in this feature catalogue featureType One or more feature type(s) defined in the Feature catalogue. The definition of several feature types can be considered when targeting various forms of a dataset (e.g., simplified vs. complete set of attributes, raw vs. aggregated, etc). In practice, a simple ISO 19110 feature catalogue will reference one feature type describing the unique dataset structure. See details below. &quot;feature_catalogue&quot;: { &quot;name&quot;: &quot;string&quot;, &quot;scope&quot;: [], &quot;fieldOfApplication&quot;: [], &quot;versionNumber&quot;: &quot;string&quot;, &quot;versionDate&quot;: {}, &quot;producer&quot;: {}, &quot;functionalLanguage&quot;: &quot;string&quot;, &quot;featureType&quot;: [] } The featureType is the actual data structure definition of a dataset (data dictionary), and has the following properties: Element Description typeName Text string that uniquely identifies this feature type within the feature catalogue that contains this feature type definition Definition of the feature type code Code that uniquely identifies this feature type within the feature catalogue that contains this feature type isAbstract Indicates if the feature type is abstract or not aliases One or more aliases as equivalent names of the feature type carrierOfCharacteristics Feature attribute(s) / column(s) definitions. See below details. &quot;featureType&quot;: [ { &quot;typeName&quot;: &quot;string&quot;, &quot;definition&quot;: &quot;string&quot;, &quot;code&quot;: &quot;string&quot;, &quot;isAbstract&quot;: true, &quot;aliases&quot;: [ &quot;string&quot; ], &quot;carrierOfCharacteristics&quot;: [ { &quot;memberName&quot;: &quot;string&quot;, &quot;definition&quot;: &quot;string&quot;, &quot;cardinality&quot;: { &quot;lower&quot;: 0, &quot;upper&quot;: 0 }, &quot;code&quot;: &quot;string&quot;, &quot;valueMeasurementUnit&quot;: &quot;string&quot;, &quot;valueType&quot;: &quot;string&quot;, &quot;listedValue&quot;: [ { &quot;label&quot;: &quot;string&quot;, &quot;code&quot;: &quot;string&quot;, &quot;definition&quot;: &quot;string&quot; } ] } ] } ] Each feature attribute, i.e. column that is a member of the vector data structure is defined as carrier of characteristics. Each set of characteristics can be defined with the following properties: Element Description memberName Name of the property member of the feature type definition Definition of the property member cardinality Definition of the member type cardinality. The cardinality is set of two properties: lower cardinality (lower) and upper cardinality (upper). For simple tabular datasets, the cardinality will be 1-1. Multiple cardinalities (eg. 1-N, N-N) apply particularly to feature catalogues/types that describe relational databases. code Code for the attribute member of the feature type. Corresponds to the actual column name in an attributes table. valueMeasurementUnit Measurement unit of the values (in case of the feature member corresponds to a measurable variable) valueType Type of value. A good practice is to rely on primitive data types defined in the XML Schema https://www.w3.org/2009/XMLSchema/XMLSchema.xsd listedValue List of controlled value(s) used in the attribute member. Each value corresponds to an object compound by 1) a label, 2) a code (as contained in the dataset), 3) a definition. This element will be used when the feature member relates to reference datasets, such as code lists or registers. e.g., list of countries, land cover types, etc. 6.5 Provenance &quot;provenance&quot;: [ { &quot;origin_description&quot;: { &quot;harvest_date&quot;: &quot;string&quot;, &quot;altered&quot;: true, &quot;base_url&quot;: &quot;string&quot;, &quot;identifier&quot;: &quot;string&quot;, &quot;date_stamp&quot;: &quot;string&quot;, &quot;metadata_namespace&quot;: &quot;string&quot; } } ] provenance [Optional ; Repeatable] Metadata can be programmatically harvested from external catalogs. The provenance group of elements is used to store information on the provenance of harvested metadata, and on alterations that may have been done to the harvested metadata. These elements are NOT part of the ISO 19139 metadata standard. origin_description [Required ; Not repeatable] The origin_description elements are used to describe when and from where metadata have been extracted or harvested. harvest_date [Required ; Not repeatable ; String] The date and time the metadata were harvested, in ISO 8601 format. altered [Optional ; Not repeatable ; Boolean] A boolean variable (“true” or “false”; “true by default) indicating whether the harvested metadata have been modified before being re-published. In many cases, the unique identifier of the study (element idno in the Study Description / Title Statement section) will be modified when published in a new catalog. base_url [Required ; Not repeatable ; String] The URL from where the metadata were harvested. identifier [Optional ; Not repeatable ; String] The unique dataset identifier (idno element) in the source catalog. When harvested metadata are re-published in a new catalog, the identifier will likely be changed. The identifier element in provenance is used to maintain traceability. date_stamp [Optional ; Not repeatable ; String] The datestamp (in UTC date format) of the metadata record in the originating repository (this should correspond to the date the metadata were last updated in the source catalog). metadata_namespace [Optional ; Not repeatable ; String] @@@@@@@ 6.6 Tags tags [Optional ; Repeatable] Tags provides easy way to include custom-facets in NADA. Should consider using one or multiple controlled vocabulary(ies). See section 1.7 for more on the importance and use of tags and tag_groups in data catalogs. &quot;tags&quot;: [ { &quot;tag&quot;: &quot;string&quot;, &quot;tag_group&quot;: &quot;string&quot; } ] tag [Required ; Not repeatable ; String] A user-defined tag. tag_group [Optional ; Not repeatable ; String] A user-defined group to which the tag belongs. Grouping tags allows implementation of controlled facets (filters) in data catalogs. 6.7 LDA topics lda_topics [Optional ; Not repeatable] &quot;lda_topics&quot;: [ { &quot;model_info&quot;: [ { &quot;source&quot;: &quot;string&quot;, &quot;author&quot;: &quot;string&quot;, &quot;version&quot;: &quot;string&quot;, &quot;model_id&quot;: &quot;string&quot;, &quot;nb_topics&quot;: 0, &quot;description&quot;: &quot;string&quot;, &quot;corpus&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ], &quot;topic_description&quot;: [ { &quot;topic_id&quot;: null, &quot;topic_score&quot;: null, &quot;topic_label&quot;: &quot;string&quot;, &quot;topic_words&quot;: [ { &quot;word&quot;: &quot;string&quot;, &quot;word_weight&quot;: 0 } ] } ] } ] We mentioned in Chapter 1 the importance of producing rich metadata, and the opportunities that machine learning offers to enrich (or “augment”) metadata in a largely automated manner. One application of machine learning, more specifically of natural language processing, to enrich metadata related to publications is the topic extraction using Latent Dirichlet Allocation (LDA) models. LDA models must be trained on large corpora of documents. They do not require any pre-defined taxonomy of topics. The approach consists of “clustering” words that are likely to appear in similar contexts (the number of “clusters” or “topics” is a parameter provided when training a model). Clusters of related words form “topics”. A topic is thus defined by a list of keywords, each one of them provided with a score indicating its importance in the topic. Typically, the top 10 words that represent a topic will be used to describe it. The description of the topics covered by a document (in this case, the “document” is a compilation of elements from the dataset metadata) can be indexed to improve searchability (possibly in a selective manner, by setting thresholds on the topic shares and word weights). Once an LDA topic model has been trained, it can be used to infer the topic composition of any document. This inference will then provide the share that each topic represents in the document. The sum of all represented topics is 1 (100%). The metadata element lda_topics is provided to allow data curators to store information on the inferred topic composition of the documents listed in a catalog. Sub-elements are provided to describe the topic model, and the topic composition. Important note: the topic composition of a document is specific to a topic model. To ensure consistency of the information captured in the lda_topics elements, it is important to make use of the same model(s) for generating the topic composition of all documents in a catalog. If a new, better LDA model is trained, the topic composition of all documents in the catalog should be updated. The lda_topics element includes the following metadata fields: model_info [Optional ; Not repeatable] Information on the LDA model. source [Optional ; Not repeatable ; String] The source of the model (typically, an organization). author [Optional ; Not repeatable ; String] The author(s) of the model. version [Optional ; Not repeatable ; String] The version of the model, which could be defined by a date or a number. model_id [Optional ; Not repeatable ; String] The unique ID given to the model. nb_topics [Optional ; Not repeatable ; Numeric] The number of topics in the model (the number of topics to be extracted from a corpus is the key parameter of any LDA model). description [Optional ; Not repeatable ; String] A brief description of the model. corpus [Optional ; Not repeatable ; String] A brief description of the corpus on which the LDA model was trained. uri [Optional ; Not repeatable ; String] A link to a web page where additional information on the model is available. topic_description [Optional ; Repeatable] The topic composition of the document. topic_id [Optional ; Not repeatable ; String] The identifier of the topic; this will often be a sequential number (Topic 1, Topic 2, etc.). topic_score [Optional ; Not repeatable ; Numeric] The share of the topic in the document (%). topic_label [Optional ; Not repeatable ; String] The label of the topic, if any (not automatically generated by the LDA model). topic_words [Optional ; Not repeatable] The list of N keywords describing the topic (e.g., the top 5 words). word [Optional ; Not repeatable ; String] The word. word_weight [Optional ; Not repeatable ; Numeric] The weight of the word in the definition of the topic. This is specific to the model, not to a document. lda_topics = list( list( model_info = list( list(source = &quot;World Bank, Development Data Group&quot;, author = &quot;A.S.&quot;, version = &quot;2021-06-22&quot;, model_id = &quot;Mallet_WB_75&quot;, nb_topics = 75, description = &quot;LDA model, 75 topics, trained on Mallet&quot;, corpus = &quot;World Bank Documents and Reports (1950-2021)&quot;, uri = &quot;&quot;)) ), topic_description = list( list(topic_id = &quot;topic_27&quot;, topic_score = 32, topic_label = &quot;Education&quot;, topic_words = list(list(word = &quot;school&quot;, word_weight = &quot;&quot;) list(word = &quot;teacher&quot;, word_weight = &quot;&quot;), list(word = &quot;student&quot;, word_weight = &quot;&quot;), list(word = &quot;education&quot;, word_weight = &quot;&quot;), list(word = &quot;grade&quot;, word_weight = &quot;&quot;)), list(topic_id = &quot;topic_8&quot;, topic_score = 24, topic_label = &quot;Gender&quot;, topic_words = list(list(word = &quot;women&quot;, word_weight = &quot;&quot;) list(word = &quot;gender&quot;, word_weight = &quot;&quot;), list(word = &quot;man&quot;, word_weight = &quot;&quot;), list(word = &quot;female&quot;, word_weight = &quot;&quot;), list(word = &quot;male&quot;, word_weight = &quot;&quot;)), list(topic_id = &quot;topic_39&quot;, topic_score = 22, topic_label = &quot;Forced displacement&quot;, topic_words = list(list(word = &quot;refugee&quot;, word_weight = &quot;&quot;) list(word = &quot;programme&quot;, word_weight = &quot;&quot;), list(word = &quot;country&quot;, word_weight = &quot;&quot;), list(word = &quot;migration&quot;, word_weight = &quot;&quot;), list(word = &quot;migrant&quot;, word_weight = &quot;&quot;)), list(topic_id = &quot;topic_40&quot;, topic_score = 11, topic_label = &quot;Development policies&quot;, topic_words = list(list(word = &quot;development&quot;, word_weight = &quot;&quot;) list(word = &quot;policy&quot;, word_weight = &quot;&quot;), list(word = &quot;national&quot;, word_weight = &quot;&quot;), list(word = &quot;strategy&quot;, word_weight = &quot;&quot;), list(word = &quot;activity&quot;, word_weight = &quot;&quot;)) ) ) ) 6.8 Embeddings embeddings [Optional ; Repeatable] In Chapter 1 (section 1.n), we briefly introduced the concept of word embeddings and their use in implementation of semantic search tools. Word embedding models convert text (words, phrases, documents) into large-dimension numeric vectors (e.g., a vector of 100 or 200 numbers) that are representative of the semantic content of the text. In this case, the text would be a compilation of selected elements of the dataset metadata. The vectors are generated by submitting a text to a pre-trained word embedding model (possibly via an API). The word vectors do not have to be stored in the document metadata to be exploited by search engines. When a semantic search tool is implemented in a catalog, the vectors will be stored in a database end processed by a tool like Milvus. A metadata element is however provided to store the vectors for preservation and sharing purposes. This block of metadata elements is repeatable, allowing multiple vectors to be stored. When using vectors in a search engine, it is critical to only use vectors generated by one same model. &quot;embeddings&quot;: [ { &quot;id&quot;: &quot;string&quot;, &quot;description&quot;: &quot;string&quot;, &quot;date&quot;: &quot;string&quot;, &quot;vector&quot;: { } } ] The embeddings element contains four metadata fields: id [Optional ; Not repeatable ; String] A unique identifier of the word embedding model used to generate the vector. description [Optional ; Not repeatable ; String] A brief description of the model. This may include the identification of the producer, a description of the corpus on which the model was trained, the identification of the software and algorithm used to train the model, the size of the vector, etc. date [Optional ; Not repeatable ; String] The date the model was trained (or a version date for the model). vector [Required ; Not repeatable ; Object] @@@@@@@@ do not offer options The numeric vector representing the document, provided as an object (array or string). [1,4,3,5,7,9] 6.9 Additional additional [Optional ; Not repeatable] The additional element allows data curators to add their own metadata elements to the schema. All custom elements must be added within the additional block; embedding them elsewhere in the schema would cause schema validation to fail. 6.10 Complete examples 6.10.1 Example 1 (vector - shape files): Bangladesh, Outline of camps of Rohingya refugees in Cox’s Bazar, January 2021 In this first example, we use a geographic dataset that contains the outline of Rohingya refugee camps, settlements, and sites in Cox’s Bazar, Bangladesh. The dataset was imported from the Humanitarian Data Exchange website on March 3, 2021. We include in the metadata a simple description of the features (variables) contained in the shape files. This information will significantly increase data discoverability, as it provide information of the content of the data files (which is not described elsewhere in the metadata). Generating the metadata using R library(nadar) library(readr) @@@@ used? library(readxl) @@@@ used? library(writexl) @@@@ used? library(sf) # ---------------------------------------------------------------------------------- # Enter credentials (API confidential key) and catalog URL my_keys &lt;- read.csv(&quot;C:/confidential/my_API_keys.csv&quot;, header=F, stringsAsFactors=F) set_api_key(&quot;my_keys[1,1&quot;) set_api_url(&quot;https://.../index.php/api/&quot;) set_api_verbose(FALSE) # ---------------------------------------------------------------------------------- setwd(&quot;C:/my_geo_data/&quot;) thumb = &quot;shape_camps.JPG&quot; # Download the data files (if not already downloaded) # Note: the data are frequently updated; the links below may have become invalid. # Visit: https://data.humdata.org/dataset/1a67eb3b-57d8-4062-b562-049ad62a85fd for an update. base_url = &quot;https://data.humdata.org/dataset/1a67eb3b-57d8-4062-b562-049ad62a85fd/resource/&quot; urls &lt;- list( paste0(base_url, &quot;7cec91fb-d0a8-4781-9f8d-9b69772ef2fd/download/210118_rrc_geodata_al1al2al3.gdb.zip&quot;), paste0(base_url, &quot;ace4b0a6-ef0f-46e4-a50a-8c552cfe7bf3/download/200908_rrc_outline_camp_al1.zip&quot;), paste0(base_url, &quot;bd5351e7-3ffc-4eaa-acbc-c6d917b5549c/download/200908_rrc_outline_camp_al1.kmz&quot;), paste0(base_url, &quot;9d5693ec-eeb8-42ed-9b65-4c279f523276/download/200908_rrc_outline_block_al2.zip&quot;), paste0(base_url, &quot;ed119ae4-b13d-4473-9afe-a8c36e07870b/download/200908_rrc_outline_block_al2.kmz&quot;), paste0(base_url, &quot;0d2d87ae-52a5-4dca-b435-dcd9c617b417/download/210118_rrc_outline_subblock_al3.zip&quot;), paste0(base_url, &quot;6286c4a5-d2ab-499a-b019-a7f0c327bd5f/download/210118_rrc_outline_subblock_al3.kmz&quot;) ) for(url in urls) { f &lt;- basename(url) if (!file.exists(f)) download.file(url, destfile=f, mode=&quot;wb&quot;) } # Unzip and read the shape files to extract information # The object contain the number of features, layers, geodetic CRS, etc. unzip(&quot;200908_rrc_outline_camp_al1.zip&quot;, exdir = &quot;AL1&quot;) al1 &lt;- st_read(&quot;./AL1/200908_RRC_Outline_Camp_AL1.shp&quot;) unzip(&quot;200908_rrc_outline_block_al2.zip&quot;, exdir = &quot;AL2&quot;) al2 &lt;- st_read(&quot;./AL2/200908_RRC_Outline_Block_AL2.shp&quot;) unzip(&quot;210118_rrc_outline_subblock_al3.zip&quot;, exdir = &quot;AL3&quot;) al3 &lt;- st_read(&quot;./AL3/210118_RRC_Outline_SubBlock_AL3.shp&quot;) # --------------- id = &quot;BGD_2021_COX_CAMPS_GEO_OUTLINE&quot; my_geo_metadata &lt;- list( metadata_information = list( title = &quot;(Demo) Site Management Sector, RRRC, Inter Sector Coordination Group (ISCG)&quot;, producers = list(list(name = &quot;NADA team&quot;)), production_date = &quot;2022-02-18&quot; ), description = list( idno = id, language = &quot;eng&quot;, characterSet = list(codeListValue = &quot;utf8&quot;), hierarchyLevel = list(&quot;dataset&quot;), contact = list( list( organisationName = &quot;Site Management Sector, RRRC, Inter Sector Coordination Group (ISCG)&quot;, contactInfo = list( address = list(country = &quot;Bangladesh&quot;), onlineResource = list( linkage = &quot;https://www.humanitarianresponse.info/en/operations/bangladesh/&quot;, name = &quot;Website&quot; ) ), role = &quot;owner&quot; ) ), dateStamp = &quot;2021-01-20&quot;, metadataStandardName = &quot;ISO 19115:2003/19139&quot;, spatialRepresentationInfo = list( # File 200908_rrc_outline_camp_al1.zip list( vectorSpatialRepresentationInfo = list( topologyLevel = &quot;geometryOnly&quot;, geometricObjects = list( geometricObjectType = &quot;surface&quot;, geometricObjectCount = &quot;35&quot; ) ) ), # File 200908_rrc_outline_block_al2.zip list( vectorSpatialRepresentationInfo = list( topologyLevel = &quot;geometryOnly&quot;, geometricObjects = list( geometricObjectType = &quot;surface&quot;, geometricObjectCount = &quot;173&quot; ) ) ), # File 210118_rrc_outline_subblock_al3.zip list( vectorSpatialRepresentationInfo = list( topologyLevel = &quot;geometryOnly&quot;, geometricObjects = list( geometricObjectType = &quot;surface&quot;, geometricObjectCount = &quot;967&quot; ) ) ) ), referenceSystemInfo = list( list(code = &quot;4326&quot;, codeSpace = &quot;EPSG&quot;), list(code = &quot;84&quot;, codespace = &quot;WGS&quot;) ), identificationInfo = list( list( citation = list( title = &quot;Bangladesh, Outline of camps of Rohingya refugees in Cox&#39;s Bazar, January 2021&quot;, date = list( list(date = &quot;2021-01-20&quot;, type = &quot;creation&quot;) ), citedResponsibleParty = list( list( organisationName = &quot;Site Management Sector, RRRC, Inter Sector Coordination Group (ISCG)&quot;, contactInfo = list( address = list(country = &quot;Bangladesh&quot;), onlineResource = list( linkage = &quot;https://www.humanitarianresponse.info/en/operations/bangladesh/&quot;, name = &quot;Website&quot; ) ), role = &quot;owner&quot; ) ) ), abstract = &quot;These polygons were digitized through a combination of methodologies, originally using VHR satellite imagery and GPS points collected in the field, verified and amended according to Site Management Sector, RRRC, Camp in Charge (CiC) officers inputs, with technical support from other partners.&quot;, purpose = &quot;Inform the UNHCR operations (and other support agencies&#39;) in refugee camps in Cox&#39;s Bazar.&quot;, credit = &quot;Site Management Sector, RRRC, Inter Sector Coordination Group (ISCG)&quot;, status = &quot;completed&quot;, pointOfContact = list( list( organisationName = &quot;Site Management Sector, RRRC, Inter Sector Coordination Group (ISCG)&quot;, contactInfo = list( address = list(country = &quot;Bangladesh&quot;), onlineResource = list( linkage = &quot;https://www.humanitarianresponse.info/en/operations/bangladesh/&quot;, name = &quot;Website&quot; ) ), role = &quot;pointOfContact&quot; ) ), resourceMaintenance = list( list(maintenanceOrUpdateFrequency = &quot;asNeeded&quot;) ), graphicOverview = list( # @@@@@@@@@@@@ list(fileName = &quot;&quot;, fileDescription = &quot;&quot;, fileType = &quot;&quot;) ), resourceFormats = list( list(name = &quot;application/zip&quot;, specification = &quot;ESRI Shapefile (zipped)&quot;, FormatDistributor = list(organisationName = &quot;ESRI&quot;) ), list(name = &quot;application/vnd.google-earth.kmz&quot;, specification = &quot;KMZ file&quot;, FormatDistributor = list(organisationName = &quot;Google&quot;) ), list(name = &quot;ESRI Geodatabase&quot;, FormatDistributor = list(organisationName = &quot;ESRI&quot;) ) ), descriptiveKeywords = list( list(keyword = &quot;refugee camp&quot;), list(keyword = &quot;forced displacement&quot;), list(keyword = &quot;rohingya&quot;) ), resourceConstraints = list( list( legalConstraints = list( uselimitation = list(&quot;License: http://creativecommons.org/publicdomain/zero/1.0/legalcode&quot;), accessConstraints = list(&quot;unrestricted&quot;), useConstraints = list(&quot;licenceUnrestricted&quot;) ) ) ), extent = list( geographicElement = list( list( geographicBoundingBox = list( southBoundLatitude = 20.91856, westBoundLongitude = 92.12973, northBoundLatitude = 21.22292, eastBoundLongitude = 92.26863 ) ) ) ), spatialRepresentationType = &quot;vector&quot;, language = list(&quot;eng&quot;) ) ), distributionInfo = list( distributionFormat = list( list(name = &quot;application/zip&quot;, specification = &quot;ESRI Shapefile (zipped)&quot;, FormatDistributor = list(organisationName = &quot;ESRI&quot;) ), list(name = &quot;application/vnd.google-earth.kmz&quot;, specification = &quot;KMZ file&quot;, FormatDistributor = list(organisationName = &quot;Google&quot;) ), list(name = &quot;ESRI Geodatabase&quot;, FormatDistributor = list(organisationName = &quot;ESRI&quot;) ) ), distributor = list( list( organisationName = &quot;United Nations Office for the Coordination of Humanitarian Affairs (OCHA)&quot;, contactInfo = list( onlineResource = list( linkage = &quot;https://data.humdata.org/dataset/outline-of-camps-sites-of-rohingya-refugees-in-cox-s-bazar-bangladesh&quot;, name = &quot;Website&quot; ) ) ) )#, # transferOptions = list( # list( # onLine = list( # @@@@@@@@ / use external resources schema? # list( # linkage = &quot;https://data.humdata.org/dataset/1a67eb3b-57d8-4062-b562-049ad62a85fd/resource/7cec91fb-d0a8-4781-9f8d-9b69772ef2fd/download/210118_rrc_geodata_al1al2al3.gdb.zip&quot;, # name = &quot;210118_RRC_GeoData_AL1,AL2,AL3.gdb.zip&quot;, # description = &quot;This zipped geodatabase file (GIS) contains the Camp boundary (Admin level-1) and and camp-block boundary (admin level-2 or camp sub-division) and sub-block boundary of Rohingya refugee camps and administrative level-3 or sub block division of Camp 1E-1W, Camp 2E-2W, Camp 8E-8W, Camp 4 Extension, Camp 3-7, Camp 9-20, and Camp 21-27 in Cox&#39;s Bazar, Bangladesh. Updated: January 20, 2021&quot;, # protocol = &quot;WWW:LINK-1.0-http--link&quot; # ), # list( # linkage = &quot;https://data.humdata.org/dataset/1a67eb3b-57d8-4062-b562-049ad62a85fd/resource/ace4b0a6-ef0f-46e4-a50a-8c552cfe7bf3/download/200908_rrc_outline_camp_al1.zip&quot;, # name = &quot;200908_RRC_Outline_Camp_AL1.zip&quot;, # description = &quot;This zipped shape file (GIS) contains the Camp boundary (Admin level-1) of Rohinya refugees in Cox&#39;s Bazar, Bangladesh. Updated: September 8, 2020&quot;, # protocol = &quot;WWW:LINK-1.0-http--link&quot; # ), # list( # linkage = &quot;https://data.humdata.org/dataset/1a67eb3b-57d8-4062-b562-049ad62a85fd/resource/bd5351e7-3ffc-4eaa-acbc-c6d917b5549c/download/200908_rrc_outline_camp_al1.kmz&quot;, # name = &quot;200908_RRC_Outline_Camp_AL1.kmzKMZ&quot;, # description = &quot;This kmz file (Google Earth) contains the Camp boundary (Admin level-1) of Rohinya refugees in Cox&#39;s Bazar, Bangladesh. Updated: September 8, 2020&quot;, # protocol = &quot;WWW:LINK-1.0-http--link&quot; # ), # list( # linkage = &quot;https://data.humdata.org/dataset/1a67eb3b-57d8-4062-b562-049ad62a85fd/resource/9d5693ec-eeb8-42ed-9b65-4c279f523276/download/200908_rrc_outline_block_al2.zip&quot;, # name = &quot;200908_RRC_Outline_Block_AL2.zip&quot;, # description = &quot;This zipped shape file (GIS) contains the camp-block boundary (admin level-2 or camp sub-division) of Rohinya refugees in Cox&#39;s Bazar, Bangladesh. Updated: September 8, 2020&quot;, # protocol = &quot;WWW:LINK-1.0-http--link&quot; # ), # list( # linkage = &quot;https://data.humdata.org/dataset/1a67eb3b-57d8-4062-b562-049ad62a85fd/resource/ed119ae4-b13d-4473-9afe-a8c36e07870b/download/200908_rrc_outline_block_al2.kmz&quot;, # name = &quot;200908_RRC_Outline_Block_AL2.kmzKMZ&quot;, # description = &quot;This kmz file (Google Earth) contains the camp-block boundary (admin level-2 or camp sub-division) of Rohinya refugees in Cox&#39;s Bazar, Bangladesh. Updated: September 8, 2020&quot;, # protocol = &quot;WWW:LINK-1.0-http--link&quot; # ), # list( # linkage = &quot;https://data.humdata.org/dataset/1a67eb3b-57d8-4062-b562-049ad62a85fd/resource/0d2d87ae-52a5-4dca-b435-dcd9c617b417/download/210118_rrc_outline_subblock_al3.zip&quot;, # name = &quot;210118_RRC_Outline_SubBlock_AL3.zip&quot;, # description = &quot;This zipped shape file (GIS) contains the camp-sub-block (Admin level-3) of Camp 1E-1W, Camp 2E-2W, Camp 8E-8W, Camp 4 Extension, Camp 3-7, Camp 9-20, and Camp 21-27 in Cox&#39;s Bazar, Bangladesh. Updated: January 20, 2021&quot;, # protocol = &quot;WWW:LINK-1.0-http--link&quot; # ), # list( # linkage = &quot;https://data.humdata.org/dataset/1a67eb3b-57d8-4062-b562-049ad62a85fd/resource/6286c4a5-d2ab-499a-b019-a7f0c327bd5f/download/210118_rrc_outline_subblock_al3.kmz&quot;, # name = &quot;210118_RRC_Outline_SubBlock_AL3.kmzKMZ&quot;, # description = &quot;This kmz file (Google Earth) contains the camp-sub-block (Admin level-3) of Camp 1E-1W, Camp 2E-2W, Camp 8E-8W, Camp 4 Extension, Camp 3-7, Camp 9-20, and Camp 21-27 in Cox&#39;s Bazar, Bangladesh. Updated: January 20, 2021&quot;, # protocol = &quot;WWW:LINK-1.0-http--link&quot; # ) # ) # ) # ) ), dataQualityInfo = list( list( scope = &quot;dataset&quot;, lineage = list( statement = &quot;The camps are continuously expanding, and Camp Boundaries are structured around the GoB, RRRC official governance structure of the camps, taking into account the potential new land allocation. The database is kept as accurate as possible, given these challenges.&quot; ) ) ), metadataMaintenance = list(maintenanceAndUpdateFrequency = &quot;asNeeded&quot;), feature_catalogue = list( name = &quot;Feature Catalogue dataset xxxxx&quot;, scope = list(&quot;3 shape files: al1, al2, al3&quot;), featureType = list( list( typeName = &quot;&quot;, definition = &quot;&quot;, carrierOfCharacteristics = list( list( memberName = &#39;District&#39;, definition = &#39;Cox s Bazar&#39; ), list( memberName = &#39;Upazila&#39;, definition = &#39;Teknaf, Ukhia&#39;, ), list( memberName = &#39;Settlement&#39;, definition = &#39;Collective site; Collective site with host community&#39;, ), list( memberName = &#39;Union&#39;, definition = &#39;Baharchhara; Nhilla; Palong Khali; Raja Palong; Whykong&#39;, ), list( memberName = &#39;Name_Alias&#39;, definition = &#39;Alikhali; Bagghona-Putibonia; Camp 20 Extension; Camp 4; Camp 4 Extension; Chakmarkul; Choukhali; Hakimpara; Jadimura; Jamtoli-Baggona; Jomer Chora; Kutupalong RC; Modur Chora; Nayapara; Nayapara RC; Shamlapur; Tasnimarkhola; Tasnimarkhola-Burmapara; Unchiprang&#39; ), list( memberName = &#39;SSID&#39;, definition = &#39;CXB-017 to CXB-235&#39;, ), list( memberName = &#39;SMSD__Cnam&#39;, definition = &#39;Camp 01E; Camp 01W; Camp 02E; Camp 02W; Camp 03; Camp 04; Camp 04X; Camp 05; Camp 06; Camp 07; Camp 08E; Camp 08W; Camp 09; Camp 10; Camp 11; Camp 12; Camp 13; Camp 14; Camp 15; Camp 16; Camp 17; Camp 18; Camp 19; Camp 20; Camp 20X; Camp 21; Camp 22; Camp 23; Camp 24; Camp 25; Camp 26; Camp 27; Camp KRC; Camp NRC; Choukhali&#39;, ), list( memberName = &#39;NPM_Name&#39;, definition = &#39;Camp 01E; Camp 01W; Camp 02E; Camp 02W; Camp 03; Camp 04; Camp 04 Extension; Camp 05; Camp 06; ; Camp 07; Camp 08E; Camp 08W; Camp 09; Camp 10; Camp 11; Camp 12; Camp 13 Camp 14 (Hakimpara); Camp 15 (Jamtoli); Camp 16 (Potibonia); Camp 17; Camp 18; Camp 19; Camp 20; Camp 20 Extension; Camp 21 (Chakmarkul); Camp 22 (Unchiprang); Camp 23 (Shamlapur); Camp 24 (Leda); Camp 25 (Ali Khali); Camp 26 (Nayapara); Camp 27 (Jadimura); Choukhali; Kutupalong RC; Nayapara RC&#39;, ), list( memberName = &#39;Area_Acres&#39;, definition = &#39;Area in acres&#39;, ), list( memberName = &#39;PeriMe_Met&#39;, definition = &#39;Perimeter in meters&#39;, ), list( memberName = &#39;Camp_Name&#39;, definition = &#39;Camp 10; Camp 11; Camp 12; Camp 13; Camp 14; Camp 15; Camp 16; Camp 17; Camp 18; Camp 19; Camp 1E; Camp 1W; Camp 20 Camp 20 Extension; Camp 21; Camp 22; Camp 23; Camp 24; Camp 25; Camp 26; Camp 27; Camp 2E; Camp 2W; Camp 3; Camp 4; Camp 4 Extension; Camp 5; Camp 6; Camp 7; Camp 8E; Camp 8W; Camp 9; Choukhali; Kutupalong RC; Nayapara RC&#39;, ), list( memberName = &#39;Area_SqM&#39;, definition = &#39;Area in square km&#39;, ), list( memberName = &#39;Latitude&#39; ), list( memberName = &#39;Longitude&#39; ), list( memberName = &#39;geometry&#39; ) #, #... al2, al3 @@@@@@@@@ complete ) ) ) ) ) ) # Publish in NADA catalog geospatial_add( idno = id, metadata = my_geo_metadata, repositoryid = &quot;central&quot;, published = 1, thumbnail = thumb, overwrite = &quot;yes&quot; ) # Add a link to HDX as an external resource external_resources_add( title = &quot;Humanitarian Data Exchange website&quot;, idno = id, dctype = &quot;web&quot;, file_path = &quot;https://data.humdata.org/&quot;, overwrite = &quot;yes&quot; ) The result in NADA After running the script, the data and metadata will be available in NADA. Generating the metadata using Python 6.10.2 Example 2 (vector, CSV data): Syria Refugee Sites (OCHA) The Syria Refugee Sites dataset used as a second example contains verified data about the geographic location (point geometry), name, and operational status of refugee sites hosting Syrian refugees in Turkey, Jordan, and Iraq. Only refugee sites operated by the United Nations High Commissioner for Refugees (UNHCR) or the Government of Turkey are included. Data are provided as CSV, TSV and XLSX files. This example demonstrates the use of the ISO 19115 standard. Generating the metadata using R library(nadar) library(sf) library(sp) # ---------------------------------------------------------------------------------- # Enter credentials (API confidential key) and catalog URL my_keys &lt;- read.csv(&quot;C:/confidential/my_API_keys.csv&quot;, header=F, stringsAsFactors=F) set_api_key(&quot;my_keys[1,1&quot;) set_api_url(&quot;https://.../index.php/api/&quot;) set_api_verbose(FALSE) # ---------------------------------------------------------------------------------- setwd(&quot;C:/my_geo_data/&quot;) options(stringsAsFactors = FALSE) # Download and read the data file url = &quot;https://data.humdata.org/dataset/ff383a8b-396a-4d78-b403-687b0a783769/resource/cc3e9e48-e363-404e-948b-e42d13c316d9/download/syria_refugeesites_2016jan21_hiu_dos.csv&quot; data_file = basename(url) if(!file.exists(data_file)) download.file(url, destfile = data_file, mode = &quot;wb&quot;) sf &lt;- st_read(data_file) sp &lt;- as.data.frame(sf) sp$Long &lt;- as(sp$Long, &quot;numeric&quot;) sp$Lat &lt;- as(sp$Lat, &quot;numeric&quot;) coordinates(sp) &lt;- c(&quot;Long&quot;, &quot;Lat&quot;) proj4string(sp) &lt;- CRS(&quot;+init=epsg:4326&quot;) # Generate the metadata id &lt;- &quot;EX2_SYR_REFUGEE_SITES&quot; my_geo_data &lt;- list( metadata_information = list( title = &quot;(Demo) Syria, Refugee Sites&quot;, producers = list( list(name = &quot;NADA team&quot;) ), production_date = &quot;2022-02-18&quot; ), description = list( idno = id, language = &quot;eng&quot;, characterSet = list(codeListValue = &quot;utf8&quot;), hierarchyLevel = list(&quot;dataset&quot;), contact = list( list( organisationName = &quot;U.S. Department of State - Humanitarian Information Unit&quot;, contactInfo = list( address = list(electronicEmailAddress = &quot;HIU_DATA@state.gov&quot;), onlineResource = list(linkage = &quot;http://hiu.state.gov/&quot;, name = &quot;Website&quot;) ), role = &quot;pointOfContact&quot; ) ), dateStamp = &quot;2018-06-18&quot;, metadataStandardName = &quot;ISO 19115:2003/19139&quot;, spatialRepresentationInfo = list( list( vectorSpatialRepresentation = list( topologyLevel = &quot;geometryOnly&quot;, geometricObjects = list( list( geometricObjectType = &quot;point&quot;, geometricObjectCounty = nrow(sp) ) ) ) ) ), referenceSystemInfo = list( list(code = &quot;4326&quot;, codeSpace = &quot;EPSG&quot;) ), identificationInfo = list( list( citation = list( title = &quot;Syria Refugee Sites&quot;, date = list( list(date = &quot;2016-01-14&quot;, type = &quot;creation&quot;), list(date = &quot;2016-02-04&quot;, type = &quot;publication&quot;) ), identifier = list(authority = &quot;IHSN&quot;, code = id), citedResponsibleParty = list( list( individualName = &quot;Humanitarian Information Unit&quot;, organisationName = &quot;U.S. Department of State - Humanitarian Information Unit&quot;, contactInfo = list( address = list( electronicEmailAddress = &quot;HIU_DATA@state.gov&quot; ), onlineResource = list( linkage = &quot;http://hiu.state.gov/&quot;, name = &quot;Website&quot; ) ), role = &quot;owner&quot; ) ) ), abstract = &quot;The &#39;Syria Refugee Sites&#39; dataset is compiled by the U.S. Department of State, Humanitarian Information Unit (INR/GGI/HIU). This dataset contains open source derived data about the geographic location (point geometry), name, and operational status of refugee sites hosting Syrian refugees in Turkey, Jordan, and Iraq. Only refugee sites operated by the United Nations High Commissioner for Refugees (UNHCR) or the Government of Turkey are included. Compiled by the U.S Department of State, Humanitarian Information Unit (HIU), each attribute in the dataset (including name, location, and status) is verified against multiple sources. The name and status are obtained from UN and AFAD reporting and the UNHCR data portal (accessible at http://data.unhcr.org/syrianrefugees/regional.php). The locations are obtained from both the U.S. Department of State, PRM and the National Geospatial-Intelligence Agency&#39;s GEOnet Names Server (GNS) (accessible at http://geonames.nga.mil/ggmagaz/). The name and status for each refugee site is verified with PRM. Locations are verified using high-resolution commercial satellite imagery and/or known areas of population. Additionally, all data is checked against various news sources. The data contained herein is entirely unclassified and is current as of 14 January 2016. The data is updated as needed.&quot;, purpose = &quot;The &#39;Syria Refugee Sites&#39; dataset contains verified data about the refugee sites hosting Syrian refugees in Turkey, Jordan, and Iraq. This file is compiled by the U.S Department of State, Humanitarian Information Unit (HIU) and is used in the production of the unclassified &#39;Syria: Numbers and Locations of Syrian Refugees&#39; map product (accessible at https://hiu.state.gov/Pages/MiddleEast.aspx). The data contained herein is entirely unclassified and is current as of 14 January 2016.&quot;, credit = &quot;U.S. Department of State - Humanitarian Information Unit&quot;, status = &quot;onGoing&quot;, pointOfContact = list( list( individualName = &quot;Humanitarian Information Unit&quot;, organisationName = &quot;U.S. Department of State - Humanitarian Information Unit&quot;, contactInfo = list( address = list(electronicEmailAddress = &quot;HIU_DATA@state.gov&quot;), onlineResource = list(linkage = &quot;http://hiu.state.gov/&quot;, name = &quot;Website&quot;) ), role = &quot;pointOfContact&quot; ) ), resourceMaintenance = list( list(maintenanceOrUpdateFrequency = &quot;fortnightly&quot;) ), # graphicOverview = list(), resourceFormat = list( list( name = &quot;text/csv&quot;, specification = &quot;RFC4180 - Common Format and MIME Type for Comma-Separated Values (CSV) Files&quot; ), list( name = &quot;text/tab-separated-values&quot;, specification = &quot;Tab-Separated Values (CSV)&quot; ), list( name = &quot;xlsx&quot;, specification = &quot;Microsoft Excel (XLSX)&quot; ) ), descriptiveKeywords = list( list(type = &quot;theme&quot;, keyword = &quot;Middle East&quot;), list(type = &quot;theme&quot;, keyword = &quot;Refugees&quot;), list(type = &quot;theme&quot;, keyword = &quot;Displacement&quot;), list(type = &quot;theme&quot;, keyword = &quot;Refugee Camps&quot;), list(type = &quot;theme&quot;, keyword = &quot;UNHCR&quot;), list(type = &quot;place&quot;, keyword = &quot;Syria&quot;), list(type = &quot;place&quot;, keyword = &quot;Turkey&quot;), list(type = &quot;place&quot;, keyword = &quot;Lebanon&quot;), list(type = &quot;place&quot;, keyword = &quot;Jordan&quot;), list(type = &quot;place&quot;, keyword = &quot;Iraq&quot;), list(type = &quot;place&quot;, keyword = &quot;Egypt&quot;) ), resourceConstraints = list( list( legalConstraints = list( uselimitation = list(&quot;License: Creative Commons Attribution 4.0 International License&quot;), accessConstraints = list(&quot;unrestricted&quot;), useConstraints = list(&quot;licenceUnrestricted&quot;) ) ), list( securityConstraints = list( classification = &quot;unclassified&quot;, handlingDescription = &quot;All data contained herein are strictly unclassified with no restrictions on distribution. Accuracy of geographic data is not assured by the U.S. Department of State.&quot; ) ) ), extent = list( geographicElement = list( list( geographicBoundingBox = list( southBoundLatitude = bbox(sp)[2,1], westBoundLongitude = bbox(sp)[1,1], northBoundLatitude = bbox(sp)[2,2], eastBoundLongitude = bbox(sp)[1,2] ) ) ) ), spatialRepresentationType = &quot;vector&quot;, language = list(&quot;eng&quot;), characterSet = list( list(codeListValue = &quot;utf8&quot;) ), topicCategory = list(&quot;society&quot;) ) ), distributionInfo = list( distributionFormat = list( list( name = &quot;text/csv&quot;, specification = &quot;RFC4180 - Common Format and MIME Type for Comma-Separated Values (CSV) Files&quot; ), list( name = &quot;text/tab-separated-values&quot;, specification = &quot;Tab-Separated Values (CSV)&quot; ), list( name = &quot;xlsx&quot;, specification = &quot;Microsoft Excel (XLSX)&quot; ) ), distributor = list( list( individualName = &quot;Humanitarian Information Unit&quot;, organisationName = &quot;U.S. Department of State - Humanitarian Information Unit&quot;, contactInfo = list( address = list(electronicEmailAddress = &quot;HIU_DATA@state.gov&quot;), onlineResource = list(linkage = &quot;http://hiu.state.gov/&quot;, name = &quot;Website&quot;) ), role = &quot;distributor&quot; ) ) #, # transferOptions = list( # list( # onLine = list( # list( # linkage = &quot;https://data.humdata.org/dataset/syria-refugee-sites&quot;, # name = &quot;Source metadata (HTML View)&quot;, # protocol = &quot;WWW:LINK-1.0-http--link&quot;, # &quot;function&quot; = &quot;Information&quot; # ), # list( # linkage = &quot;https://data.humdata.org/dataset/ff383a8b-396a-4d78-b403-687b0a783769/resource/cc3e9e48-e363-404e-948b-e42d13c316d9/download/syria_refugeesites_2016jan21_hiu_dos.csv&quot;, # name = &quot;syria_refugeesites_2016jan21_hiu_dos.csv&quot;, # description = &quot;Data download (CSV)&quot;, # protocol = &quot;WWW:LINK-1.0-http--link&quot; # ), # list( # linkage = &quot;https://data.humdata.org/dataset/ff383a8b-396a-4d78-b403-687b0a783769/resource/42f7884c-f54d-478c-a970-623945740e5d/download/syria_refugeesites_2016jan21_hiu_dos.tsv&quot;, # name = &quot;syria_refugeesites_2016jan21_hiu_dos.tsv&quot;, # description = &quot;Data download (TSV)&quot;, # protocol = &quot;WWW:LINK-1.0-http--link&quot; # ), # list( # linkage = &quot;https://data.humdata.org/dataset/ff383a8b-396a-4d78-b403-687b0a783769/resource/59660c9a-e41a-4d54-bfc2-dd8fd1032c97/download/syria_refugeesites_2016jan21_hiu_dos.xlsx&quot;, # name = &quot;syria_refugeesites_2016jan21_hiu_dos.xlsx&quot;, # description = &quot;Data download (TSV)&quot;, # protocol = &quot;WWW:LINK-1.0-http--link&quot; # ) # ) # ) # ) ), dataQualityInfo = list( list( scope = &quot;dataset&quot;, lineage = list( statement = &quot;Methodology: Compiled by the U.S Department of State, Humanitarian Information Unit (INR/GGI/HIU), each attribute in the dataset (including name, location, and status) is verified against multiple sources. The name and status are obtained from the UNHCR data portal (accessible at http://data.unhcr.org/syrianrefugees/regional.php). The locations are obtained from the U.S. Department of State, Bureau of Population, Refugees, and Migration (PRM) and the National Geospatial-Intelligence Agency&#39;s GEOnet Names Server (GNS) (accessible at http://geonames.nga.mil/ggmagaz/). The name and status for each refugee site is verified with PRM. Locations are verified using high-resolution commercial satellite imagery and/or known areas of population. Additionally, all data is checked against various news sources.&quot; ) ) ), metadataMaintenance = list(maintenanceAndUpdateFrequency = &quot;fortnightly&quot;) ) ) # Publish in NADA catalog geospatial_add( idno = id, metadata = my_geo_data, repositoryid = &quot;central&quot;, published = 1, thumbnail = NULL, overwrite = &quot;yes&quot; ) Generating the metadata using Python The result in NADA 6.10.3 Example 3 (vector, with Feature Catalogue) - The GDIS (beta) dataset This example demonstrates the use of the ISO 19115 (geographic dataset) and ISO 19110 (feature catalogue). Documenting features contained in datasets makes the metadata richer and more discoverable. It is recommended to provide such information, which can easily be extracted from shape files and others. The dataset used for the example is the Geocoded Disasters (GDIS) Dataset, v1 (1960-2018) library(nadar) library(sf) # ---------------------------------------------------------------------------------- # Enter credentials (API confidential key) and catalog URL my_keys &lt;- read.csv(&quot;C:/confidential/my_API_keys.csv&quot;, header=F, stringsAsFactors=F) set_api_key(&quot;my_keys[1,1&quot;) set_api_url(&quot;https://.../index.php/api/&quot;) set_api_verbose(FALSE) # ---------------------------------------------------------------------------------- setwd(&quot;C:/my_geo_data/&quot;) thumb = &quot;disaster.JPG&quot; # Load the dataset (2 Gb) to extract some information load(&quot;pend-gdis-1960-2018-disasterlocations.rdata&quot;) data = GDIS_disasterlocations df = as.data.frame(GDIS_disasterlocations) column_names = colnames(df)[!colnames(df) %in% c(&quot;geometry&quot;,&quot;centroid&quot;)] exclude_listed_values_for = c(&quot;longitude&quot;, &quot;latitude&quot;) #exclude ISO 19110 listed values for these columns # Generate the metadata id &lt;- &quot;GDIS_TEST_01&quot; ttl = &quot;Geocoded Disasters (GDIS) Dataset, v1 (1960–2018)&quot; my_geo_data &lt;- list( metadata_information = list( title = ttl, idno = id, producers = list( list(name = &quot;NADA team&quot;) ), production_date = &quot;2022-02-18&quot;, version = &quot;v1.0 2022-02&quot; ), description = list( idno = id, language = &quot;English&quot;, characterSet = list( codeListValue = &quot;utf8&quot;, codeList = &quot;http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_CharacterSetCode&quot; ), hierarchyLevel = list(&quot;dataset&quot;), contact = list( list( organisationName = &quot;NASA Socioeconomic Data and Applications Center (SEDAC)&quot;, contactInfo = list( phone = list( voice = &quot;+1 845-365-8920&quot;, facsimile = &quot;+1 845-365-8922&quot; ), address = list( deliveryPoint = &quot;CIESIN, Columbia University, 61 Route 9W, P.O. Box 1000&quot;, city = &quot;Palisades, NY&quot;, postalCode = &quot;10964&quot;, electronicEmailAddress = &quot;ciesin.info@ciesin.columbia.edu&quot; ) ), role = &quot;pointOfContact&quot; ) ), dateStamp = &quot;2021-03-10&quot;, metadataStandardName = &quot;ISO 19115:2003/19139&quot;, dataSetURI = &quot;https://beta.sedac.ciesin.columbia.edu/data/set/pend-gdis-1960-2018&quot;, spatialRepresentationInfo = list( list( vectorSpatialRepresentation = list( topologyLevel = &quot;geometryOnly&quot;, geometricObjects = list( list( geometricObjectType = tolower(as.character(st_geometry_type(data)[1])), geometricObjectCounty = nrow(data) ) ) ) ) ), referenceSystemInfo = list( list(code = &quot;4326&quot;, codeSpace = &quot;EPSG&quot;) ), identificationInfo = list( list( citation = list( title = ttl, date = list( list(date = &quot;2021-03-10&quot;, type = &quot;publication&quot;) ), identifier = list(authority= &quot;DOI&quot;, code = &quot;10.7927/zz3b-8y61&quot;), citedResponsibleParty = list( list( individualName = &quot;Rosvold, E., and H. Buhaug&quot;, role = &quot;owner&quot; ) ), edition = &quot;1.00&quot;, presentationForm = list(&quot;raster&quot;, &quot;map&quot;, &quot;map service&quot;), series = list( name = &quot;Scientific Data&quot;, issueIdentification = &quot;8:61&quot; ) ), abstract = &quot;The Geocoded Disasters (GDIS) Dataset is a geocoded extension of a selection of natural disasters from the Centre for Research on the Epidemiology of Disasters&#39; (CRED) Emergency Events Database (EM-DAT). The data set encompasses 39,953 locations for 9,924 disasters that occurred worldwide in the years 1960 to 2018. All floods, storms (typhoons, monsoons etc.), earthquakes, landslides, droughts, volcanic activity and extreme temperatures that were recorded in EM-DAT during these 58 years and could be geocoded are included in the data set. The highest spatial resolution in the data set corresponds to administrative level 3 (usually district/commune/village) in the Global Administrative Areas database (GADM, 2018). The vast majority of the locations are administrative level 1 (typically state/province/region).&quot;, purpose = &quot;To provide the subnational location for different types of natural disasters recorded in EM-DAT between 1960-2018.&quot;, credit = &quot;NASA Socioeconomic Data and Applications Center (SEDAC)&quot;, status = &quot;completed&quot;, pointOfContact = list( list( organisationName = &quot;NASA Socioeconomic Data and Applications Center (SEDAC)&quot;, contactInfo = list( phone = list( voice = &quot;+1 845-365-8920&quot;, facsimile = &quot;+1 845-365-8922&quot; ), address = list( deliveryPoint = &quot;CIESIN, Columbia University, 61 Route 9W, P.O. Box 1000&quot;, city = &quot;Palisades, NY&quot;, postalCode = &quot;10964&quot;, electronicEmailAddress = &quot;ciesin.info@ciesin.columbia.edu&quot; ) ), role = &quot;pointOfContact&quot; ) ), resourceMaintenance = list( list(maintenanceOrUpdateFrequency = &quot;asNeeded&quot;) ), graphicOverview = list( list( fileName = &quot;https://sedac.ciesin.columbia.edu/downloads/maps/pend/pend-gdis-1960-2018/sedac-logo.jpg&quot;, fileDescription = &quot;Geocoded Disasters (GDIS) Dataset&quot;, fileType = &quot;image/jpeg&quot; ) ), resourceFormat = list( list( name = &quot;OpenFileGDB&quot;, specification = &quot;ESRI - GeoDatabase&quot; ), list( name = &quot;text/csv&quot;, specification = &quot;RFC4180 - Common Format and MIME Type for Comma-Separated Values (CSV) Files&quot; ), list( name = &quot;application/geopackage+sqlite3&quot;, specification = &quot;http://www.geopackage.org/spec/&quot; ) ), descriptiveKeywords = list( list(type = &quot;theme&quot;, keyword = &quot;climatology&quot;), list(type = &quot;theme&quot;, keyword = &quot;meteorology&quot;), list(type = &quot;theme&quot;, keyword = &quot;atmosphere&quot;), list(type = &quot;theme&quot;, keyword = &quot;earth science&quot;, thesaurusName = &quot;GCMD Science Keywords, Version 8.6&quot;), list(type = &quot;theme&quot;, keyword = &quot;human dimension&quot;, thesaurusName = &quot;GCMD Science Keywords, Version 8.6&quot;), list(type = &quot;theme&quot;, keyword = &quot;natural hazard&quot;, thesaurusName = &quot;GCMD Science Keywords, Version 8.6&quot;), list(type = &quot;theme&quot;, keyword = &quot;drought&quot;, thesaurusName = &quot;GCMD Science Keywords, Version 8.6&quot;), list(type = &quot;theme&quot;, keyword = &quot;earthquake&quot;, thesaurusName = &quot;GCMD Science Keywords, Version 8.6&quot;), list(type = &quot;theme&quot;, keyword = &quot;flood&quot;, thesaurusName = &quot;GCMD Science Keywords, Version 8.6&quot;), list(type = &quot;theme&quot;, keyword = &quot;landslides&quot;, thesaurusName = &quot;GCMD Science Keywords, Version 8.6&quot;), list(type = &quot;theme&quot;, keyword = &quot;tropical cyclones&quot;, thesaurusName = &quot;GCMD Science Keywords, Version 8.6&quot;), list(type = &quot;theme&quot;, keyword = &quot;cyclones&quot;, thesaurusName = &quot;GCMD Science Keywords, Version 8.6&quot;), list(type = &quot;theme&quot;, keyword = &quot;volcanic eruption&quot;, thesaurusName = &quot;GCMD Science Keywords, Version 8.6&quot;) ), resourceConstraints = list( list( legalConstraints = list( uselimitation = list( &quot;This work is licensed under the Creative Commons Attribution 4.0 International License (https://creativecommons.org/licenses/by/4.0). Users are free to use, copy, distribute, transmit, and adapt the work for commercial and non-commercial purposes, without restriction, as long as clear attribution of the source is provided.&quot;, &quot;Recommended citation: Rosvold, E.L., Buhaug, H. GDIS, a global dataset of geocoded disaster locations. Scientific Data 8, 61 (2021). https://doi.org/10.1038/s41597-021-00846-6.&quot; ), accessConstraints = list(&quot;unrestricted&quot;), useConstraints = list(&quot;licenceUnrestricted&quot;) ) ) ), extent = list( geographicElement = list( list( geographicBoundingBox = list( westBoundLongitude = -180, eastBoundLongitude = 180, southBoundLatitude = -58, northBoundLatitude = 90 ) ) )#, # temporalElement = list( # list( # extent = list( # TimePeriod = list( # beginPosition = &quot;1960-01-01&quot;, # endPosition = &quot;2018-12-31&quot; # ) # ) # ) # ) ), spatialRepresentationType = &quot;vector&quot;, language = list(&quot;eng&quot;), characterSet = list( list( codeListValue = &quot;utf8&quot;, codeList = &quot;http://standards.iso.org/iso/19139/resources/gmxCodelists.xml#MD_CharacterSetCode&quot; ) ) ) ), distributionInfo = list( distributionFormat = list( list(name = &quot;OpenFileGDB&quot;, specification = &quot;ESRI - GeoDatabase&quot;, fileDecompressionTechnique = &quot;Unzip&quot;), list(name = &quot;text/csv&quot;, specification = &quot;RFC4180 - Common Format and MIME Type for Comma-Separated Values (CSV) Files&quot;, fileDecompressionTechnique = &quot;Unzip&quot;), list(name = &quot;application/geopackage+sqlite3&quot;, specification = &quot;http://www.geopackage.org/spec/&quot;, fileDecompressionTechnique = &quot;Unzip&quot;) ), distributor = list( list( organisationName = &quot;NASA Socioeconomic Data and Applications Center (SEDAC)&quot;, contactInfo = list( phone = list( voice = &quot;+1 845-365-8920&quot;, facsimile = &quot;+1 845-365-8922&quot; ), address = list( deliveryPoint = &quot;CIESIN, Columbia University, 61 Route 9W, P.O. Box 1000&quot;, city = &quot;Palisades, NY&quot;, postalCode = &quot;10964&quot;, electronicEmailAddress = &quot;ciesin.info@ciesin.columbia.edu&quot; ) ), role = &quot;pointOfContact&quot; ) )#, # transferOptions = list( # list( # onLine = list( # list( # linkage = &quot;https://beta.sedac.ciesin.columbia.edu/data/set/pend-gdis-1960-2018&quot;, # name = &quot;Source metadata (HTML View)&quot;, # protocol = &quot;WWW:LINK-1.0-http--link&quot;, # &quot;function&quot; = &quot;Information&quot; # ), # list( # linkage = &quot;https://beta.sedac.ciesin.columbia.edu/downloads/data/pend/pend-gdis-1960-2018/pend-gdis-1960-2018-disasterlocations-gdb.zip&quot;, # name = &quot;pend-gdis-1960-2018-disasterlocations-gdb.zip&quot;, # description = &quot;Data download (Geodatabase)&quot;, # protocol = &quot;WWW:LINK-1.0-http--link&quot; # ), # list( # linkage = &quot;https://beta.sedac.ciesin.columbia.edu/downloads/data/pend/pend-gdis-1960-2018/pend-gdis-1960-2018-disasterlocations-gpkg.zip&quot;, # name = &quot;pend-gdis-1960-2018-disasterlocations-gpkg.zip&quot;, # description = &quot;Data download (GeoPackage)&quot;, # protocol = &quot;WWW:LINK-1.0-http--link&quot; # ), # list( # linkage = &quot;https://beta.sedac.ciesin.columbia.edu/downloads/data/pend/pend-gdis-1960-2018/pend-gdis-1960-2018-disasterlocations-csv.zip&quot;, # name = &quot;pend-gdis-1960-2018-disasterlocations-csv.zip&quot;, # description=&quot;Data download (CSV)&quot;, # protocol = &quot;WWW:LINK-1.0-http--link&quot; # ), # list( # linkage = &quot;https://beta.sedac.ciesin.columbia.edu/downloads/data/pend/pend-gdis-1960-2018/pend-gdis-1960-2018-priogrid-key-csv.zip&quot;, # name = &quot;pend-gdis-1960-2018-priogrid-key-csv.zip&quot;, # description = &quot;Data download (CSV)&quot;, # protocol = &quot;WWW:LINK-1.0-http--link&quot; # ), # list( # linkage = &quot;https://beta.sedac.ciesin.columbia.edu/downloads/data/pend/pend-gdis-1960-2018/pend-gdis-1960-2018-disasterlocations-rdata.zip&quot;, # name = &quot;pend-gdis-1960-2018-disasterlocations-rdata.zip&quot;, # description = &quot;Data download (RData)&quot;, # protocol = &quot;WWW:LINK-1.0-http--link&quot; # ), # list( # linkage = &quot;https://beta.sedac.ciesin.columbia.edu/downloads/data/pend/pend-gdis-1960-2018/pend-gdis-1960-2018-replicationcode-r.zip&quot;, # name = &quot;pend-gdis-1960-2018-replicationcode-r.zip&quot;, # description = &quot;Source code (R)&quot;, # protocol = &quot;WWW:LINK-1.0-http--link&quot; # ), # list( # linkage = &quot;https://beta.sedac.ciesin.columbia.edu/downloads/data/pend/pend-gdis-1960-2018/pend-gdis-1960-2018-codebook.pdf&quot;, # name = &quot;pend-gdis-1960-2018-codebook.pdf&quot;, # description = &quot;Codebook (PDF)&quot;, # protocol = &quot;WWW:LINK-1.0-http--link&quot; # ) # ) # ) # ) ), dataQualityInfo = list( list( scope = &quot;dataset&quot;, lineage = list( statement = &quot;CIESIN follows procedures designed to ensure that data disseminated by CIESIN are of reasonable quality. If, despite these procedures, users encounter apparent errors or misstatements in the data, they should contact SEDAC User Services at +1 845-365-8920 or via email at ciesin.info@ciesin.columbia.edu. Neither CIESIN nor NASA verifies or guarantees the accuracy, reliability, or completeness of any data provided. CIESIN provides this data without warranty of any kind whatsoever, either expressed or implied. CIESIN shall not be liable for incidental, consequential, or special damages arising out of the use of any data provided by CIESIN.&quot; ) ) ), metadataMaintenance = list( maintenanceAndUpdateFrequency = &quot;asNeeded&quot; ) ), # Feature catalog (ISO 19110/19139) feature_catalogue = list( name = sprintf(&quot;%s - Feature Catalogue&quot;, ttl), featureType = list( list( typeName = ttl, definition = &quot;Disaster locations&quot;, code = &quot;pend-gdis-1960-2018-disasterlocations&quot;, isAbstract = FALSE, # carrierOfCharacteristics = lapply(column_names, function(column_name){ # print(column_name) # values = unique(df[,column_name]) # values = values[order(values)] # member = list( # memberName = sprintf(&quot;Label for &#39;%s&#39;&quot;, column_name), # definition = sprintf(&quot;Definition for &#39;%s&#39;&quot;, column_name), # cardinality = list(lower = 1, upper = 1), # code = column_name, # valueType = switch(class(df[,column_name]), &quot;character&quot; = &quot;xs:string&quot;, &quot;integer&quot; = &quot;xs:int&quot;, &quot;numeric&quot; = &quot;xs:decimal&quot;, &quot;xs:string&quot;), # valueMeasurementUnit = NA, # listedValue = if(column_name %in% exclude_listed_values_for) {list()} else {lapply(values, function(x){ list(label = sprintf(&quot;Label for &#39;%s&#39;&quot;, x), code = x, definition = sprintf(&quot;Definition for &#39;%s&#39;&quot;, x)) })} # ) # return(member) # }) carrierOfCharacteristics = list( list( memberName = &#39;id&#39;, definition = &#39;ID-variable identifying each disaster in the geocoded dataset. Contrary to disasterno each disaster in each country has a unique id number&#39;, cardinality = list(lower = 1, upper = 1), code = &#39;DFA01&#39;, # short for Disaster Feature Attribute 01 valueType = switch(class(df[,&#39;id&#39;]), &quot;character&quot; = &quot;xs:string&quot;, &quot;integer&quot; = &quot;xs:int&quot;, &quot;numeric&quot; = &quot;xs:decimal&quot;, &quot;xs:string&quot;), valueMeasurementUnit = &#39;NA&#39; ), list( memberName = &#39;country&#39;, definition = &#39;Name of the country within which the location is&#39;, cardinality = list(lower = 1, upper = 1), code = &#39;DFA02&#39;, valueType = switch(class(df[,&#39;country&#39;]), &quot;character&quot; = &quot;xs:string&quot;, &quot;integer&quot; = &quot;xs:int&quot;, &quot;numeric&quot; = &quot;xs:decimal&quot;, &quot;xs:string&quot;), valueMeasurementUnit = &#39;NA&#39; ), list( memberName = &#39;iso3&#39;, definition = &#39;Three-letter country code, ISO 3166-1&#39;, cardinality = list(lower = 1, upper = 1), code = &#39;DFA03&#39;, valueType = switch(class(df[,&#39;iso3&#39;]), &quot;character&quot; = &quot;xs:string&quot;, &quot;integer&quot; = &quot;xs:int&quot;, &quot;numeric&quot; = &quot;xs:decimal&quot;, &quot;xs:string&quot;), valueMeasurementUnit = &#39;NA&#39; ), list( memberName = &#39;gwno&#39;, definition = &#39;Gledistsch and Ward country code (Gleditsch &amp; Ward, 1999)&#39;, cardinality = list(lower = 1, upper = 1), code = &#39;DFA04&#39;, valueType = switch(class(df[,&#39;gwno&#39;]), &quot;character&quot; = &quot;xs:string&quot;, &quot;integer&quot; = &quot;xs:int&quot;, &quot;numeric&quot; = &quot;xs:decimal&quot;, &quot;xs:string&quot;), valueMeasurementUnit = &#39;NA&#39; ), list( memberName = &#39;geo_id&#39;, definition = &#39;Unique ID-variable for each location&#39;, cardinality = list(lower = 1, upper = 1), code = &#39;DFA05&#39;, valueType = switch(class(df[,&#39;geo_id&#39;]), &quot;character&quot; = &quot;xs:string&quot;, &quot;integer&quot; = &quot;xs:int&quot;, &quot;numeric&quot; = &quot;xs:decimal&quot;, &quot;xs:string&quot;), valueMeasurementUnit = &#39;NA&#39; ), list( memberName = &#39;geolocation&#39;, definition = &#39;Name of the location of the observation, which corresponds to the highest (most disaggregated) level available. For instance, observations at the third administrative level will have geolocation values identical to the adm3 variable&#39;, cardinality = list(lower = 1, upper = 1), code = &#39;DFA06&#39;, valueType = switch(class(df[,&#39;geolocation&#39;]), &quot;character&quot; = &quot;xs:string&quot;, &quot;integer&quot; = &quot;xs:int&quot;, &quot;numeric&quot; = &quot;xs:decimal&quot;, &quot;xs:string&quot;), valueMeasurementUnit = &#39;NA&#39; ), list( memberName = &#39;level&#39;, definition = &#39;The administrative level of the observation, ranges from 1-3 where 3 is the most disaggregated&#39;, cardinality = list(lower = 1, upper = 1), code = &#39;DFA07&#39;, valueType = switch(class(df[,&#39;level&#39;]), &quot;character&quot; = &quot;xs:string&quot;, &quot;integer&quot; = &quot;xs:int&quot;, &quot;numeric&quot; = &quot;xs:decimal&quot;, &quot;xs:string&quot;), valueMeasurementUnit = &#39;NA&#39; ), list( memberName = &#39;adm1&#39;, definition = &#39;Name of administrative level 1 for the given location&#39;, cardinality = list(lower = 1, upper = 1), code = &#39;DFA08&#39;, valueType = switch(class(df[,&#39;adm1&#39;]), &quot;character&quot; = &quot;xs:string&quot;, &quot;integer&quot; = &quot;xs:int&quot;, &quot;numeric&quot; = &quot;xs:decimal&quot;, &quot;xs:string&quot;), valueMeasurementUnit = &#39;NA&#39; ), list( memberName = &#39;adm2&#39;, definition = &#39;Name of administrative level 2 for the given location&#39;, cardinality = list(lower = 1, upper = 1), code = &#39;DFA09&#39;, valueType = switch(class(df[,&#39;adm2&#39;]), &quot;character&quot; = &quot;xs:string&quot;, &quot;integer&quot; = &quot;xs:int&quot;, &quot;numeric&quot; = &quot;xs:decimal&quot;, &quot;xs:string&quot;), valueMeasurementUnit = &#39;NA&#39; ), list( memberName = &#39;location&#39;, definition = &#39;Name of administrative level 3 for the given location&#39;, cardinality = list(lower = 1, upper = 1), code = &#39;DFA10&#39;, valueType = switch(class(df[,&#39;location&#39;]), &quot;character&quot; = &quot;xs:string&quot;, &quot;integer&quot; = &quot;xs:int&quot;, &quot;numeric&quot; = &quot;xs:decimal&quot;, &quot;xs:string&quot;), valueMeasurementUnit = &#39;NA&#39; ), list( memberName = &#39;historical&#39;, definition = &#39;Marks whether the disaster happened in a country that has since changed, takes the value 1 if the disaster happened in a country that has since changed, and 0 if not&#39;, cardinality = list(lower = 1, upper = 1), code = &#39;DFA11&#39;, valueType = switch(class(df[,&#39;historical&#39;]), &quot;character&quot; = &quot;xs:string&quot;, &quot;integer&quot; = &quot;xs:int&quot;, &quot;numeric&quot; = &quot;xs:decimal&quot;, &quot;xs:string&quot;), valueMeasurementUnit = &#39;NA&#39; ), list( memberName = &#39;hist_country&#39;, definition = &#39;Name of country at the time of the disaster, if the observation takes the value 1 on the historical variable, this is different from the country variable&#39;, cardinality = list(lower = 1, upper = 1), code = &#39;DFA12&#39;, valueType = switch(class(df[,&#39;hist_country&#39;]), &quot;character&quot; = &quot;xs:string&quot;, &quot;integer&quot; = &quot;xs:int&quot;, &quot;numeric&quot; = &quot;xs:decimal&quot;, &quot;xs:string&quot;), valueMeasurementUnit = &#39;NA&#39; ), list( memberName = &#39;disastertype&#39;, definition = &#39;Type of disaster as defined by EM-DAT (Guha-Sapir et al., 2014): flood, storm, earthquake, extreme temperature, landslide, volcanic activity, drought or mass movement (dry)&#39;, cardinality = list(lower = 1, upper = 1), code = &#39;DFA13&#39;, valueType = switch(class(df[,&#39;disastertype&#39;]), &quot;character&quot; = &quot;xs:string&quot;, &quot;integer&quot; = &quot;xs:int&quot;, &quot;numeric&quot; = &quot;xs:decimal&quot;, &quot;xs:string&quot;), valueMeasurementUnit = &#39;NA&#39;, listedValue = list( list( label = &#39;flood&#39;, code = &#39;flood&#39;, definition = &#39;A general term for the overflow of water from a stream channel onto normally dry land in the floodplain (riverine flooding), higher-than-normal levels along the coast and in lakes or reservoirs (coastal flooding) as well as ponding of water at or near the point where the rain fell (flash floods).&#39; ), list( label = &#39;storm&#39;, code = &#39;storm&#39;, definition = &#39;A type of meteorological hazard generated by the heating of air and the availability of moist and unstable air masses. Convective storms range from localized thunderstorms (with heavy rain and/or hail, lightning, high winds, tornadoes) to meso-scale, multi-day events.&#39; ), list( label = &#39;earthquake&#39;, code = &#39;earthquake&#39;, definition = &#39;Sudden movement of a block of the Earth’s crust along a geological fault and associated ground shaking.&#39; ), list( label = &#39;extreme temperature&#39;, code = &#39;extreme temperature&#39;, definition = &#39;A general term for temperature variations above (extreme heat) or below (extreme cold) normal conditions.&#39; ), list( label = &#39;landslide&#39;, code = &#39;landslide&#39;, definition = &#39;Independent of the presence of water, mass movement may also be triggered by earthquakes.&#39; ), list( label = &#39;volcanic activity&#39;, code = &#39;volcanic activity&#39;, definition = &#39;A type of volcanic event near an opening/vent in the Earth’s surface including volcanic eruptions of lava, ash, hot vapor, gas, and pyroclastic material.&#39; ), list( label = &#39;drought&#39;, code = &#39;drought&#39;, definition = &#39;An extended period of unusually low precipitation that produces a shortage of water for people, animals, and plants. Drought is different from most other hazards in that it develops slowly, sometimes even over years, and its onset is generally difficult to detect. Drought is not solely a physical phenomenon because its impacts can be exacerbated by human activities and water supply demands. Drought is therefore often defined both conceptually and operationally. Operational definitions of drought, meaning the degree of precipitation reduction that constitutes a drought, vary by locality, climate and environmental sector.&#39; ), list( label = &#39;mass movement (dry)&#39;, code = &#39;mass movement (dry)&#39;, definition = &#39;Any type of downslope movement of earth materials.&#39; ) ) ), list( memberName = &#39;disasterno&#39;, definition = &#39;ID-variable from EM-DAT (Guha-Sapir et al., 2014), use this to join the geocoded data with EM-DAT records in order to obtain information on the specific disasters&#39;, cardinality = list(lower = 1, upper = 1), code = &#39;DFA14&#39;, valueType = switch(class(df[,&#39;disasterno&#39;]), &quot;character&quot; = &quot;xs:string&quot;, &quot;integer&quot; = &quot;xs:int&quot;, &quot;numeric&quot; = &quot;xs:decimal&quot;, &quot;xs:string&quot;), valueMeasurementUnit = &#39;NA&#39; ) ) ) ) ) ) # Publish in NADA catalog geospatial_add( idno = id, metadata = my_geo_data, repositoryid = &quot;central&quot;, published = 1, thumbnail = thumb, overwrite = &quot;yes&quot;) # Add links as external resources external_resources_add( idno = id, dctype = &quot;web&quot;, title = &quot;Website: Geocoded Disasters (GDIS) Dataset, v1 (1960–2018)&quot;, file_path = &quot;https://beta.sedac.ciesin.columbia.edu/data/set/pend-gdis-1960-2018&quot;, overwrite = &quot;yes&quot; ) 6.10.4 Example 4 (raster): Spatial distribution of the Ethiopian population in 2020 This fourth example makes use of elements from the ISO 19115 to document a dataset generated by the WorldPop program using data from multiple sources and machine learning models. “WorldPop develops peer-reviewed research and methods for the construction of open and high-resolution geospatial data on population distributions, demographic and dynamics, with a focus on low and middle income countries.” As of March 1st, 2021 WorldPop was publishing over 44,600 datasets on its website. See https://www.worldpop.org/project/categories?id=3. The selected example represents the spatial distribution of the Ethiopian population in 2020. Generating the metadata using R library(nadar) library(raster) # ---------------------------------------------------------------------------------- # Enter credentials (API confidential key) and catalog URL my_keys &lt;- read.csv(&quot;C:/confidential/my_API_keys.csv&quot;, header=F, stringsAsFactors=F) set_api_key(&quot;my_keys[1,1&quot;) set_api_url(&quot;https://.../index.php/api/&quot;) set_api_verbose(FALSE) # ---------------------------------------------------------------------------------- setwd(&quot;C:/my_geo_data/&quot;) # Download and read the dataset url = &quot;https://data.worldpop.org/GIS/Population/Global_2000_2020_Constrained/2020/maxar_v1/ETH/eth_ppp_2020_constrained.tif&quot; filename = basename(url) if(!file.exists(filename)) download.file(url, destfile = filename, mode = &quot;wb&quot;) ras &lt;- raster(&quot;eth_ppp_2020_constrained.tif&quot;) id &lt;- &quot;WP_ETH_POP&quot; thumb &lt;- &quot;ethiopia_pop.JPG&quot; # Generate the metadata my_geo_data &lt;- list( metadata_information = list( title = &quot;(Demo) Ethiopia Gridded Population 2020 (WorldPop)&quot;, producers = list(list(name = &quot;NADA team&quot;)), production_date = &quot;2022-02-18&quot; ), description = list( idno = id, language = &quot;eng&quot;, characterSet = list(codeListValue = &quot;utf8&quot;), hierarchyLevel = list(&quot;dataset&quot;), contact = list( list(organisationName = &quot;World Pop - School of Geography and Environmental Science, University of Southampton&quot;, contactInfo = list( onlineResource = list( linkage = &quot;https://www.worldpop.org/&quot;, name = &quot;Website&quot; ) ), role = &quot;pointOfContact&quot; ) ), dateStamp = &quot;2020-09-20&quot;, metadataStandardName = &quot;ISO 19115:2003/19139&quot;, spatialRepresentationInfo = list( list( gridSpatialRepresentationInfo = list( numberOfDimensions = 2L, axisDimensionproperties = list( list( dimensionName = &quot;row&quot;, dimensionSize = dim(ras)[1] ), list( dimensionName = &quot;column&quot;, dimensionSize = dim(ras)[2] ) ), cellGeometry = &quot;area&quot; ) ) ), referenceSystemInfo = list( list(code = &quot;4326&quot;, codeSpace = &quot;EPSG&quot;) ), identificationInfo = list( list( citation = list( title = &quot;Ethiopia population 2020&quot;, alternateTitle = &quot;Estimated total number of people per grid-cell at a resolution of 3 arc-seconds (approximately 100m at the equator)&quot;, date=list( list(date = &quot;2020-09-12&quot;, type = &quot;creation&quot;) ), identifier = list(authority = &quot;DOI&quot;, code = id), citedResponsibleParty = list( list( organisationName = &quot;World Pop - School of Geography and Environmental Science, University of Southampton&quot;, contactInfo = list( onlineResource = list( linkage = &quot;https://www.worldpop.org/&quot;, name = &quot;Website&quot; ) ), role = &quot;owner&quot; ) ) ), abstract = &quot;The spatial distribution of population in 2020, Ethiopia&quot;, credit = &quot;World Pop - School of Geography and Environmental Science, University of Southampton&quot;, status = &quot;completed&quot;, pointOfContact = list( list( organisationName = &quot;World Pop - School of Geography and Environmental Science, University of Southampton&quot;, contactInfo = list( onlineResource = list( linkage = &quot;https://www.worldpop.org/&quot;, name = &quot;Website&quot; ) ), role = &quot;pointOfContact&quot; ) ), resourceMaintenance = list( list(maintenanceOrUpdateFrequency = &quot;notPlanned&quot;) ), graphicOverview = list( list(fileName = thumb, fileDescription = &quot;Ethiopia population 2020&quot;) ), resourceFormat = list( list(name = &quot;image/tiff&quot;, specification = &quot;GeoTIFF&quot;) ), descriptiveKeywords = list( list(type = &quot;theme&quot;, keyword = &quot;population density&quot;), list(type = &quot;theme&quot;, keyword = &quot;gridded population&quot;), list(type = &quot;place&quot;, keyword = &quot;Ethiopia&quot;) ), resourceConstraints = list( list( legalConstraints = list( accessConstraints = list(&quot;unrestricted&quot;), useConstraints = list(&quot;licenceUnrestricted&quot;), uselimitation = list( &quot;License: Creative Commons Attribution 4.0 International License&quot;, &quot;Recommended citation: Bondarenko M., Kerr D., Sorichetta A., and Tatem, A.J. 2020. Census/projection-disaggregated gridded population datasets for 51 countries across sub-Saharan Africa in 2020 using building footprints. WorldPop, University of Southampton, UK. doi:10.5258/SOTON/WP00682&quot; ) ) ) ), extent = list( geographicElement = list( list( geographicBoundingBox = list( southBoundLatitude = bbox(ras)[2,1], westBoundLongitude = bbox(ras)[1,1], northBoundLatitude = bbox(ras)[2,2], eastBoundLongitude = bbox(ras)[1,2] ), geographicDescription = &quot;Ethiopia&quot; ) ) ), spatialRepresentationType = &quot;grid&quot;, #spatialResolution = list(value = 3, uom = &quot;arc_second&quot;), language = list(&quot;eng&quot;), characterSet = list( list(codeListValue = &quot;utf8&quot;) ), topicCategory = list(&quot;society&quot;), supplementalInformation = &quot;References: - Stevens FR, Gaughan AE, Linard C, Tatem AJ (2015) Disaggregating Census Data for Population Mapping Using Random Forests with Remotely-Sensed and Ancillary Data. PLoS ONE 10(2): e0107042. https://doi.org/10.1371/journal.pone.0107042 - WorldPop (www.worldpop.org - School of Geography and Environmental Science, University of Southampton; Department of Geography and Geosciences, University of Louisville; Departement de Geographie, Universite de Namur) and Center for International Earth Science Information Network (CIESIN), Columbia University (2018). Global High Resolution Population Denominators Project - Funded by The Bill and Melinda Gates Foundation (OPP1134076). - Dooley, C. A., Boo, G., Leasure, D.R. and Tatem, A.J. 2020. Gridded maps of building patterns throughout sub-Saharan Africa, version 1.1. University of Southampton: Southampton, UK. Source of building footprints \\&quot;Ecopia Vector Maps Powered by Maxar Satellite Imagery\\&quot;Â© 2020. doi:10.5258/SOTON/WP00677 - Bondarenko M., Nieves J. J., Stevens F. R., Gaughan A. E., Tatem A. and Sorichetta A. 2020. wpgpRFPMS: Random Forests population modelling R scripts, version 0.1.0. University of Southampton: Southampton, UK. https://dx.doi.org/10.5258/SOTON/WP00665 - Ecopia.AI and Maxar Technologies. 2020. Digitize Africa data. http://digitizeafrica.ai&quot; ) ), distributionInfo = list( distributionFormat = list( list(name = &quot;image/tiff&quot;, specification = &quot;GeoTIFF&quot;) ), distributor = list( list( organisationName = &quot;World Pop - School of Geography and Environmental Science, University of Southampton&quot;, contactInfo = list( onlineResource = list( linkage = &quot;https://www.worldpop.org/&quot;, name = &quot;Website&quot; ) ), role = &quot;distributor&quot; ) )#, # transferOptions = list( @@@ Use DC external resources? # list( # onLine = list( # list( # linkage = &quot;https://www.worldpop.org/geodata/summary?id=49635&quot;, # name = &quot;Source metadata (HTML View)&quot;, # protocol = &quot;WWW:LINK-1.0-http--link&quot; # ), # list( # linkage = &quot;https://www.worldpop.org/ajax/pdf/summary?id=49635&quot;, # name = &quot;Source metadata (PDF)&quot;, # protocol = &quot;WWW:LINK-1.0-http--link&quot; # ), # list( # linkage = &quot;https://data.worldpop.org/GIS/Population/Global_2000_2020_Constrained/2020/maxar_v1/ETH/eth_ppp_2020_constrained.tif&quot;, # name = &quot;eth_ppp_2020_constrained.tif&quot;, # description = &quot;Data download (GeoTIFF)&quot;, # protocol = &quot;WWW:LINK-1.0-http--link&quot; # ) # ) # ) # ) ), dataQualityInfo = list( list( scope = &quot;dataset&quot;, lineage = list( statement = &quot;Data management workflow&quot;, processStep = list( list( description = &quot;This dataset was produced based on the 2020 population census/projection-based estimates for 2020 (information and sources of the input population data can be found here). Building footprints were provided by the Digitize Africa project of Ecopia.AI and Maxar Technologies (2020) and gridded building patterns derived from the datasets produced by Dooley et al. 2020. Geospatial covariates representing factors related to population distribution, were obtained from the \\&quot;Global High Resolution Population Denominators Project\\&quot; (OPP1134076)&quot;, rationale = &quot;Source data acquisition&quot; ), list( description = &quot;The mapping approach is the Random Forests-based dasymetric redistribution developed by Stevens et al. (2015). The disaggregation was done by Maksym Bondarenko (WorldPop) and David Kerr (WorldPop), using the Random Forests population modelling R scripts (Bondarenko et al., 2020), with oversight from Alessandro Sorichetta (WorldPop).&quot;, rationale = &quot;Mapping&quot; ) ) ) ) ), metadataMaintenance = list(maintenanceAndUpdateFrequency = &quot;notPlanned&quot;) ) ) # Publish the metadata in a NADA catalog geospatial_add( idno = id, metadata = my_geo_data, repositoryid = &quot;central&quot;, published = 1, thumbnail = thumb, overwrite = &quot;yes&quot; ) # Add a link to WorldPop website as an external resource external_resources_add( idno = id, dctype = &quot;web&quot;, title = &quot;WorldPop website&quot;, file_path = &quot;https://www.worldpop.org/&quot;, overwrite = &quot;yes&quot; ) Generating the metadata using Python The result in NADA 6.10.5 Example 5 (service): The United Nations Geospatial website The previous four examples documented geographic datasets (ISO 19115). In this fourth example, we document a geographic service using elements from the ISO 19119 standard. The service described in this example is the United Nations Clear Map application from United Nations Geospatial. Generating the metadata using R library(nadar) # ---------------------------------------------------------------------------------- # Enter credentials (API confidential key) and catalog URL my_keys &lt;- read.csv(&quot;C:/confidential/my_API_keys.csv&quot;, header=F, stringsAsFactors=F) set_api_key(&quot;my_keys[1,1&quot;) set_api_url(&quot;https://.../index.php/api/&quot;) set_api_verbose(FALSE) # ---------------------------------------------------------------------------------- setwd(&quot;C:/my_geo_data/&quot;) thumb = &quot;un_clear_map.JPG&quot; id = &quot;UN_GEO_CLEAR-MAP&quot; my_geo_service &lt;- list( metadata_information = list( idno = id, title = &quot;United Nations Geospatial, Clear Map&quot;, producers = list( list(name = &quot;NADA team&quot;) ), production_date = &quot;2022-02-18&quot;, version = &quot;v1.0 2022-02&quot; ), description = list( idno = id, language = &quot;eng&quot;, characterSet = list(codeListValue = &quot;utf8&quot;), hierarchyLevel = list(&quot;service&quot;), contact = list( list( organisationName = &quot;United Nations Geospatial&quot;, contactInfo = list( address = list( electronicEmailAddress = &quot;gis@un.org&quot; ), onlineResource = list( linkage = &quot;https://www.un.org/geospatial&quot;, name = &quot;Website&quot; ) ), role = &quot;owner&quot; ) ), dateStamp = &quot;2022-02-22&quot;, metadataStandardName = &quot;ISO 19119:2005/19139&quot;, referenceSystemInfo = list( list(code = &quot;3857&quot;, codeSpace = &quot;EPSG&quot;) ), identificationInfo = list( list( citation = list( title = &quot;United Nations Clear Map - OGC Web Map Service&quot;, date = list( list(date = &quot;2019-08-19&quot;, type = &quot;creation&quot;), list(date = &quot;2020-03-19&quot;, type =&quot;lastUpdate&quot;) ), citedResponsibleParty = list( list( organisationName = &quot;United Nations Geospatial&quot;, contactInfo = list( address = list(electronicEmailAddress = &quot;gis@un.org&quot;), onlineResource = list( linkage = &quot;https://www.un.org/geospatial&quot;, name = &quot;Website&quot; ) ), role = &quot;owner&quot; ) ) ), abstract = &quot;The United Nations Clear Map (hereinafter &#39;Clear Map&#39;) is a background reference web mapping service produced to facilitate &#39;the issuance of any map at any duty station, including dissemination via public electronic networks such as Internet&#39; and &#39;to ensure that maps meet publication standards and that they are not in contravention of existing United Nations policies&#39; in accordance with the in the Administrative Instruction on &#39;Regulations for the Control and Limitation of Documentation - Guidelines for the Publication of Maps&#39; of 20 January 1997 (http://undocs.org/ST/AI/189/Add.25/Rev.1).&quot;, purpose = &quot;Clear Map is created for the use of the United Nations Secretariat and community. All departments, offices and regional commissions of the United Nations Secretariat including offices away from Headquarters using Clear Map remain bound to the instructions as contained in the Administrative Instruction and should therefore seek clearance from the UN Geospatial Information Section (formerly Cartographic Section) prior to the issuance of their thematic maps using Clear Map as background reference.&quot;, credit = &quot;Produced by: United Nations Geospatial Contributor: UNGIS, UNGSC, Field Missions CONTACT US: Feedback is appreciated and should be sent directly to: Email:Clearmap@un.org / gis@un.org (UNCLASSIFIED) (c) UNITED NATIONS 2018&quot;, status = &quot;onGoing&quot;, pointOfContact = list( list( organisationName = &quot;United Nations Geospatial&quot;, contactInfo = list( address = list(electronicEmailAddress = &quot;gis@un.org&quot;), onlineResource = list(linkage = &quot;https://www.un.org/geospatial&quot;, name = &quot;Website&quot;) ), role = &quot;pointOfContact&quot; ) ), resourceMaintenance = list( list(maintenanceOrUpdateFrequency = &quot;asNeeded&quot;) ), graphicOverview = list( list( fileName = &quot;https://geoportal.dfs.un.org/arcgis/sharing/rest/content/items/6f4eb9e136ee43758a62f587ceb0da01/info/thumbnail/thumbnail1567157577600.png&quot;, fileDescription = &quot;Service overview&quot;, fileType = &quot;image/png&quot; ) ), resourceFormat = list( list(name = &quot;PNG32&quot;), list(name = &quot;PNG24&quot;), list(name = &quot;PNG&quot;), list(name = &quot;JPG&quot;), list(name = &quot;DIB&quot;), list(name = &quot;TIFF&quot;), list(name = &quot;EMF&quot;), list(name = &quot;PS&quot;), list(name = &quot;PDF&quot;), list(name = &quot;GIF&quot;), list(name = &quot;SVG&quot;), list(name = &quot;SVGZ&quot;), list(name = &quot;BMP&quot;) ), descriptiveKeywords = list( list(type = &quot;theme&quot;, keyword = &quot;wms&quot;), list(type = &quot;theme&quot;, keyword = &quot;united nations&quot;), list(type = &quot;theme&quot;, keyword = &quot;global boundaries&quot;), list(type = &quot;theme&quot;, keyword = &quot;ocean coastline&quot;), list(type = &quot;theme&quot;, keyword = &quot;authoritative&quot;) ), resourceConstraints = list( list( legalConstraints = list( uselimitation = list(&quot;The designations employed and the presentation of material on this map do not imply the expression of any opinion whatsoever on the part of the Secretariat of the United Nations concerning the legal status of any country, territory, city or area or of its authorities, or concerning the delimitation of its frontiers or boundaries. Final boundary between the Republic of Sudan and the Republic of South Sudan has not yet been determined. Final status of the Abyei area is not yet determined. * Dotted line represents approximately the Line of Control in Jammu and Kashmir agreed upon by India and Pakistan. The final status of Jammu and Kashmir has not yet been agreed upon by the parties. ** Chagos Archipelago appears without prejudice to the question of sovereignty. *** A dispute exists between the Governments of Argentina and the United Kingdom of Great Britain and Northern Ireland concerning sovereignty over the Falkland Islands (Malvinas).&quot;), accessConstraints = list(&quot;unrestricted&quot;), useConstraints = list(&quot;licenceUnrestricted&quot;) ) ) ), extent = list( geographicElement = list( list( geographicBoundingBox = list( southBoundLongitude = -1.4000299034940418, westBoundLongitude = -1.40477223188626, northBoundLongitude = 2.149247026187029, eastBoundLongitude = 1.367128649366541 ) ) ) ), topicCategory = list(&quot;boundaries&quot;, &quot;oceans&quot;), serviceIdentification = list( serviceType = &quot;OGC:WMS&quot;, serviceTypeVersion = &quot;1.1.0&quot; ) ) ), distributionInfo = list( distributionFormat = list( list(name = &quot;PNG32&quot;), list(name = &quot;PNG24&quot;), list(name = &quot;PNG&quot;), list(name = &quot;JPG&quot;), list(name = &quot;DIB&quot;), list(name = &quot;TIFF&quot;), list(name = &quot;EMF&quot;), list(name = &quot;PS&quot;), list(name = &quot;PDF&quot;), list(name = &quot;GIF&quot;), list(name = &quot;SVG&quot;), list(name = &quot;SVGZ&quot;), list(name = &quot;BMP&quot;) ), distributor = list( list( organisationName = &quot;United Nations Geospatial&quot;, contactInfo = list( address = list(electronicEmailAddress = &quot;gis@un.org&quot;), onlineResource = list( linkage = &quot;https://www.un.org/geospatial&quot;, name = &quot;Website&quot; ) ), role = &quot;owner&quot; ) ) #, # transferOptions = list( # list( # onLine = list( # list( # linkage = &quot;https://geoportal.dfs.un.org/arcgis/home/item.html?id=541557fd0d4d42efb24449be614e6887&quot;, # name = &quot;Original metadata&quot;, # description = &quot;Original metadata from UN ClearMap portal&quot;, # protocol = &quot;WWW:LINK-1.0-http--link&quot; # ), # list( # linkage = &quot;https://geoportal.dfs.un.org/arcgis/sharing/rest/content/items/541557fd0d4d42efb24449be614e6887/data&quot;, # name = &quot;UN ClearMap WMS map service user guide&quot;, # description = &quot;How to import and use WMS services of the UN Clear map&quot;, # protocol = &quot;WWW:LINK-1.0-http--link&quot; # ), # list( # linkage = &quot;https://geoservices.un.org/arcgis/rest/services/ClearMap_Dark/MapServer?service=WMS&quot;, # name = &quot;ClearMap_Dark&quot;, # description = &quot;ClearMap Dark WMS&quot;, # protocol = &quot;OGC:WMS-1.1.0-http-get-map&quot; # ), # list( # linkage = &quot;https://geoservices.un.org/arcgis/rest/services/ClearMap_Gray/MapServer?service=WMS&quot;, # name = &quot;ClearMap_Gray&quot;, # description = &quot;ClearMap Gray WMS&quot;, # protocol = &quot;OGC:WMS-1.1.0-http-get-map&quot; # ), # list( # linkage = &quot;https://geoservices.un.org/arcgis/rest/services/ClearMap_Imagery/MapServer?service=WMS&quot;, # name = &quot;ClearMap_Imagery&quot;, # description = &quot;ClearMap Imagery WMS&quot;, # protocol = &quot;OGC:WMS-1.1.0-http-get-map&quot; # ), # list( # linkage = &quot;https://geoservices.un.org/arcgis/rest/services/ClearMap_Plain/MapServer?service=WMS&quot;, # name = &quot;ClearMap_Plain&quot;, # description = &quot;ClearMap Plain WMS&quot;, # protocol = &quot;OGC:WMS-1.1.0-http-get-map&quot; # ), # list( # linkage = &quot;https://geoservices.un.org/arcgis/rest/services/ClearMap_Topo/MapServer?service=WMS&quot;, # name = &quot;ClearMap_Topo&quot;, # description = &quot;ClearMap Topo WMS&quot;, # protocol = &quot;OGC:WMS-1.1.0-http-get-map&quot; # ), # list( # linkage = &quot;https://geoservices.un.org/arcgis/rest/services/ClearMap_WebDark/MapServer?service=WMS&quot;, # name = &quot;ClearMap_WebDark&quot;, # description = &quot;ClearMap WebDark WMS&quot;, # protocol = &quot;OGC:WMS-1.1.0-http-get-map&quot; # ), # list( # linkage = &quot;https://geoservices.un.org/arcgis/rest/services/ClearMap_WebGray/MapServer?service=WMS&quot;, # name = &quot;ClearMap_WebGray&quot;, # description = &quot;ClearMap WebGray WMS&quot;, # protocol = &quot;OGC:WMS-1.1.0-http-get-map&quot; # ), # list( # linkage = &quot;https://geoservices.un.org/arcgis/rest/services/ClearMap_WebPlain/MapServer?service=WMS&quot;, # name = &quot;ClearMap_WebPlain&quot;, # description = &quot;ClearMap WebPlain WMS&quot;, # protocol = &quot;OGC:WMS-1.1.0-http-get-map&quot; # ), # list( # linkage = &quot;https://geoservices.un.org/arcgis/rest/services/ClearMap_WebTopo/MapServer?service=WMS&quot;, # name = &quot;ClearMap_WebTopo&quot;, # description = &quot;ClearMap WebTopo WMS&quot;, # protocol = &quot;OGC:WMS-1.1.0-http-get-map&quot; # ) # ) # ) # ) ), metadataMaintenance = list(maintenanceAndUpdateFrequency = &quot;asNeeded&quot;) ) ) # Publish in a NADA catalog geospatial_add( idno = id, metadata = my_geo_service, repositoryid = &quot;central&quot;, published = 1, thumbnail = thumb, overwrite = &quot;yes&quot; ) # Add links as external resources external_resources_add( title = &quot;United Nations Clear Map application&quot;, idno = id, dctype = &quot;web&quot;, file_path = &quot;https://www.un.org/geospatial/&quot;, overwrite = &quot;yes&quot; ) external_resources_add( title = &quot;United Nations Geospatial website&quot;, idno = id, dctype = &quot;web&quot;, file_path = &quot;https://geoservices.un.org/Html5Viewer/index.html?viewer=clearmap&quot;, overwrite = &quot;yes&quot; ) Generating the metadata using Python [to do] The result in NADA 6.11 Useful tools The ISO standard is complex and contains many nested elements. Using R or Python to generate the metadata is a convenient and powerful option, although it requires much attention to avoid errors. The geometa R package can be used to facilitate the process of documenting datasets using R. Using a specialized metadata editor to generate the ISO-compliant metadata is a good alternative for those who have limited expertise in R or Python. The GeoNetwork editor provides such a solution. In our JSON schema, the structural metadata and the dataset metadata are stored in one same container.↩︎ "],["chapter07.html", "Chapter 7 Databases of indicators 7.1 Database vs indicators 7.2 Schema description", " Chapter 7 Databases of indicators 7.1 Database vs indicators The schema we describe in this chapter is intended to document databases of indicators or time series, not the indicators or time series themselves (a schema for the description of indicators and time series is presented in chapter 8). Indicators are summary measures related to key issues or phenomena, derived from observed facts. Indicators form time series when they are provided with a temporal ordering, i.e. when their values are provided with an ordered annual, quarterly, monthly, daily, or other time reference. Indicators and time series are often contained in multi-indicators databases, like the World Bank’s World Development Indicators - WDI, whose on-line version contains series for 1,430 indicators (as of 2021). The metadata related to a database can be published in a catalog as specific entries, or as information attached to an indicator. [provide example / screenshot in NADA] 7.2 Schema description The database schema is used to document the database that contains the time series, not to document the indicators or /series. { &quot;published&quot;: 0, &quot;overwrite&quot;: &quot;no&quot;, &quot;metadata_information&quot;: {}, &quot;database_description&quot;: {}, &quot;provenance&quot;: [], &quot;tags&quot;, &quot;lda_topics&quot;: {}, &quot;embeddings&quot;: {}, &quot;additional&quot;: {} } The schema includes two elements that are not metadata, but parameters used when publishing the metadata in a NADA catalog: published: Indicates whether the metadata must be made visible to visitors of the catalog. By default, the value is 0 (unpublished), in which case it is only visible to catalog administrators. This value must be set to 1 (published) to make the metadata visible. Note that the database metadata will only be shown in NADA in association with the metadata of an indicator. overwrite: Indicates whether metadata that may have been previously uploaded for the same database can be overwritten. By default, the value is “no”. It must be set to “yes” to overwrite existing information. A database will be considered as being the same as a previously uploaded one if they have the same identifier (provided in the metadata element database_description &gt; title_statement &gt; idno). 7.2.0.1 Metadata information metadata_information [Optional, Not Repeatable] The set of elements in metadata_information is used to provide information on the production of the database metadata. This information is used mostly for administrative purposes by data curators and catalog administrators. &quot;metadata_information&quot;: { &quot;title&quot;: &quot;string&quot;, &quot;idno&quot;: &quot;string&quot;, &quot;producers&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;abbr&quot;: &quot;string&quot;, &quot;affiliation&quot;: &quot;string&quot;, &quot;role&quot;: &quot;string&quot; } ], &quot;prod_date&quot;: &quot;string&quot;, &quot;version&quot;: &quot;string&quot; } title [Optional ; Not repeatable ; String] The title of the metadata document containing the database metadata. idno [Required ; Not repeatable ; String] A unique identifier of the database metadata document. It can be for example the identifier of the database preceded by a prefix identifying the metadata producer. producers [Optional ; Repeatable] A list and description of the producers of the database metadata (not the producers of the database). name [Optional ; Not repeatable ; String] The name of the person or organization who produced the metadata (or contributed to its production). abbr [Optional ; Not repeatable ; String] The abbreviation (aconym) of the organization mentioned in name. affiliation [Optional ; Not repeatable ; String] The affiliation of the person or organization mentioned in name. role [Optional ; Not repeatable ; String] The specific role of the person or organization mentioned in name in the production of the metadata. prod_date [Optional ; Not repeatable ; String] The date when the metadata was produced, preferably entered in ISO 8601 format (YYYY-MM-DD). version [Optional ; Not repeatable ; String] The version of the metadata (not the version of the database). 7.2.0.2 Database description database_description [Required, Not Repeatable] &quot;database_description&quot;: { &quot;title_statement&quot;: {}, &quot;authoring_entity&quot;: [], &quot;abstract&quot;: &quot;string&quot;, &quot;url&quot;: &quot;string&quot;, &quot;type&quot;: &quot;string&quot;, &quot;date_created&quot;: &quot;string&quot;, &quot;date_published&quot;: &quot;string&quot;, &quot;version&quot;: [], &quot;update_frequency&quot;: &quot;string&quot;, &quot;update_schedule&quot;: [], &quot;time_coverage&quot;: [], &quot;time_coverage_note&quot;: &quot;string&quot;, &quot;periodicity&quot;: [], &quot;themes&quot;: [], &quot;topics&quot;: [], &quot;keywords&quot;: [], &quot;dimensions&quot;: [], &quot;ref_country&quot;: [], &quot;geographic_units&quot;: [], &quot;geographic_coverage_note&quot;: &quot;string&quot;, &quot;bbox&quot;: [], &quot;geographic_granularity&quot;: &quot;string&quot;, &quot;geographic_area_count&quot;: &quot;string&quot;, &quot;sponsors&quot;: [], &quot;acknowledgments&quot;: [], &quot;acknowledgment_statement&quot;: &quot;string&quot;, &quot;contacts&quot;: [], &quot;links&quot;: [], &quot;languages&quot;: [], &quot;access_options&quot;: [], &quot;errata&quot;: [], &quot;license&quot;: [], &quot;citation&quot;: &quot;string&quot;, &quot;notes&quot;: [], &quot;disclaimer&quot;: &quot;string&quot;, &quot;copyright&quot;: &quot;string&quot; } title_statement [Required, Not Repeatable] &quot;title_statement&quot;: { &quot;idno&quot;: &quot;string&quot;, &quot;identifiers&quot;: [ { &quot;type&quot;: &quot;string&quot;, &quot;identifier&quot;: &quot;string&quot; } ], &quot;title&quot;: &quot;string&quot;, &quot;sub_title&quot;: &quot;string&quot;, &quot;alternate_title&quot;: &quot;string&quot;, &quot;translated_title&quot;: &quot;string&quot; } idno [Required ; Not repeatable ; String] A unique identifier of the database. For example, the World Bank’s World Development Indicators database published in April 2020 could have idno = “WB_WDI_APR_2020”. identifiers [Optional ; Repeatable] This element is used to store database identifiers (IDs) other than the catalog ID entered in idno. It can for example be a Digital Object Identifier (DOI). The idno can be repeated here (idno does not provide a type parameter; if a DOI or other standard reference ID is used as idno, it is recommended to repeat it here with the identification of its type). type [Optional ; Not repeatable ; String] The type of unique ID, e.g. “DOI”. identifier [Required ; Not repeatable ; String] The identifier itself. title [Required ; Not repeatable ; String] The title is the name by which the database is formally known. It is good practice to include the year of production in the title (and possibly the month, or quarter, if a new version of the database is released more than once a year). For example, “World Development Indicators, April 2020”. sub_title [Optional ; Not repeatable ; String] The database subtitle can be used when there is a need to distinguish characteristics of a database. This element will rarely be used. alternate_title [Optional ; Not repeatable ; String] This can be an acronym, or an alternative name of the database. For example, “WDI April 2020”. translated_title [Optional ; Not repeatable ; String] The title of the database in a secondary language (if more than one other language, they may be entered as one string, as this element is not repeatable). authoring_entity [Optional ; Repeatable] This set of five elements is used to identify the organization(s) or person(s) who are the main producers/curators of the database. Note that a similar element is available at the indicator/series level. &quot;authoring_entity&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;affiliation&quot;: &quot;string&quot;, &quot;abbreviation&quot;: &quot;string&quot;, &quot;email&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ] name [Optional ; Not repeatable ; String] The name of the person or organization who maintains the contents of the database (back-end). Write the name in full (use the element abbreviation to capture the acronym of the organization, if relevant). affiliation [Optional ; Not repeatable ; String] The affiliation of the person or organization mentioned in name. abbreviation [Optional ; Not repeatable ; String] The abbreviated name (acronym) of the organization mentioned in name. email [Optional ; Not repeatable ; String] The public email contact of the person or organizations mentioned in name. It is good practice to provide a service account email address, not a personal one. uri [Optional ; Not repeatable ; String] A link (URL) to the website of the entity mentioned in name. abstract [Optional ; Not repeatable ; String] The abstract is a brief description of the database. It can for example include a short statement on the database scope and coverage (not in detail, as other fields are available for that purpose), objectives, history, and expected audience. url [Optional ; Not repeatable ; String] The link to the public interface of the database (home page). type [Optional ; Not repeatable ; String] The type of database. date_created [Optional ; Not repeatable ; String] This is the date the database was created. The date should be entered in ISO 8601 format (YYY-MM-DD, or YYYY-MM, or YYYY). date_published This is the date the database was made public. The date should be entered in ISO 8601 format (YYY-MM-DD, or YYYY-MM, or YYYY). version [Optional ; Repeatable] A database rarely remains static; it will be regularly updated and upgraded. The version element is a compound element and contains important information regarding the updating of the database. This includes any extension of the database (adding new series data), appending existing data, correcting existing data, etc. &quot;version&quot;: [ { &quot;version&quot;: &quot;string&quot;, &quot;date&quot;: &quot;string&quot;, &quot;responsibility&quot;: &quot;string&quot;, &quot;notes&quot;: &quot;string&quot; } ] version [Optional ; Not repeatable ; String] A label for the version. The version specification will be determined by a curator or a data manager under conventions determined by the authoring entity. date [Optional ; Not repeatable ; String] The date the version was released. The date should be entered in ISO 8601 format (YYY-MM-DD, or YYYY-MM, or YYYY). responsibility [Optional ; Not repeatable ; String] The organization or person in charge of this version of the database. notes [Optional ; Not repeatable ; String] Additional information on this version of the database. Notes can for example be used to document how this version differs from previous ones. update_frequency [Optional ; Not repeatable ; String] Indicates at which frequency the database is updated (for example, “annual” or “quarterly”). The use of a controlled vocabulary is recommended. If a database contains many indicators, the update frequency may vary by indicator (e.g., some may be updated on a monthly or quarterly basis while others are only updated annually). The information provided in the update_frequency will correspond to the frequency of update for the indicators that are most frequently updated. update_schedule [Optional ; Repeatable] The update schedule is intended to provide users with information on scheduled updates. This is a repeatable field that allows for capturing specific dates, but this information would then have to be regularly updated. Often a single description will be used, which would avoid having to regularly update the metadata. For example, “The database is updated in January, April, July, October of each year.” &quot;update_schedule&quot;: [ { &quot;update&quot;: &quot;string&quot; } ] update [Optional ; Not repeatable ; String] A description of the schedule of updates or a date entered in ISO 8601 format. time_coverage [Optional ; Repeatable] The time coverage is the time span of all the data contained in the database across all series. &quot;time_coverage&quot;: [ { &quot;start&quot;: &quot;string&quot;, &quot;end&quot;: &quot;string&quot; } ] - start [Optional ; Not repeatable ; String] Indicates the start date of the period covered by the data (across all series) in the database. The date should be provided in ISO 8601 format (YYY-MM-DD, or YYYY-MM, or YYYY). - end [Optional ; Not repeatable ; String] Indicates the end date of the period covered by the data (across all series) in the database. The date should be provided in ISO 8601 format (YYY-MM-DD, or YYYY-MM, or YYYY). time_coverage_note [Optional ; Not repeatable ; String] The element is used to annotate and/or describe auxiliary information related to the time coverage described in time_coverage. periodicity [Optional ; Repeatable] The periodicity of the data describes the periodicity of the indicators contained in the database. A database can contain series covering different periods, in which case the information will be repeated for each type of periodicity. A controlled vocabulary should be used. &quot;periodicity&quot;: [ { &quot;period&quot;: &quot;string&quot; } ] period [Optional ; Not repeatable ; String] Periodicity of the time series included in the database, for example, “annual”, “quarterly”, or “monthly”. themes [Optional ; Repeatable] Themes provide a general idea of the research that might guide the creation and/or demand for the series. A theme is broad and is likely also subject to a community based definition or list. A controlled vocabulary should be used. This element will rarely be used (the element topics described below will be used more often). &quot;themes&quot;: [ { &quot;id&quot;: &quot;string&quot;, &quot;name&quot;: &quot;string&quot;, &quot;parent_id&quot;: &quot;string&quot;, &quot;vocabulary&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ] id [Optional ; Not repeatable ; String] The unique identifier of the theme. It can be a sequential number, or the identifier of the theme in a controlled vocabulary. name [Required ; Not repeatable ; String] The label of the theme associated with the data. parent_id [Optional ; Not repeatable ; String] When a hierarchical (nested) controlled vocabulary is used, the parent_id field can be used to indicate a higher-level theme to which this theme belongs. vocabulary [Optional ; Not repeatable ; String] The name of the controlled vocabulary used, if any. uri [Optional ; Not repeatable ; String] A link to the controlled vocabulary mentioned in field ‘vocabulary’. topics [Optional ; Repeatable] The topics field indicates the broad substantive topic(s) that the indicator/series covers. A topic classification facilitates referencing and searches in electronic survey catalogs. Topics should be selected from a standard controlled vocabulary such as the Council of European Social Science Data Archives (CESSDA) topic classification. &quot;topics&quot;: [ { &quot;id&quot;: &quot;string&quot;, &quot;name&quot;: &quot;string&quot;, &quot;parent_id&quot;: &quot;string&quot;, &quot;vocabulary&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ] id [Optional ; Not repeatable ; String] The unique identifier of the topic. It can be a sequential number, or the identifier of the topic in a controlled vocabulary. name [Required ; Not repeatable ; String] The label of the topic associated with the data. parent_id [Optional ; Not repeatable ; String] When a hierarchical (nested) controlled vocabulary is used, the parent_id field can be used to indicate a higher-level topic to which this topic belongs. vocabulary [Optional ; Not repeatable ; String] The name of the controlled vocabulary used, if any. uri A link to the controlled vocabulary mentioned in field `vocabulary’. keywords [Optional ; Repeatable] Words or phrases that describe salient aspects of a data collection’s content. This can be used for building keyword indexes and for classification and retrieval purposes. Keywords can be selected from a standard thesaurus, preferably an international, multilingual thesaurus. The list of keywords can include keywords extracted from one or more controlled vocabularies and user-defined keywords. &quot;keywords&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;vocabulary&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ] name [Required ; String ; Non repeatable] A keyword (or phrase). vocabulary [Optional ; Not repeatable ; String] The name of the controlled vocabulary from which the keyword was extracted, if any. uri [Optional ; Not repeatable ; String] The URI of the controlled vocabulary used, if any. dimensions [Optional ; Repeatable] The dimensions available for the series included in the database. For example, “country, year”. &quot;dimensions&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;label&quot;: &quot;string&quot; } ] name [Required ; String ; Non repeatable] The name of the dimension. label [Optional ; Not repeatable ; String] A label for the dimension. ref_country [Optional ; Repeatable] A list of countries for which data are available in the database. This element is somewhat redundant with the next element (geographic_units) which may also contain a list of countries. Identifying geographic areas of type “country” is important to enable filters and facets in data catalogs (country names are among the most frequent queries submitted to catalogs). &quot;ref_country&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;code&quot;: &quot;string&quot; } ] name [Required ; Not repeatable ; String] The name of the country. code [Optional ; Not repeatable ; String] The code of the country. The use of the ISO 3166-1 alpha-3 codes is recommended. geographic_units [Optional ; Repeatable] A list of geographic units (regions, countries, states, provinces, etc.) for which data are available in the database. This list is not limited to countries; it can contain sub-national areas, supra-national regions, or non-administrative area names. The type element is used to indicate the type of geographic area. Countries may, but do not have to be repeated here if provided in the eleement ref_country. &quot;geographic_units&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;code&quot;: &quot;string&quot;, &quot;type&quot;: &quot;string&quot; } ] name [Required ; Not repeatable ; String] The name of the geographic unit e.g. ‘World’, ‘Sub-Saharan Africa’, ‘Afghanistan’, ‘Low-income countries’. code [Optional ; Not repeatable ; String] The code of the geographic unit as found in the database. If no code is available in the database, a code still can be added to the metadata. In such case, using the ISO 3166-1 alpha-3 codes is recommended for countries. type [Optional ; Not repeatable ; String] Type of geographic unit e.g. country, state, region, province, or other grouping. geographic_coverage_note [Optional ; Not repeatable ; String] The note can be used to capture additional information on the geographic coverage of the database. bbox [Optional ; Repeatable] Bounding boxes are typically used for geographic datasets to indicate the geographic coverage of the data, but can be provided for databases as well, although this will rarely be done. A geographic bounding box defines a rectangular geographic area. &quot;bbox&quot;: [ { &quot;west&quot;: &quot;string&quot;, &quot;east&quot;: &quot;string&quot;, &quot;south&quot;: &quot;string&quot;, &quot;north&quot;: &quot;string&quot; } ] west [Required ; Not repeatable ; String] Western geographic parameter of the bounding box. east [Required ; Not repeatable ; String] Eastern geographic parameter of the bounding box. south [Required ; Not repeatable ; String] Southern geographic parameter of the bounding box. north [Required ; Not repeatable ; String] Northern geographic parameter of the bounding box. geographic_granularity [Optional ; Not repeatable ; String] Whereas the geographic_units element lists the various geographic levels for which there is data in the database, the geographic_granularity element will provide information on the geographic levels for which information is available in the database. For example: “The database contains data at the national, provincial (admin 1) and district (admin 2) levels.” geographic_area_count [Optional ; Not repeatable ; String] The number of geographic areas for which data are provided in the database. The World Bank World Development Indicators for example provides data for 262 different areas (which includes countries and territories, geographic regions, and other country groupings). sponsors [Optional ; Repeatable] The source(s) of funds for the production and maintenance of the database. If different funding agencies sponsored different stages of the database development, use the role attribute to distinguish their respective contributions. &quot;sponsors&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;abbreviation&quot;: &quot;string&quot;, &quot;role&quot;: &quot;string&quot;, &quot;grant&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ] name [Required ; Not repeatable ; String] Name of the funding agency/sponsor abbreviation [Optional ; Not repeatable ; String] Abbreviation of the funding/sponsoring agency mentioned in name. role [Optional ; Not repeatable ; String] Role of the funding/sponsoring agency mentioned in name. grant [Optional ; Not repeatable ; String] Grant or award number. If an agency provided more than one grant, list all grants separated with a “;”. uri [Optional ; Not repeatable ; String] URI of the sponsor agency mentioned in name. acknowledgments [Optional ; Repeatable] An itemized list of person(s) and/or organization(s) other than sponsors and contributors already mentioned in metadata elements contributors and sponsors whose contribution to the database must be acknowledged. &quot;acknowledgments&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;affiliation&quot;: &quot;string&quot;, &quot;role&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ] name [Optional ; Not repeatable ; String] The name of the person or agency being recognized for supporting the database. affiliation [Optional ; Not repeatable ; String] Affiliation of the person or agency recognized or acknowledged for supporting the database. role [Optional ; Not repeatable ; String] Role of the person or agency that is being recognized or acknowledged for supporting the database. uri [Optional ; Not repeatable ; String] Website URL or email of the person or organization being recognized or acknowledged for supporting the database. acknowledgment_statement [Optional ; Not repeatable ; String] An overall statement of acknowledgment, which can be used as an alternative (or supplement) to the itemized list provided in acknowledgments. contacts [Optional ; Repeatable] The contacts element provides the public interface for questions associated with the development and maintenance of the database. There could be various contacts provided depending upon the organization. &quot;contacts&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;role&quot;: &quot;string&quot;, &quot;affiliation&quot;: &quot;string&quot;, &quot;email&quot;: &quot;string&quot;, &quot;telephone&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ] name [Optional ; Not repeatable ; String] The name of the contact person that should be contacted. Instead of the name of an individual (which would be subject to change and require frequent update of the metadata), a title can be provided here (e.g. “data helpdesk”). role [Optional ; Not repeatable ; String] The specific role of the contact person mentioned in name. This will be used when multiple contacts are listed, and is intended to help users direct their questions and requests to the right contact person. affiliation [Optional ; Not repeatable ; String] The organization or affiliation of the contact person mentioned in name. email [Optional ; Not repeatable ; String] The email address of the person or organization mentioned in name. Avoid using personal email accounts; the use of an anonymous email is recommended (e.g, “helpdesk@….org”) telephone [Optional ; Not repeatable ; String] The phone number of the person or organization mentioned in name. uri [Optional ; Not repeatable ; String] The URI of the agency (typically, a URL to a “contact us” web page). links [Optional ; Repeatable] This field allows for the association of auxiliary links referring to the database. &quot;links&quot;: [ { &quot;uri&quot;: &quot;string&quot;, &quot;description&quot;: &quot;string&quot; } ] uri [Optional ; Not repeatable ; String] The URI for the associated link. description [Optional ; Not repeatable ; String] A brief description of the link, in relation to the database. languages [Optional ; Repeatable] This set of elements is provided to list the languages that are supported in the database. &quot;languages&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;code&quot;: &quot;string&quot; } ] name [Optional ; Not repeatable ; String] The official name of the language being supported; it is recommended to use a name from the ISO 639-1 language name list. code [Optional ; Not repeatable ; String] The code of the language mentioned in name, preferably the three letter ISO 639-1 code. access_options [Optional ; Repeatable] This repeatable set of elements describes the different modes and formats in which the database is made accessible. When more than one mode of access is provided, describe them separately. &quot;access_options&quot;: [ { &quot;type&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot;, &quot;note&quot;: &quot;string&quot; } ] type [Optional ; Not repeatable ; String] The access type, e.g. “Application Programming Interface (API)”, “Bulk download in CSV format”, “On-line query interface”, etc. uri [Optional ; Not repeatable ; String] The URI corresponding to the access mode mentioned in type. note [Optional ; Not repeatable ; String] This element allows for annotating any specific information associated with the access mode mentioned in type. errata [Optional ; Repeatable] A list of errata at the database level. Note that an errata element is also available in the schema used for the description of indicators/series. &quot;errata&quot;: [ { &quot;date&quot;: &quot;string&quot;, &quot;description&quot;: &quot;string&quot; } ] date [Optional ; Not repeatable ; String] The date the erratum was published, preferably entered in ISO format. description [Optional ; Not repeatable ; String] A description of the error and of the measures taken to remedy. license [Optional ; Repeatable] This set of elements is used to describe the access license(s) attached to the database. &quot;license&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot;, &quot;note&quot;: &quot;string&quot; } ] name [Optional ; Not repeatable ; String] The name of the license, for example “Creative Commons Attribution 4.0 International license (CC-BY 4.0)”. uri [Optional ; Not repeatable ; String] A URI to a description of the license, for example “https://creativecommons.org/licenses/by/4.0/”; note [Optional ; Not repeatable ; String] Any additional information to qualify the license requirements. citation [Optional ; Not repeatable ; String] The citation requirement for the database (i.e. how users should cite the database in publications and reports). notes [Optional ; Repeatable] This element is provided to add notes that are relevant for describing the database, that cannot be provided in other metadata elements. &quot;notes&quot;: [ { &quot;note&quot;: &quot;string&quot; } ] note [Optional ; Not repeatable ; String] A free-text note. disclaimer [Optional ; Not repeatable ; String] If the agency responsible for managing the database has determined that there may be some liability as a result of the data, the element may be used to provide a disclaimer statement. copyright [Optional ; Not repeatable ; String] The copyright attached to the database, if any. 7.2.1 Provenance provenance [Optional ; Repeatable] Metadata can be programmatically harvested from external catalogs. The provenance group of elements is used to store information on the provenance of harvested metadata, and on alterations that may have been made to the harvested metadata. &quot;provenance&quot;: [ { &quot;origin_description&quot;: { &quot;harvest_date&quot;: &quot;string&quot;, &quot;altered&quot;: true, &quot;base_url&quot;: &quot;string&quot;, &quot;identifier&quot;: &quot;string&quot;, &quot;date_stamp&quot;: &quot;string&quot;, &quot;metadata_namespace&quot;: &quot;string&quot; } } ] origin_description [Required ; Not repeatable] The origin_description elements are used to describe when and from where metadata have been extracted or harvested. harvest_date [Required ; Not repeatable ; String] The date and time the metadata were harvested, entered in ISO 8601 format. altered [Optional ; Not repeatable ; Boolean] A boolean variable (“true” or “false”; “true by default) indicating whether the harvested metadata have been modified before being re-published. In many cases, the unique identifier of the study (element idno in the Document Description / Title Statement section) will be modified when published in a new catalog. base_url [Required ; Not repeatable ; String] The URL from where the metadata were harvested. identifier [Optional ; Not repeatable ; String] The unique dataset identifier (idno element) in the source catalog. When harvested metadata are re-published in a new catalog, the identifier will likely be changed. The identifier element in provenance is used to maintain traceability. date_stamp [Optional ; Not repeatable ; String] The date stamp (in UTC date format) of the metadata record in the originating repository (this should correspond to the date the metadata were last updated in the source catalog). metadata_namespace [Optional ; Not repeatable ; String] @@@@@@@ 7.2.2 Tags tags [Optional ; Repeatable] As shown in section 1.7 of the Guide, tags, when associated with tag_groups, provide a powerful and flexible solution to enable custom facets (filters) in data catalogs. &quot;tags&quot;: [ { &quot;tag&quot;: &quot;string&quot;, &quot;tag_group&quot;: &quot;string&quot; } ] tag [Required ; Not repeatable ; String] A user-defined tag. tag_group [Optional ; Not repeatable ; String] A user-defined group (optional) to which the tag belongs. Grouping tags allows implementation of controlled facets in data catalogs. 7.2.3 LDA topics lda_topics [Optional ; Not repeatable] &quot;lda_topics&quot;: [ { &quot;model_info&quot;: [ { &quot;source&quot;: &quot;string&quot;, &quot;author&quot;: &quot;string&quot;, &quot;version&quot;: &quot;string&quot;, &quot;model_id&quot;: &quot;string&quot;, &quot;nb_topics&quot;: 0, &quot;description&quot;: &quot;string&quot;, &quot;corpus&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ], &quot;topic_description&quot;: [ { &quot;topic_id&quot;: null, &quot;topic_score&quot;: null, &quot;topic_label&quot;: &quot;string&quot;, &quot;topic_words&quot;: [ { &quot;word&quot;: &quot;string&quot;, &quot;word_weight&quot;: 0 } ] } ] } ] We mentioned in Chapter 1 the importance of producing rich metadata, and the opportunities that machine learning offers to enrich (or “augment”) metadata in a largely automated manner. One application of machine learning, more specifically of natural language processing, to enrich metadata related to publications is the topic extraction using Latent Dirichlet Allocation (LDA) models. LDA models must be trained on large corpora of documents. They do not require any pre-defined taxonomy of topics. The approach consists of “clustering” words that are likely to appear in similar contexts (the number of “clusters” or “topics” is a parameter provided when training a model). Clusters of related words form “topics”. A topic is thus defined by a list of keywords, each one of them provided with a score indicating its importance in the topic. Typically, the top 10 words that represent a topic will be used to describe it. The description of the topics covered by a document can be indexed to improve searchability (possibly in a selective manner, by setting thresholds on the topic shares and word weights). Once an LDA topic model has been trained, it can be used to infer the topic composition of any document. This inference will then provide the share that each topic represents in the document. The sum of all represented topics is 1 (100%). The metadata element lda_topics is provided to allow data curators to store information on the inferred topic composition of the documents listed in a catalog. Sub-elements are provided to describe the topic model, and the topic composition. Important note: the topic composition of a document is specific to a topic model. To ensure consistency of the information captured in the lda_topics elements, it is important to make use of the same model(s) for generating the topic composition of all documents in a catalog. If a new, better LDA model is trained, the topic composition of all documents in the catalog should be updated. The image below provides an example of topics extracted from a document from the United Nations High Commission for Refugees, using a LDA topic model trained by the World Bank (this model was trained to identify 75 topics; no document will cover all topics). The lda_topics element includes the following metadata fields: model_info [Optional ; Not repeatable] Information on the LDA model. source [Optional ; Not repeatable ; String] The source of the model (typically, an organization). author [Optional ; Not repeatable ; String] The author(s) of the model. version [Optional ; Not repeatable ; String] The version of the model, which could be defined by a date or a number. model_id [Optional ; Not repeatable ; String] The unique ID given to the model. nb_topics [Optional ; Not repeatable ; Numeric] The number of topics in the model (the number of topics to be extracted from a corpus is the key parameter of any LDA model). description [Optional ; Not repeatable ; String] A brief description of the model. corpus [Optional ; Not repeatable ; String] A brief description of the corpus on which the LDA model was trained. uri [Optional ; Not repeatable ; String] A link to a web page where additional information on the model is available. topic_description [Optional ; Repeatable] The topic composition of the document. topic_id [Optional ; Not repeatable ; String] The identifier of the topic; this will often be a sequential number (Topic 1, Topic 2, etc.). topic_score [Optional ; Not repeatable ; Numeric] The share of the topic in the document (%). topic_label [Optional ; Not repeatable ; String] The label of the topic, if any (not automatically generated by the LDA model). topic_words [Optional ; Not repeatable] The list of N keywords describing the topic (e.g., the top 5 words). word [Optional ; Not repeatable ; String] The word. word_weight [Optional ; Not repeatable ; Numeric] The weight of the word in the definition of the topic. This is specific to the model, not to a document. lda_topics = list( list( model_info = list( list(source = &quot;World Bank, Development Data Group&quot;, author = &quot;A.S.&quot;, version = &quot;2021-06-22&quot;, model_id = &quot;Mallet_WB_75&quot;, nb_topics = 75, description = &quot;LDA model, 75 topics, trained on Mallet&quot;, corpus = &quot;World Bank Documents and Reports (1950-2021)&quot;, uri = &quot;&quot;)) ), topic_description = list( list(topic_id = &quot;topic_27&quot;, topic_score = 32, topic_label = &quot;Education&quot;, topic_words = list(list(word = &quot;school&quot;, word_weight = &quot;&quot;) list(word = &quot;teacher&quot;, word_weight = &quot;&quot;), list(word = &quot;student&quot;, word_weight = &quot;&quot;), list(word = &quot;education&quot;, word_weight = &quot;&quot;), list(word = &quot;grade&quot;, word_weight = &quot;&quot;)), list(topic_id = &quot;topic_8&quot;, topic_score = 24, topic_label = &quot;Gender&quot;, topic_words = list(list(word = &quot;women&quot;, word_weight = &quot;&quot;) list(word = &quot;gender&quot;, word_weight = &quot;&quot;), list(word = &quot;man&quot;, word_weight = &quot;&quot;), list(word = &quot;female&quot;, word_weight = &quot;&quot;), list(word = &quot;male&quot;, word_weight = &quot;&quot;)), list(topic_id = &quot;topic_39&quot;, topic_score = 22, topic_label = &quot;Forced displacement&quot;, topic_words = list(list(word = &quot;refugee&quot;, word_weight = &quot;&quot;) list(word = &quot;programme&quot;, word_weight = &quot;&quot;), list(word = &quot;country&quot;, word_weight = &quot;&quot;), list(word = &quot;migration&quot;, word_weight = &quot;&quot;), list(word = &quot;migrant&quot;, word_weight = &quot;&quot;)), list(topic_id = &quot;topic_40&quot;, topic_score = 11, topic_label = &quot;Development policies&quot;, topic_words = list(list(word = &quot;development&quot;, word_weight = &quot;&quot;) list(word = &quot;policy&quot;, word_weight = &quot;&quot;), list(word = &quot;national&quot;, word_weight = &quot;&quot;), list(word = &quot;strategy&quot;, word_weight = &quot;&quot;), list(word = &quot;activity&quot;, word_weight = &quot;&quot;)) ) ) ) The information provided by LDA models can be used to build a “filter by topic composition” tool in a catalog, to help identify documents based on a combination of topics, allowing users to set minimum thresholds on the share of each selected topic. 7.2.4 Embeddings embeddings [Optional ; Repeatable] In Chapter 1 (section 1.n), we briefly introduced the concept of word embeddings and their use in implementation of semantic search tools. Word embedding models convert text (words, phrases, documents) into large-dimension numeric vectors (e.g., a vector of 100 or 200 numbers) that are representative of the semantic content of the text. The vectors are generated by submitting a text to a pre-trained word embedding model (possibly via an API). These vector representations can be used to identify semantically-closed documents, by calculating the distance between vectors and identifying the closest ones, as shown in the example below. The word vectors do not have to be stored in the document metadata to be exploited by search engines. When a semantic search tool is implemented in a catalog, the vectors will be stored in a database end processed by a tool like Milvus. A metadata element is however provided to store the vectors for preservation and sharing purposes. This block of metadata elements is repeatable, allowing multiple vectors to be stored. When using vectors in a search engine, it is critical to only use vectors generated by one same model. The embeddings element contains four metadata fields: id [Optional ; Not repeatable ; String] A unique identifier of the word embedding model used to generate the vector. description [Optional ; Not repeatable ; String] A brief description of the model. This may include the identification of the producer, a description of the corpus on which the model was trained, the identification of the software and algorithm used to train the model, the size of the vector, etc. date [Optional ; Not repeatable ; String] The date the model was trained (or a version date for the model). vector [Required ; Not repeatable ; Object] @@@@@@@@ do not offer options The numeric vector representing the document, provided as an object (array or string). [1,4,3,5,7,9] 7.2.5 Additional additional [Optional ; Not repeatable] The additional element allows data curators to add their own metadata elements to the schema. All custom elements must be added within the additional block; embedding them elsewhere in the schema would cause schema validation to fail. 7.2.5.1 Complete example We use the World Bank’s World Development Indicators 2021 (WDI) database as an example. In this example, we assume that all information is entered manually in the script. In a real application, it is likely that some elements like the list and number of geographic areas covered in the database, or the start and end year of the period covered by the data, will be extracted programmatically by reading the data file (the WDI data and related metadata can be downloaded as CSV or MS-Excel files), or by extracting information from the database API (WDI metadata is available via API). ** Using R # The code below creates an object `wdi_database` ready to be published in a NADA catalog (using the NADAR package). wdi_database &lt;- list( database_description = list( title_statement = list( idno = &quot;WB_WDI_2021_09_15&quot;, title = &quot;World Development Indicators 2021&quot;, alternate_title = &quot;WDI 2021&quot; ), authoring_entity = list(name = &quot;Development Data Group&quot;, affiliation = &quot;The World Bank Group&quot;), abstract = &quot;The World Development Indicators is a compilation of relevant, high-quality, and internationally comparable statistics about global development and the fight against poverty. The database contains 1,400 time series indicators for 217 economies and more than 40 country groups, with data for many indicators going back more than 50 years.&quot;, url = &quot;https://datatopics.worldbank.org/world-development-indicators/&quot;, type = &quot;Time series database&quot;, date_created = &quot;2021-09-15&quot;, date_published = &quot;2021-09-15&quot;, version = list( list(version = &quot;On-line public version (open data), 15 September 2021&quot;, date = &quot;2021-09-15&quot;, responsibility = &quot;World Bank, Development Data Group&quot;)), update_frequency = &quot;Quarterly&quot;, update_schedule = list(list(update = &quot;April, July, September, December&quot;)), time_coverage = list(list(start = &quot;1960&quot;, end = &quot;2021&quot;)), periodicity = list(list(period = &quot;Annual&quot;)), topics = list_topics, geographic_units = list( list(code = &quot;ABW&quot;, name = &quot;Aruba&quot;), list(code = &quot;AFE&quot;, name = &quot;Africa Eastern and Southern&quot;), list(code = &quot;AFG&quot;, name = &quot;Afghanistan&quot;), list(code = &quot;AFW&quot;, name = &quot;Africa Western and Central&quot;), list(code = &quot;AGO&quot;, name = &quot;Angola&quot;), list(code = &quot;ALB&quot;, name = &quot;Albania&quot;), list(code = &quot;AND&quot;, name = &quot;Andorra&quot;), list(code = &quot;ARB&quot;, name = &quot;Arab World&quot;), list(code = &quot;ARE&quot;, name = &quot;United Arab Emirates&quot;), list(code = &quot;ARG&quot;, name = &quot;Argentina&quot;) # ... and 255 more - not shown here ), geographic_granularity = &quot;global, national, regional&quot;, geographic_area_count = &quot;265&quot;, languages = list( list(code = &quot;en&quot;, name = &quot;English&quot;), list(code = &quot;sp&quot;, name = &quot;Spanish&quot;), list(code = &quot;fr&quot;, name = &quot;French&quot;), list(code = &quot;ar&quot;, name = &quot;Arabic&quot;), list(code = &quot;cn&quot;, name = &quot;Chinese&quot;) ), contacts = list(list(name = &quot;Data Help Desk&quot;, affiliation = &quot;World Bank&quot;, uri = &quot;https://datahelpdesk.worldbank.org/&quot;, email = &quot;data@worldbank.org&quot;)), access_options = list( list(type = &quot;API&quot;, uri = &quot;https://datahelpdesk.worldbank.org/knowledgebase/articles/889386&quot;), list(type = &quot;Bulk (CSV)&quot;, uri = &quot;https://data.worldbank.org/data-catalog/world-development-indicators&quot;), list(type = &quot;Query&quot;, uri = &quot;http://databank.worldbank.org/data/source/world-development-indicators&quot;), list(type = &quot;PDF&quot;, uri = &quot;https://openknowledge.worldbank.org/bitstream/handle/10986/26447/WDI-2017-web.pdf&quot;)), license = list(list(type = &quot;CC BY-4.0&quot;, uri = &quot;https://creativecommons.org/licenses/by/4.0/&quot;)), citation = &quot;World Development Indicators 2021 (September), The World Bank&quot; ) ) ** Using Python # The code below creates a dictionary `wdi_database` ready to be published in a NADA catalog (using the PyNADA library). wdi_database: { &quot;database_description&quot; : { &quot;title_statement&quot; : { &quot;idno&quot; : &quot;WB_WDI_2021_09_15&quot;, &quot;title&quot; : &quot;World Development Indicators 2021&quot;, &quot;alternate_title&quot; : &quot;WDI 2021&quot; }, &quot;authoring_entity&quot; : {&quot;name&quot; : &quot;Development Data Group&quot;, &quot;affiliation&quot; : &quot;The World Bank Group&quot;}, abstract = &quot;The World Development Indicators is a compilation of relevant, high-quality, and internationally comparable statistics about global development and the fight against poverty. The database contains 1,400 time series indicators for 217 economies and more than 40 country groups, with data for many indicators going back more than 50 years.&quot;, url = &quot;https://datatopics.worldbank.org/world-development-indicators/&quot;, type = &quot;Time series database&quot;, date_created = &quot;2021-09-15&quot;, date_published = &quot;2021-09-15&quot;, version = [{&quot;version&quot; : &quot;On-line public version (open data), 15 September 2021&quot;, &quot;date&quot; : &quot;2021-09-15&quot;, &quot;responsibility&quot; : &quot;World Bank, Development Data Group&quot;}], update_frequency = &quot;Quarterly&quot;, update_schedule = [{&quot;update&quot; : &quot;April, July, September, December&quot;}], time_coverage = [{&quot;start&quot; : &quot;1960&quot;, &quot;end&quot; : &quot;2021&quot;}], periodicity = [{&quot;period&quot; : &quot;Annual&quot;}], topics = list_topics, geographic_units = [ {&quot;code&quot; : &quot;ABW&quot;, &quot;name&quot; : &quot;Aruba&quot;}, {&quot;code&quot; : &quot;AFE&quot;, &quot;name&quot; : &quot;Africa Eastern and Southern&quot;}, {&quot;code&quot; : &quot;AFG&quot;, &quot;name&quot; : &quot;Afghanistan&quot;}, {&quot;code&quot; : &quot;AFW&quot;, &quot;name&quot; : &quot;Africa Western and Central&quot;}, {&quot;code&quot; : &quot;AGO&quot;, &quot;name&quot; : &quot;Angola&quot;}, {&quot;code&quot; : &quot;ALB&quot;, &quot;name&quot; : &quot;Albania&quot;}, {&quot;code&quot; : &quot;AND&quot;, &quot;name&quot; : &quot;Andorra&quot;}, {&quot;code&quot; : &quot;ARB&quot;, &quot;name&quot; : &quot;Arab World&quot;}, {&quot;code&quot; : &quot;ARE&quot;, &quot;name&quot; : &quot;United Arab Emirates&quot;}, {&quot;code&quot; : &quot;ARG&quot;, &quot;name&quot; : &quot;Argentina&quot;} # ... and 255 more, not shown here ], geographic_granularity = &quot;global, national, regional&quot;, geographic_area_count = &quot;265&quot;, languages = [ {&quot;code&quot; : &quot;en&quot;, &quot;name&quot; : &quot;English&quot;}, {&quot;code&quot; : &quot;sp&quot;, &quot;name&quot; : &quot;Spanish&quot;}, {&quot;code&quot; : &quot;fr&quot;, &quot;name&quot; : &quot;French&quot;}, {&quot;code&quot; : &quot;ar&quot;, &quot;name&quot; : &quot;Arabic&quot;}, {&quot;code&quot; : &quot;cn&quot;, &quot;name&quot; : &quot;Chinese&quot;} ], contacts = [{&quot;name&quot; : &quot;Data Help Desk&quot;, &quot;affiliation&quot; : &quot;World Bank&quot;, &quot;uri&quot; : &quot;https://datahelpdesk.worldbank.org/&quot;, &quot;email&quot; : &quot;data@worldbank.org&quot;}], access_options = [ {&quot;type&quot; : &quot;API&quot;, &quot;uri&quot; : &quot;https://datahelpdesk.worldbank.org/knowledgebase/articles/889386&quot;}, {&quot;type&quot; : &quot;Bulk (CSV)&quot;, &quot;uri&quot; : &quot;https://data.worldbank.org/data-catalog/world-development-indicators&quot;}, {&quot;type&quot; : &quot;Query&quot;, &quot;uri&quot; : &quot;http://databank.worldbank.org/data/source/world-development-indicators&quot;}, {&quot;type&quot; : &quot;PDF&quot;, &quot;uri&quot; : &quot;https://openknowledge.worldbank.org/bitstream/handle/10986/26447/WDI-2017-web.pdf&quot;} ], license = [{&quot;type&quot; : &quot;CC BY-4.0&quot;, &quot;uri&quot; : &quot;https://creativecommons.org/licenses/by/4.0/&quot;}], citation = &quot;World Development Indicators 2021 (September), The World Bank&quot; } } "],["chapter08.html", "Chapter 8 Indicators and time series 8.1 Indicators, time series, database, and scope of the schema 8.2 Schema description 8.3 Generating and publishing compliant metadata - Complete example", " Chapter 8 Indicators and time series 8.1 Indicators, time series, database, and scope of the schema Indicators are summary measures related to key issues or phenomena, derived from observed facts. Indicators form time series when they are provided with a temporal ordering, i.e. when their values are provided with an ordered annual, quarterly, monthly, daily, or other time reference. Time series are usually published with equal intervals between values. In the context of this Guide, we however consider as time series all indicators provided for a given geographic area with an associated time reference, whether this time represents a regular, continuous succession of time stamps or not. For example, the indicators provided by the Demographic and Health Surveys (DHS) StatCompiler, which are only available for the years when DHS are conducted in countries (which for some countries can be a single year), would be considered here as “time series”. Time series are often contained in multi-indicators databases, like the World Bank’s World Development Indicators - WDI, whose on-line version contains series for 1,430 indicators (as of 2021). To document not only the series but also the databases they belong to, we propose two metadata schemas: one to document the series/indicators, the other one to document the databases they belong to. In the NADA application, a series can be documented and published without an associated database, but information on a database will only be published in association with a series. The information on a database is thus treated as an “attachment” to the information on a series. A SERIES DESCRIPTION tab will display all metadata related to the series, i.e. all content entered in the series schema. The (optional) SOURCE DATABASE tab will display the metadata related to the database, i.e. all content entered in the series database schema. This information is displayed for information, but not indexed in the NADA catalog (i.e. not searchable). Suggestions and recommendations to data curators Indicators and time series often come with metadata limited to the indicators/series name and a brief definition. This significantly reduces the discoverability of the indicators, and the possibility to implement semantic searchability and recommender systems. It is therefore highly recommended to generate more detailed metadata for each time series, including information on the purpose and typical use of the indicators, of its relevancy to different audiences, of its limitations, and more. When documenting an indicator or time series, attention should be paid to include keywords and phrases in the metadata that reflect how data users are likely to formulate their queries when searching data catalogs. Subject-matter expertise, combined with an analysis of queries submitted to data catalogs, can help to identify such keywords. For example, the metadata related to an indicator “Prevalence of stunting” should contain the keyword “malnutrition”, and the metadata related to “GDP per capita” should include keywords like “economic growth” or “national income”. By doing so, data curators will provide richer input to search engines and recommender systems, and will have a significant and direct impact on the discoverability of the data. The use of AI tools can considerabli facilitate the process of identifying related keywords. We provide in the chapter an example of use of chatGPT for such purpose. 8.2 Schema description An indicator or time series is documented using the time series /indicators schema. The database schema is optional, and used to document the database, if any, that the indicator belongs to. When multiple series of a same database are documented, the metadata related to the database only needs to be generated once, then applied to all series. One metadata element in the time series /indicators schema is used to link an indicator to the corresponding database. 8.2.1 The time series (indicators) schema The time series schema is used to document an indicator or a time series. In NADA, the data and metadata of an indicator can (but does not have to) be published with information on the database it belongs to (if any). A metadata element is provided to indicate the identifier of that database (if any), and to establish the link between the indicator metadata and the database metadata generated using the schema described above. { &quot;repositoryid&quot;: &quot;string&quot;, &quot;access_policy&quot;: &quot;na&quot;, &quot;data_remote_url&quot;: &quot;string&quot;, &quot;published&quot;: 0, &quot;overwrite&quot;: &quot;no&quot;, &quot;metadata_information&quot;: {}, &quot;series_description&quot;: {}, &quot;provenance&quot;: [], &quot;tags&quot;: [], &quot;lda_topics&quot;: [], &quot;embeddings&quot;: [], &quot;additional&quot;: { } } 8.2.1.1 Cataloguing parameters The first elements of the schema (repositoryid, access_policy, data_remote_url, published, and overwrite) are not part of the series metadata. They are parameters used to indicate how the series will be published in a NADA catalog. repositoryid identifies the collection in which the metadata will be published. By default, the metadata will be published in the central catalog. To publish them in a collection, the collection must have been previously created in NADA. access_policy indicates the access policy to be applied to the data: direct access, open access, public use files, licensed access, data accessible from an external repository, and data not accessible. A controlled vocabulary is provided and must be used, with the following respective options: {direct; open; public; licensed; remote; data_na}. data_remote_url provides the link to an external website where the data can be obtained, if the access_policy has been set to remote. published: Indicates whether the metadata must be made visible to visitors of the catalog. By default, the value is 0 (unpublished). This value must be set to 1 (published) to make the metadata visible. overwrite: Indicates whether metadata that may have been previously uploaded for the same series can be overwritten. By default, the value is “no”. It must be set to “yes” to overwrite existing information. Note that a series will be considered as being the same as a previously uploaded one if the identifier provided in the metadata element series_description &gt; idno is the same. 8.2.1.2 Metadata information metadata_information [Optional, Not Repeatable] The set of elements in metadata_information is used to provide information on the production of the indicator metadata. This information is used mostly for administrative purposes by data curators and catalog administrators. &quot;metadata_information&quot;: { &quot;title&quot;: &quot;string&quot;, &quot;idno&quot;: &quot;string&quot;, &quot;producers&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;abbr&quot;: &quot;string&quot;, &quot;affiliation&quot;: &quot;string&quot;, &quot;role&quot;: &quot;string&quot; } ], &quot;prod_date&quot;: &quot;string&quot;, &quot;version&quot;: &quot;string&quot; } title [Optional ; Not repeatable ; String] The title of the metadata document containing the indicator metadata. idno [Required ; Not repeatable ; String] A unique identifier of the indicator metadata document. It can be for example the identifier of the indicator preceded by a prefix identifying the metadata producer. producers [Optional ; Repeatable] This is a list of producers involved in the documentation (production of the metadata) of the series. name [Optional ; Not repeatable, String] The name of the agency that is responsible for the documentation of the series. abbr [Optional ; Not repeatable, String] Abbreviation (acronym) of the agency mentioned in name. affiliation [Optional ; Not repeatable, String] Affiliation of the agency mentioned in name. role [Optional ; Not repeatable, String] The specific role of the agency mentioned in name in the production of the metadata. This element will be used when more than one person or organization is listed in the producers element to distinguish the specific contribution of each metadata producer. prod_date [Optional ; Not repeatable, String] The date the metadata was generated. The date should be entered in ISO 8601 format (YYYY-MM-DD or YYYY-MM or YYYY). version [Optional ; Not repeatable, String] The version of the metadata on this series. This element will rarely be used. metadata_creation = list( producers = list(list(name = &quot;Development Data Group&quot;, abbr = &quot;DECDG&quot;, affiliation = &quot;World Bank&quot;)), prod_date = &quot;2021-10-15&quot; ) 8.2.1.3 Series description series_description [Required ; Repeatable] This section contains all elements used to describe a specific series or indicator. &quot;series_description&quot;: { &quot;idno&quot;: &quot;string&quot;, &quot;doi&quot;: &quot;string&quot;, &quot;name&quot;: &quot;string&quot;, &quot;database_id&quot;: &quot;string&quot;, &quot;aliases&quot;: [], &quot;alternate_identifiers&quot;: [], &quot;languages&quot;: [], &quot;measurement_unit&quot;: &quot;string&quot;, &quot;dimensions&quot;: [], &quot;periodicity&quot;: &quot;string&quot;, &quot;base_period&quot;: &quot;string&quot;, &quot;definition_short&quot;: &quot;string&quot;, &quot;definition_long&quot;: &quot;string&quot;, &quot;definition_references&quot;: [], &quot;statistical_concept&quot;: &quot;string&quot;, &quot;concepts&quot;: [], &quot;methodology&quot;: &quot;string&quot;, &quot;derivation&quot;: &quot;string&quot;, &quot;imputation&quot;: &quot;string&quot;, &quot;missing&quot;: &quot;string&quot;, &quot;quality_checks&quot;: &quot;string&quot;, &quot;quality_note&quot;: &quot;string&quot;, &quot;sources_discrepancies&quot;: &quot;string&quot;, &quot;series_break&quot;: &quot;string&quot;, &quot;limitation&quot;: &quot;string&quot;, &quot;themes&quot;: [], &quot;topics&quot;: [], &quot;disciplines&quot;: [], &quot;relevance&quot;: &quot;string&quot;, &quot;time_periods&quot;: [], &quot;ref_country&quot;: [], &quot;geographic_units&quot;: [], &quot;bbox&quot;: [], &quot;aggregation_method&quot;: &quot;string&quot;, &quot;disaggregation&quot;: &quot;string&quot;, &quot;license&quot;: [], &quot;confidentiality&quot;: &quot;string&quot;, &quot;confidentiality_status&quot;: &quot;string&quot;, &quot;confidentiality_note&quot;: &quot;string&quot;, &quot;links&quot;: [], &quot;api_documentation&quot;: [], &quot;authoring_entity&quot;: [], &quot;sources&quot;: [], &quot;sources_note&quot;: &quot;string&quot;, &quot;keywords&quot;: [], &quot;acronyms&quot;: [], &quot;errata&quot;: [], &quot;notes&quot;: [], &quot;related_indicators&quot;: [], &quot;compliance&quot;: [], &quot;framework&quot;: [], &quot;series_groups&quot;: [] } idno [Required ; Not repeatable ; String] A unique identifier (ID) for the series. Most agencies and databases will have a coherent coding convention to generate their series IDs. For example, the name of the series in the World Bank’s World Development Indicators series are composed of the following elements, separated by a dot: Topic code (2 digits). General subject code (3 digits) Specific subject code (4 digits) Extensions (2 digits each) For example, the series with identifier “DT.DIS.PRVT.CD” is the series containing data on “External debt disbursements by private creditors in current US dollars” (for more information, see How does the World Bank code its indicators?. doi [Optional ; Not repeatable ; String] A Digital Object Identifier (DOI) for the the series. name [Required ; Not repeatable ; String] The name (label) of the series. Note that a field alias is provided (see below) to capture alternative names for the series. database_id [Optional ; Not repeatable ; String] The unique identifier of the database the series belongs to. This field must correspond to the element database_description &gt; title_statement &gt; idno of the database schema described above. This is the only field that is needed to establish the link between the database metadata and the indicator metadata. aliases [Optional ; Repeatable] A series or an indicator can be referred to using different names. The aliases element is provided to capture the multiple names and labels that may be associated with (i.e synomyms of) the documented series or indicator. &quot;aliases&quot;: [ { &quot;alias&quot;: &quot;string&quot; } ] - alias [Optional ; Not repeatable ; String] An alternative name for the indicator or series being documented. alternate_identifiers [Optional ; Not repeatable ; String] The element idno described above is the reference unique identifier for the catalog in which the metadata is intended to be published. But the same indicator/metadata may be published in other catalogs. For example, a data catalog may publish metadata for series extracted from the World Bank World Development Indicators (WDI) database. And the WDI itself contains series generated and published by other organizations, such as the World Health Organization or UNICEF. Catalog administrators may want to assign a unique identifier specific to their catalog (the idno element), but keep track of the identifier of the series or indicator in other catalogs or databases. The alternate_identifiers element serves that purpose. &quot;alternate_identifiers&quot;: [ { &quot;identifier&quot;: &quot;string&quot;, &quot;name&quot;: &quot;string&quot;, &quot;database&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot;, &quot;notes&quot;: &quot;string&quot; } ] identifier [Required ; Not repeatable ; String] An identifier for the series other than the identifier entered in idno (note that the identifier entered in idno can be included in this list, if it is useful to provide it with a type identifier (see name element below) which is not provided in idno. This can be the identifier of the indicator in another database/catalog, or a global unique identifier. name This element will be used to define the type of identifier. This will typically be used to flag DOIs by entering “Digital Object Identifier (DOI)”. database The name of the database (or catalog) where this alternative identifier is used, e.g. “IMF, International Financial Statistics (IFS)”. uri [Optional ; Not repeatable ; String] A link (URL) to the database mentioned in database. notes [Optional ; Not repeatable ; String] Any additional information on the alternate identifier. languages [Optional ; Repeatable] An indicator or time series can be made available at different levels of disaggregation. For example, an indicator containing estimates of the “Population” of a country by year can be available by sex. The data curators in such case will have two options: (i) create and document three separate indicators, namely “Population, Total”, “Population, Female”, and “Population, Male”; or create a single indicator “Population” and attach a dimension “sex” to it, with values “Total”, “Female”, and “Male”. The dimensions are features (or “variables”) that define the different levels of disaggregation within an indicator/series. The element dimensions is used to provide an itemized list of disaggregations that correspond exactly to the published data. Note that when an indicator is available at two “non-overlapping” levels of disaggregation, it should be split into two indicators. For example, if the Population indicator is available by male/female and by urban/rural, but not by male/urban/male/rural/female urban/female rural, it should be treated as two separate indicators (“Population by sex” with dimension sex = “male / female” and “Population by area of residence” with dimension area = “urban / rural”.) Note also that another element in the schema, disaggregation, is also provided, in which a narrative description of the actual or recommended disaggregations can be documented. &quot;alternate_identifiers&quot;: [ { &quot;identifier&quot;: &quot;string&quot;, &quot;name&quot;: &quot;string&quot;, &quot;database&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot;, &quot;notes&quot;: &quot;string&quot; } ] name [Required ; Not repeatable ; String] The name of the language. code [Optional ; Not repeatable ; String] The code of the language, preferably the ISO code. measurement_unit [Optional ; Not repeatable ; String] The unit of measurement. Note that in many databases the measurement unit will be included in the series name/label. In the World Bank’s World Development Indicators for example, series are named as follows: CO2 emissions (kg per 2010 US$ of GDP) GDP per capita (current US$) GDP per capita (current LCU) Population density (people per sq. km of land area) In such case, the name of the series should not be changed, but the measurement unit may be extracted from it and stored in element measurement_unit. dimensions [Optional ; Repeatable] An indicator or time series can be made available at different levels of disaggregation. For example, a time series containing annual estimates of the indicator “Resident population (mid-year)” can be provided by country, by urban/rural area of residence, by sex, by age group. The data curator has to make a decision on how to organize such data. One option is to create an indicator “Resident population (mid-year)” and to define a set of “dimensions” for the breakdowns. The dimensions would in such case be the year, the country, the area of residence, the sex, and the age group. Some of the dimensions would have to be provided with a code list (or ’controlled vocabulary”, for example stating that F means “Female”, M” means male, and T means “Total” for the dimension sex). Another option would be to create multiple indicators (e.g., creating three distinct indicators “Resident population, male (mid-year)”, “Resident population, female (mid-year)”, “Resident population, total (mid-year)” and using year, country, area of residence, and age group as dimensions). The element dimensions is used to provide an itemized list of disaggregations that correspond to the published data. Note that another element in the schema, disaggregation, is also provided, in which a narrative description of the actual or recommended disaggregations can be documented. Note also that in the SDMX standard, dimensions are listed in the Data Structure Definition” and are complemented by code lists* that provide the related controlled vocabularies. &quot;dimensions&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;label&quot;: &quot;string&quot;, &quot;description&quot;: &quot;string&quot; } ] name [Required ; Not repeatable ; String] The name of the dimension. label [Required ; Not repeatable ; String] The label of the dimension, for example “sex”, or “urban/rural”. description [Optional ; Not repeatable ; String] A description of the dimension (for example, if the label was “age group”, the description can provide detailed information on the age groups, e.g. “The age groups in the database are 0-14, 15-49, 50-64, and 65+ years old”.) release_calendar [Optional ; Not repeatable ; String] Information on when updates for the indicators can be expected. This will usually not consist of exact dates (which would have to be updated regularly), but of more general information like “Every first Monday of the Month”, or “Every year on June 30”, or “The last week of each quarter”. periodicity [Optional ; Not repeatable ; String] The periodicity of the series. It is recommended to use a controlled vocabulary with values like annual, quarterly, monthly, daily, etc. base_period [Optional ; Not repeatable ; String] The base period for the series. This field will only apply to series that require a base year (or other reference time) used as a benchmark, like a Consumer Price Index (CPI) which will have a value of 100 for a reference base year. definition_short [Optional ; Not repeatable ; String] A short definition of the series. The short definition captures the essence of the series. definition_long [Optional ; Not repeatable ; String] A long(er) version of the definition of the series. If only one definition is available (not a short/long version), it is recommended to capture it in the definition_short element. ALternatively, the same definition can be stored in both definition_short and definition_long. definition_references [Optional ; Repeatable] This element is provided to link to an external resources from which the definition was extracted. &quot;definition_references&quot;: [ { &quot;source&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot;, &quot;note&quot;: &quot;string&quot; } ] source [Optional ; Not repeatable ; String] The source of the definition (title, or label). uri [Optional ; Not repeatable ; String] A link (URL) to the source of the definition. note [Optional ; Not repeatable ; String] This element provides for annotating or explaining the reason the reference has been included as part of the metadata. statistical_concept [Optional ; Not repeatable ; String] This element allows to insert a reference of the series with content of a statistical character. This can include coding concepts or standards that are applied to render the data statistically relevant. concepts [Optional ; Repeatable] This repeatable element can be used to document concepts related to the indicators or time series (other than the main statistical concept that may have been entered in statisticsl_concept). For example, the concept of malnutrition could be documented in relation to the indicators “Prevalence of stunting” and “Prevalence of wasting”. &quot;concepts&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;definition&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ] name [Required ; Not repeatable ; String] A concise and standardized name (label) for the concept. definition [Required ; Not repeatable ; String] The definition of the concept. uri [Optional ; Not repeatable ; String] A link (URL) to a resource providing more detailed information on the concept. data_collection [Optional ; Not repeatable] This group of elements can be used to document data collection activities that led to or allowed the production of the indicator. This element will typically be used for the description of surveys or censuses. Note: the schema also contains an element “sources”. That element will be used to document the organization and/or main data production program from which the indicator is derived. &quot;data_collection&quot;: [ { &quot;data_source&quot;: &quot;string&quot;, &quot;method&quot;: &quot;string&quot;, &quot;period&quot;: &quot;string&quot;, &quot;note&quot;: &quot;string&quot; &quot;uri&quot;: &quot;string&quot; } ] data_source [Required ; Not repeatable ; String] A concise and standardized name (label) for the data source, e.g. “National Labor Force Survey, 1st quarter 2022”. If multiple data sources were used, they can all be listed here. Note that is a time series has values obtained from many different sources, the source for each value (or group of values) will not be part of the indicator/series metadata, but will be stored as an attribute in the data file where the information can be associated with a specific observation (“cell note” or group of observation (e.g. attached to an indicator for avv values for a same year or for a same area). method [Required ; Not repeatable ; String] Brief information on the data collection method, e.g. :Sample household survey”. period [Optional ; Not repeatable ; String] Information on the period of the data collection, e.g. “January to March 2022”. note [Optional ; Not repeatable ; String] Additional information on the data collection. uri [Optional ; Not repeatable ; String] A link to a resource (website, document) where more information on the data collection can be found. imputation [Optional ; Not repeatable ; String] Data may have been imputed to account for data gaps or for other reasons (harmonization/standardization, and others). If imputations have been made, this element provides the space for their description. adjustments [Optional ; Repeatable ; String] Description of any adjustments with respect to use of standard classifications and harmonization of breakdowns for age group and other dimensions, or adjustments made for compliance with specific international or national definitions. missing [Optional ; Not repeatable ; String] Information on missing values in the series or indicator. This information can be related to treatment of missing values, to the cause(s) of missing values, and others. validation_rules [Optional ; Repeatable ; String] Description of the set of rules (itemized) used to validate values for the indicator, e.g. “Is within range 0-100”, or “Is the sum of indicatorX + indicator Y”. quality_checks [Optional ; Not repeatable ; String] Data may have gone through data quality checks to assure that the values are reasonable and coherent, which can be described in this element. These quality checks may include checking for outlying values or other. A brief description of such quality control procedures will contribute to reinforcing the credibility of the data being disseminated. quality_note [Optional ; Not repeatable ; String] Additional notes or an overall statement on data quality. These could for example cover non-standard quality notes and/or information on independent reviews on the data quality. sources_discrepancies [Optional ; Not repeatable ; String] This element is used to describe and explain why the data in the series may be different from the data for the same series published in other sources. International organizations, for example, may apply different techniques to make data obtained from national sources comparable across countries, in which cases the data published in international databases may differ from the data published in national, official databases. series_break [Optional ; Not repeatable ; String] Breaks in statistical series occur when there is a change in the standards, sources of data, or reference year used in the compilation of a series. Breaks in series must be well documented. The documentation should include the reason(s) for the break, the time it occured, and information on the impact on comparability of data over time. limitation [Optional ; Not repeatable ; String] This element is used to communicate to the user any limitations or exceptions in using the data. The limitations may result from the methodology, from issues of quality or consistency in the data source, or other. themes [Optional ; Repeatable] Themes provide a general idea of the research that might guide the creation and/or demand for the series. A theme is broad and is likely also subject to a community based definition or list. A controlled vocabulary should be used. This element will rarely be used (the element topics described below will be used more often). &quot;themes&quot;: [ { &quot;id&quot;: &quot;string&quot;, &quot;name&quot;: &quot;string&quot;, &quot;parent_id&quot;: &quot;string&quot;, &quot;vocabulary&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ] id [Optional ; Not repeatable ; String] The unique identifier of the theme. It can be a sequential number, or the ID of the theme in a controlled vocabulary. name [Required ; Not repeatable ; String] The label of the theme associated with the data. parent_id [Optional ; Not repeatable ; String] When a hierarchical (nested) controlled vocabulary is used, the parent_id field can be used to indicate a higher-level theme to which this theme belongs. vocabulary [Optional ; Not repeatable ; String] The name of the controlled vocabulary used, if any. uri [Optional ; Not repeatable ; String] A link to the controlled vocabulary mentioned in field `vocabulary’. topics [Optional ; Repeatable] The topics field indicates the broad substantive topic(s) that the indicator/series covers. A topic classification facilitates referencing and searches in electronic survey catalogs. Topics should be selected from a standard controlled vocabulary such as the Council of European Social Science Data Archives (CESSDA) topics classification. &quot;topics&quot;: [ { &quot;id&quot;: &quot;string&quot;, &quot;name&quot;: &quot;string&quot;, &quot;parent_id&quot;: &quot;string&quot;, &quot;vocabulary&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ] id [Optional ; Not repeatable ; String] The unique identifier of the topic. It can be a sequential number, or the ID of the topic in a controlled vocabulary. name [Required ; Not repeatable ; String] The label of the topic associated with the data. parent_id [Optional ; Not repeatable ; String] When a hierarchical (nested) controlled vocabulary is used, the parent_id field can be used to indicate a higher-level topic to which this topic belongs. vocabulary [Optional ; Not repeatable ; String] The name of the controlled vocabulary used, if any. uri A link to the controlled vocabulary mentioned in field vocabulary. disciplines [Optional ; Repeatable] Information on the academic disciplines related to the content of the document. A controlled vocabulary will preferably be used, for example the one provided by the list of academic fields in Wikipedia. &quot;disciplines&quot;: [ { &quot;id&quot;: &quot;string&quot;, &quot;name&quot;: &quot;string&quot;, &quot;parent_id&quot;: &quot;string&quot;, &quot;vocabulary&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ] This is a block of five elements: id [Optional ; Not repeatable ; String] The ID of the discipline, preferably taken from a controlled vocabulary. name [Optional ; Not repeatable ; String] The name (label) of the discipline, preferably taken from a controlled vocabulary. parent_id [Optional ; Not repeatable ; String] The parent ID of the discipline (ID of the item one level up in the hierarchy), if a hierarchical controlled vocabulary is used. vocabulary [Optional ; Not repeatable ; String] The name (including version number) of the controlled vocabulary used, if any. uri [Optional ; Not repeatable ; String] The URL to the controlled vocabulary used, if any. relevance [Optional ; Not repeatable ; String] This field documents the relevance of an indicator or series in relation to a social imperative or policy objective. mandate [Optional ; Not repeatable ; String] mandate [Optional ; Not repeatable ; String] Description of the institutional mandate or of a set of rules or other formal set of instructions assigning responsibility as well as the authority to an organization for the collection, processing, and dissemination of statistics for this indicator. URI [Optional ; Not repeatable ; String] A link to a resource (document, website) describing the mandate. time_periods [Optional ; Repeatable] The time period covers the entire span of data available for the series. The time period has a start and an end and is reported according to the periodicity provided in a previous element. &quot;time_periods&quot;: [ { &quot;start&quot;: &quot;string&quot;, &quot;end&quot;: &quot;string&quot;, &quot;notes&quot;: &quot;string&quot; } ] start [Required ; Not repeatable ; String] The initial date of the series in the dataset. The start date should be entered in ISO 8601 format (YYYY-MM-DD or YYYY-MM or YYYY). end [Required ; Not repeatable ; String] The end date is the latest date for which an estimate for the indicator is available. The end date should be entered in ISO 8601 format (YYYY-MM-DD or YYYY-MM or YYYY). notes [Optional ; Not repeatable ; String] Additional information on the time period. ref_country [Optional ; Repeatable] A list of countries for which data are available in the series. This element is somewhat redundant with the next element (geographic_units) which may also contain a list of countries. Identifying geographic areas of type “country” is important to enable filters and facets in data catalogs (country names are among the most frequent queries submitted to catalogs). &quot;ref_country&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;code&quot;: &quot;string&quot; } ] name [Required ; Not repeatable ; String] The name of the country. code [Optional ; Not repeatable ; String] The code of the country. The use of the ISO 3166-1 alpha-3 codes is recommended. geographic_units [Optional ; Repeatable] List of geographic units (regions, countries, states, provinces, etc.) for which data are available for the series. &quot;geographic_units&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;code&quot;: &quot;string&quot;, &quot;type&quot;: &quot;string&quot; } ] name [Required ; Not repeatable ; String] Name of the geographic unit e.g. “World,”Africa”, “Afghanistan”, “OECD countries”, “Bangkok”. code [Optional ; Not repeatable ; String] Code of the geographic unit. The ISO 3166-1 alpha-3 code is preferred when the unit is a country. type [Optional ; Not repeatable ; String] Type of geographic unit e.g. “country”, “state”, “region”, “province”, “city”, etc. bbox [Optional ; Repeatable] This element is used to define one or multiple bounding box(es), which are the rectangular fundamental geometric description of the geographic coverage of the data. A bounding box is defined by west and east longitudes and north and south latitudes, and includes the largest geographic extent of the dataset’s geographic coverage. The bounding box provides the geographic coordinates of the top left (north/west) and bottom-right (south/east) corners of a rectangular area. This element can be used in catalogs as the first pass of a coordinate-based search. This element is optional, but if the bound_poly element (see below) is used, then the bbox element must be included. &quot;bbox&quot;: [ { &quot;west&quot;: &quot;string&quot;, &quot;east&quot;: &quot;string&quot;, &quot;south&quot;: &quot;string&quot;, &quot;north&quot;: &quot;string&quot; } ] west [Required ; Not repeatable ; String] West longitude of the bounding box. east [Required ; Not repeatable ; String] East longitude of the bounding box. south [Required ; Not repeatable ; String] South latitude of the bounding box. north [Required ; Not repeatable ; String] North latitude of the bounding box. This example is for a study covering the islands of Madagascar and Mauritius my_indicator &lt;- list( metadata_information = list( # ... ), series_description = list( # ... , study_info = list( # ... , ref_country = list( list(name = &quot;Madagascar&quot;, code = &quot;MDG&quot;), list(name = &quot;Mauritius&quot;, code = &quot;MUS&quot;) ), bbox = list( list(name = &quot;Madagascar&quot;, west = &quot;43.2541870461&quot;, east = &quot;50.4765368996&quot;, south = &quot;-25.6014344215&quot;, north = &quot;-12.0405567359&quot;), list(name = &quot;Mauritius&quot;, west = &quot;56.6&quot;, east = &quot;72.466667&quot;, south = &quot;-20.516667&quot;, north = &quot;-5.25&quot;) ), # ... ), # ... ) aggregation_method [Optional ; Not repeatable ; String] The aggregation_method element describes how values can be aggregated from one geographic level (for example, a country) to a higher-level geographic area (for example, a group of country defined based on a geographic criteria (region, world) or another criteria (low/medium/high-income countries, island countries, OECD countries, etc.). The aggregation method can be simple (like “sum” or “population-weighted average”) or more complex, involving weighting of values. disaggregation [Optional ; Not repeatable ; String] This element is intended to inform users that an indicator or series is available at various levels of disaggregation. The related series should be listed (by andme and/or identifier). For indicator “Population, total” for example, one may inform the user that the indicator is also available (in other series) by sex, urban/rural, and age group (in series “Population, male” and “Population, female”, etc.). license [Optional ; Repeatable] The license refers to the accessibility and terms of use associated with the data. Providing a license and a link to the terms of the license allos data users to determine, with full clarity, what they can and cannot do with the data. &quot;license&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot;, &quot;note&quot;: &quot;string&quot; } ] name [Required ; Not repeatable ; String] The name of the license, e.g. “Creative Commons Attribution 4.0 International license (CC-BY 4.0)”. uri [Optional ; Not repeatable ; String] The URL of a website where the licensed is described in detail, for example “https://creativecommons.org/licenses/by/4.0/”. note [Optional ; Not repeatable ; String] Any additional information on the license. confidentiality [Optional ; Not repeatable ; String] A statement of confidentiality for the series. confidentiality_status [Optional ; Not repeatable ; String] This indicates a confidentiality status for the series. A controlled vocabulary should be used with possible options “public”, “official use only”, “confidential”, “strictly confidential”. When all series are made publicly available, and belong to a database that has an open or public access policy, this element can be ignored. confidentiality_note [Optional ; Not repeatable ; String] This element is reserved for additional notes regarding confidentiality of the data. This could involve references to specific laws and circumstances regarding the use of data. links [Optional ; Repeatable] This element provides links to online resources of any type that could be useful to the data users. This can be links to description of methods and reference documents, analytics tools, visualizations, data sources, or other. &quot;links&quot;: [ { &quot;type&quot;: &quot;string&quot;, &quot;description&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ] type [Optional ; Not repeatable ; String] This element allows to classify the link that is provided. description [Optional ; Not repeatable ; String] A description of the link that is provided. uri [Optional ; Not repeatable ; String] The uri (URL) to the described resource. api_documentation [Optional ; Repeatable] Increasingly, data are made accessible via Application Programming Interfaces (APIs). The API associated with a series must be documented. The documentation will usually not be specific to a series, but apply to all series in a same database. &quot;api_documentation&quot;: [ { &quot;description&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ] description [Optional ; Not repeatable ; String] This element will not contain the API documentation itself, but information on what documentation is available. uri [Optional ; Not repeatable ; String] The URL of the API documentation. authoring_entity [Optional ; Repeatable] This set of five elements is used to identify the organization(s) or person(s) who are the main producers/curators of the indicator. Note that a similar element is provided at the database level. The authoring_entity for the indicator can be different from the authoring_entity of the database. For example, the World Bank is the authoring entity for the World Development Indicators database, which contains indicators obtained from the International Monetary Fund, World Health Organization, and other organizations that are thus the authoring entitis for specific indicators. &quot;authoring_entity&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;affiliation&quot;: &quot;string&quot;, &quot;abbreviation&quot;: null, &quot;email&quot;: null, &quot;uri&quot;: &quot;string&quot; } ] name [Optional ; Not repeatable ; String] The name of the person or organization who is responsible for the production of the indicator or series. Write the name in full (use the element abbreviation to capture the acronym of the organization, if relevant). affiliation [Optional ; Not repeatable ; String] The affiliation of the person or organization mentioned in name. abbreviation [Optional ; Not repeatable ; String] Abbreviated name (acronym) of the organization mentioned in name. email [Optional ; Not repeatable ; String] The public email contact of the person or organizations mentioned in name. It is good practice to provide a service account email address, not a personal one. uri [Optional ; Not repeatable ; String] A link (URL) to the website of the entity mentioned in name. sources [Optional ; Not repeatable ; String] This element provides information on the source(s) of data that were used to generate the indicator. A source can refer to an organization (e.g., “Source: World Health Organization”), or to a dataset (e.g., for a national poverty headcount indicator, the sources will likely be a list of sample household surveys). In sources, we are mainly interested in the latter. When a series in a database is a series extracted from another database (e.g., when the World Bank World Development Indicators include a series from the World Health Organization in its database), the source organization should be mentioned in the authoring_entity element of the schema. The sources element is a repeatable element. Note 1: In some cases, the source of a specific value in a database will be stored as an attribute of the data file (e.g., as a “footnote” attached to a specific cell. If the sources are listed in the data file, they may but do not need to be stored in the metadata. Note 2: the schema also contains an element “data_collection” that would be used to describe a specific data collection activity from which an indicator is derived. &quot;sources&quot;: [ { &quot;id&quot;: &quot;string&quot;, &quot;name&quot;: &quot;string&quot;, &quot;organization&quot;: &quot;string&quot;, &quot;type&quot;: &quot;string&quot;, &quot;note&quot;: &quot;string&quot; } ] id [Required ; String] This element records the unique identifier of a source. It is a required element. If the source does not have a specific unique identifier, a sequential number can be used. If the source is a dataset or database that has its own unique identifier (possibly a DOI), this identifier should be used. name [Optional ; String] The name (title, or label) of the source. organization [Optional ; String] The organization responsible for the source data. type [Optional ; String] The type of source, e.g. “household survey”, “administrative data”, or “external database”. note [Optional ; String] This element can be used to provide additional information regarding the source data. sources_note [Optional ; Not repeatable ; String] Additional information on the source(s) of data used to generate the series or indicator. keywords [Optional ; Repeatable] Words or phrases that describe salient aspects of a data collection’s content. Can be used for building keyword indexes and for classification and retrieval purposes. A controlled vocabulary can be employed. Keywords should be selected from a standard thesaurus, preferably an international, multilingual thesaurus. &quot;keywords&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;vocabulary&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ] name [Required ; String ; Non repeatable] Keyword (or phrase). Keywords summarize the content or subject matter of the study. vocabulary [Optional ; Not repeatable ; String] Controlled vocabulary from which the keyword is extracted, if any. uri [Optional ; Not repeatable ; String] The URI of the controlled vocabulary used, if any. acronyms [Optional ; Repeatable] The acronyms element is used to document the meaning of all acronyms used in the metadata of a series. If some acronyms are well known (like “GDP”, or “IMF” for example), others may be less obvious or could be uncertain (does “PPP” mean “public-private partnership”, or “purchasing power parity”?). In any case, providing a list of acronyms with their meaning will help users and make your metadata more discoverable. Note that acronyms should not include country codes used in the documentation of the geographic coverage of the data. &quot;acronyms&quot;: [ { &quot;acronym&quot;: &quot;string&quot;, &quot;expansion&quot;: &quot;string&quot;, &quot;occurrence&quot;: 0 } ] acronym [Required ; Not repeatable ; String] An acronym referenced in the series metadata (e.g. “GDP”). expansion [Required ; Not repeatable ; String] The expansion of the acronym, i.e. the full name or title that it represents (e.g., “Gross Domestic Product”). occurrence [Optional ; Not repeatable ; Numeric] This numeric element can be used to indicate the number of times the acronym is mentioned in the metadata. The element will rarely be used. errata [Optional ; Repeatable] This element is used to provide information on detected errors in the data or metadata for the series, and on the measures taken to remedy them. &quot;errata&quot;: [ { &quot;date&quot;: &quot;string&quot;, &quot;description&quot;: &quot;string&quot; } ] date [Required ; Repeatable ; String] The date the erratum was published. description [Required ; Repeatable ; String] A description of the error and remedy measures. notes [Optional ; Repeatable] This element is open and reserved for explanatory notes deemed useful to the users of the data. Notes should account for additional information that might help: replicate the series; access the data and research area, or discoverability in general. &quot;notes&quot;: [ { &quot;note&quot;: &quot;string&quot; } ] note [Required ; Repeatable ; String] The note itself. related_indicators [Optional ; Repeatable] This element allows to reference indicators that are often associated with the indicator being documented. &quot;related_indicators&quot;: [ { &quot;code&quot;: &quot;string&quot;, &quot;label&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ] code [Optional ; Not repeatable ; String] The code for the indicator that is referenced in the document. It will likely be an ID that is used by that indicator. label [Optional ; Not repeatable ; String] The name or label of the indicator that is associated with the indicator being documented. uri [Optional ; Not repeatable ; String] A link to the related indicator. compliance [Optional ; Repeatable] For some indicators, international standards have been established. This is for example the case of indicators like the unemployment or unemployment rate, for which the International Conference of Labour Statisticians defines the standards concepts and methods. The compliance element is used to document the compliance of a series with one or multiple national or international standards. &quot;compliance&quot;: [ { &quot;standard&quot;: &quot;string&quot;, &quot;abbreviation&quot;: &quot;string&quot;, &quot;custodian&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ] standard [Optional ; Not repeatable ; String] The name of the standard that the series complies with. This name will ideally include a label and a version or a date. For example: “International Standard Industrial Classification of All Economic Activities (ISIC) Revision 4, published in 2007” abbreviation [Optional ; Not repeatable ; String] The acronym of the standard that the series complies with. custodian [Optional ; Not repeatable ; String] The organization that maintains the standard that is being used for compliance. For example: “United Nations Statistics Division”. uri [Optional ; Not repeatable ; String] A link to a public website site where information on the compliance standard can be obtained. For example: “https://unstats.un.org/unsd/classifications/Family/Detail/27 framework [Optional ; Repeatable] Some national, regional, and international agencies develop monitoring frameworks, with goals, targets, and indicators. Some well-known examples are the Millennium Development Goals and the Sustainable Development Goals which establish international goals for human development, or the World Summit for Children (1990) which set international goals in the areas of child survival, development and protection, supporting sector goals such as women’s health and education, nutrition, child health, water and sanitation, basic education, and children in difficult circumstances. The framework element is used to link an indicator or series to the framework, goal, and target associated with it. &quot;framework&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;abbreviation&quot;: &quot;string&quot;, &quot;custodian&quot;: &quot;string&quot;, &quot;description&quot;: &quot;string&quot;, &quot;goal_id&quot;: &quot;string&quot;, &quot;goal_name&quot;: &quot;string&quot;, &quot;goal_description&quot;: &quot;string&quot;, &quot;target_id&quot;: &quot;string&quot;, &quot;target_name&quot;: &quot;string&quot;, &quot;target_description&quot;: &quot;string&quot;, &quot;indicator_id&quot;: &quot;string&quot;, &quot;indicator_name&quot;: &quot;string&quot;, &quot;indicator_description&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot;, &quot;notes&quot;: &quot;string&quot; } ] name [Optional ; Not repeatable ; String] The name of the framework. abbreviation [Optional ; Not repeatable ; String] The abreviation of the name of the framework. custodian [Optional ; Not repeatable ; String] The name of the organization that is the official custodian of the framework. description [Optional ; Not repeatable ; String] A brief description of the framework. goal_id [Optional ; Not repeatable ; String] The identifier of the Goal that the indicator or series is associated with. goal_name [Optional ; Not repeatable ; String] The name (label) of the Goal that the indicator or series is associated with. goal_description [Optional ; Not repeatable ; String] A brief description of the Goal that the indicator or series is associated with. target_id [Optional ; Not repeatable ; String] The identifier of the Target that the indicator or series is associated with. target_name [Optional ; Not repeatable ; String] The name (label) of the Target that the indicator or series is associated with. target_description [Optional ; Not repeatable ; String] A brief description of the Target that the indicator or series is associated with. indicator_id [Optional ; Not repeatable ; String] The identifier of the indicator, as provided in the framework (this is not the idno identifier). indicator_name [Optional ; Not repeatable ; String] The name of the indicator, as provided in the framework (which may be different from the name provided in name) indicator_description [Optional ; Not repeatable ; String] A brief description of the indicator, as provided in the framework. uri [Optional ; Not repeatable ; String] A link to a website providing detailed information on the framework, its goals, targets, and indicators. notes [Optional ; Not repeatable ; String] Any additional information on the relationship between the indicator/series and the framework. series_group [Optional ; Repeatable] The group(s) the indicator belongs to. Groups can be create to organize indicators/series by theme, producer, or other. &quot;series_groups&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;description&quot;: &quot;string&quot;, &quot;version&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ] name [Optional ; Not repeatable ; String] The name of the group. description [Optional ; Not repeatable ; String] A brief description of the group. version [Optional ; Not repeatable ; String] The version of the grouping. uri [Optional ; Not repeatable ; String] A link to a public website site where information on the grouping can be obtained. contacts [Optional ; Repeatable] The contacts element provides the public interface for questions associated with the production of the indicator or time series. &quot;contacts&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;role&quot;: &quot;string&quot;, &quot;affiliation&quot;: &quot;string&quot;, &quot;email&quot;: &quot;string&quot;, &quot;telephone&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ] name [Optional ; Not repeatable ; String] The name of the contact person that should be contacted. Instead of the name of an individual (which would be subject to change and require frequent update of the metadata), a title can be provided here (e.g. “data helpdesk”). role [Optional ; Not repeatable ; String] The specific role of the contact person mentioned in name. This will be used when multiple contacts are listed, and is intended to help users direct their questions and requests to the right contact person. affiliation [Optional ; Not repeatable ; String] The organization or affiliation of the contact person mentioned in name. email [Optional ; Not repeatable ; String] The email address of the person or organization mentioned in name. Avoid using personal email accounts; the use of an anonymous email is recommended (e.g, “helpdesk@….org”) telephone [Optional ; Not repeatable ; String] The phone number of the person or organization mentioned in name. uri [Optional ; Not repeatable ; String] The URI of the agency (typically, a URL to a “contact us” web page). 8.2.2 Provenance provenance [Optional ; Repeatable] Metadata can be programmatically harvested from external catalogs. The provenance group of elements is used to store information on the provenance of harvested metadata, and on alterations that may have been made to the harvested metadata. &quot;provenance&quot;: [ { &quot;origin_description&quot;: { &quot;harvest_date&quot;: &quot;string&quot;, &quot;altered&quot;: true, &quot;base_url&quot;: &quot;string&quot;, &quot;identifier&quot;: &quot;string&quot;, &quot;date_stamp&quot;: &quot;string&quot;, &quot;metadata_namespace&quot;: &quot;string&quot; } } ] origin_description [Required ; Not repeatable] The origin_description elements are used to describe when and from where metadata have been extracted or harvested. harvest_date [Required ; Not repeatable ; String] The date and time the metadata were harvested, entered in ISO 8601 format. altered [Optional ; Not repeatable ; Boolean] A boolean variable (“true” or “false”; “true by default) indicating whether the harvested metadata have been modified before being re-published. In many cases, the unique identifier of the study (element idno in the Document Description / Title Statement section) will be modified when published in a new catalog. base_url [Required ; Not repeatable ; String] The URL from where the metadata were harvested. identifier [Optional ; Not repeatable ; String] The unique dataset identifier (idno element) in the source catalog. When harvested metadata are re-published in a new catalog, the identifier will likely be changed. The identifier element in provenance is used to maintain traceability. date_stamp [Optional ; Not repeatable ; String] The date stamp (in UTC date format) of the metadata record in the originating repository (this should correspond to the date the metadata were last updated in the source catalog). metadata_namespace [Optional ; Not repeatable ; String] @@@@@@@ 8.2.3 Tags tags [Optional ; Repeatable] As shown in section 1.7 of the Guide, tags, when associated with tag_groups, provide a powerful and flexible solution to enable custom facets (filters) in data catalogs. &quot;tags&quot;: [ { &quot;tag&quot;: &quot;string&quot;, &quot;tag_group&quot;: &quot;string&quot; } ] tag [Required ; Not repeatable ; String] A user-defined tag. tag_group [Optional ; Not repeatable ; String] A user-defined group (optional) to which the tag belongs. Grouping tags allows implementation of controlled facets in data catalogs. lda_topics [Optional ; Not repeatable] &quot;lda_topics&quot;: [ { &quot;model_info&quot;: [ { &quot;source&quot;: &quot;string&quot;, &quot;author&quot;: &quot;string&quot;, &quot;version&quot;: &quot;string&quot;, &quot;model_id&quot;: &quot;string&quot;, &quot;nb_topics&quot;: 0, &quot;description&quot;: &quot;string&quot;, &quot;corpus&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ], &quot;topic_description&quot;: [ { &quot;topic_id&quot;: null, &quot;topic_score&quot;: null, &quot;topic_label&quot;: &quot;string&quot;, &quot;topic_words&quot;: [ { &quot;word&quot;: &quot;string&quot;, &quot;word_weight&quot;: 0 } ] } ] } ] We mentioned in Chapter 1 the importance of producing rich metadata, and the opportunities that machine learning offers to enrich (or “augment”) metadata in a largely automated manner. One application of machine learning, more specifically of natural language processing, to enrich metadata related to publications is the topic extraction using Latent Dirichlet Allocation (LDA) models. LDA models must be trained on large corpora of documents. They do not require any pre-defined taxonomy of topics. The approach consists of “clustering” words that are likely to appear in similar contexts (the number of “clusters” or “topics” is a parameter provided when training a model). Clusters of related words form “topics”. A topic is thus defined by a list of keywords, each one of them provided with a score indicating its importance in the topic. Typically, the top 10 words that represent a topic will be used to describe it. The description of the topics covered by a document can be indexed to improve searchability (possibly in a selective manner, by setting thresholds on the topic shares and word weights). Once an LDA topic model has been trained, it can be used to infer the topic composition of any text. In the case of indicators and time series, this text will be a concatenation of some metadata elements including the series’ name, definitions, keywords, concepts, and possibly others. This inference will then provide the share that each topic represents in the metadata. The sum of all represented topics is 1 (100%). The lda_topics element includes the following metadata fields. An example in R was provided in Chapter 4 - Documents. model_info [Optional ; Not repeatable] Information on the LDA model. source [Optional ; Not repeatable ; String] The source of the model (typically, an organization). author [Optional ; Not repeatable ; String] The author(s) of the model. version [Optional ; Not repeatable ; String] The version of the model, which could be defined by a date or a number. model_id [Optional ; Not repeatable ; String] The unique ID given to the model. nb_topics [Optional ; Not repeatable ; Numeric] The number of topics in the model (the number of topics to be extracted from a corpus is the key parameter of any LDA model). description [Optional ; Not repeatable ; String] A brief description of the model. corpus [Optional ; Not repeatable ; String] A brief description of the corpus on which the LDA model was trained. uri [Optional ; Not repeatable ; String] A link to a web page where additional information on the model is available. topic_description [Optional ; Repeatable] The topic composition extracted from selected elements of the series metadata (typically, the name, definitions, and concepts). topic_id [Optional ; Not repeatable ; String] The identifier of the topic; this will often be a sequential number (Topic 1, Topic 2, etc.). topic_score [Optional ; Not repeatable ; Numeric] The share of the topic in the metadata (%). topic_label [Optional ; Not repeatable ; String] The label of the topic, if any (not automatically generated by the LDA model). topic_words [Optional ; Not repeatable] The list of N keywords describing the topic (e.g., the top 5 words). word [Optional ; Not repeatable ; String] The word. word_weight [Optional ; Not repeatable ; Numeric] The weight of the word in the definition of the topic. lda_topics = list( list( model_info = list( list(source = &quot;World Bank, Development Data Group&quot;, author = &quot;A.S.&quot;, version = &quot;2021-06-22&quot;, model_id = &quot;Mallet_WB_75&quot;, nb_topics = 75, description = &quot;LDA model, 75 topics, trained on Mallet&quot;, corpus = &quot;World Bank Documents and Reports (1950-2021)&quot;, uri = &quot;&quot;)) ), topic_description = list( list(topic_id = &quot;topic_27&quot;, topic_score = 32, topic_label = &quot;Education&quot;, topic_words = list(list(word = &quot;school&quot;, word_weight = &quot;&quot;) list(word = &quot;teacher&quot;, word_weight = &quot;&quot;), list(word = &quot;student&quot;, word_weight = &quot;&quot;), list(word = &quot;education&quot;, word_weight = &quot;&quot;), list(word = &quot;grade&quot;, word_weight = &quot;&quot;)), list(topic_id = &quot;topic_8&quot;, topic_score = 24, topic_label = &quot;Gender&quot;, topic_words = list(list(word = &quot;women&quot;, word_weight = &quot;&quot;) list(word = &quot;gender&quot;, word_weight = &quot;&quot;), list(word = &quot;man&quot;, word_weight = &quot;&quot;), list(word = &quot;female&quot;, word_weight = &quot;&quot;), list(word = &quot;male&quot;, word_weight = &quot;&quot;)), list(topic_id = &quot;topic_39&quot;, topic_score = 22, topic_label = &quot;Forced displacement&quot;, topic_words = list(list(word = &quot;refugee&quot;, word_weight = &quot;&quot;) list(word = &quot;programme&quot;, word_weight = &quot;&quot;), list(word = &quot;country&quot;, word_weight = &quot;&quot;), list(word = &quot;migration&quot;, word_weight = &quot;&quot;), list(word = &quot;migrant&quot;, word_weight = &quot;&quot;)), list(topic_id = &quot;topic_40&quot;, topic_score = 11, topic_label = &quot;Development policies&quot;, topic_words = list(list(word = &quot;development&quot;, word_weight = &quot;&quot;) list(word = &quot;policy&quot;, word_weight = &quot;&quot;), list(word = &quot;national&quot;, word_weight = &quot;&quot;), list(word = &quot;strategy&quot;, word_weight = &quot;&quot;), list(word = &quot;activity&quot;, word_weight = &quot;&quot;)) ) ) ) embeddings [Optional ; Repeatable] In Chapter 1 (section 1.n), we briefly introduced the concept of word embeddings and their use in implementation of semantic search tools. Word embedding models convert text (words, phrases, documents) into large-dimension numeric vectors (e.g., a vector of 100 or 200 numbers) that are representative of the semantic content of the text. The vectors are generated by submitting a text to a pre-trained word embedding model (possibly via an API). The word vectors do not have to be stored in the series/indicator metadata to be exploited by search engines. When a semantic search tool is implemented in a catalog, the vectors will be stored in a database end processed by a tool like Milvus. A metadata element is however provided to store the vectors for preservation and sharing purposes. This block of metadata elements is repeatable, allowing multiple vectors to be stored. When using vectors in a search engine, it is critical to only use vectors generated by one same model. &quot;embeddings&quot;: [ { &quot;id&quot;: &quot;string&quot;, &quot;description&quot;: &quot;string&quot;, &quot;date&quot;: &quot;string&quot;, &quot;vector&quot;: null } ] The embeddings element contains four metadata fields: id [Optional ; Not repeatable ; String] A unique identifier of the word embedding model used to generate the vector. description [Optional ; Not repeatable ; String] A brief description of the model. This may include the identification of the producer, a description of the corpus on which the model was trained, the identification of the software and algorithm used to train the model, the size of the vector, etc. date [Optional ; Not repeatable ; String] The date the model was trained (or a version date for the model). vector [Required ; Not repeatable ; @@@@] The numeric vector representing the series metadata. 8.2.4 Additional additional [Optional ; Not repeatable] The additional element allows data curators to add their own metadata elements to the schema. All custom elements must be added within the additional block; embedding them elsewhere in the schema would cause schema validation to fail. 8.3 Generating and publishing compliant metadata - Complete example We use a series from the World Bank’s World Development Indicators (WDI 2021) as an example: the series “Poverty headcount ratio at $1.90 a day (2011 PPP) (% of population)” Note that we only show how metadata are generated and published in a NADA catalog. We do not demonstrate the (optional) publishing of the underlying data in a MongoDB database, which makes the data accessible via API and allows activation of data visualizations in the NADA catalog. This is covered in the NADA documentation. 8.3.1 Use of AI for metadata augmentation The discoverability of indicators by keyword-based search engines can be significantly improved by the inclusion of a list of relevant keywords in the metadata. These keywords can be synonyms or terms and concepts that are closely associated with the indicator. Identifying the most relevant related keywords requires subject matter expertise. But this can be considerably facilitated by the use of AI tools. We provide below an example of a query submitted to chatGPT. The proposed terms returned by the application MUST be reviewed by a subject matter expert. But having the proposed list (which can be copy-pasted then edited in a Metadata Editor or in a script) will make the process very efficient. image The returned list is as follows: Poverty Headcount ratio Income Consumption Living standards Basic needs Poverty line Purchasing power parity (PPP) International poverty line Economic development Social inequality Human development Poverty reduction Extreme poverty Global poverty Developing countries Wealth distribution Rural poverty Urban poverty Household income Inclusive growth Multidimensional poverty Income inequality Poverty gap Human capital Poverty trap Food security Employment Vulnerability Social protection Poverty measurement Poverty alleviation Social exclusion Targeted interventions Poverty incidence Poverty dynamics Poverty cycle Equity Income distribution Sustainable development 8.3.2 Using R # The code below generates metadata at the database level (object &quot;wdi_database&quot;) # and for a time series (object &quot;this_series&quot;). # It then publishes the metadata in a NADA catalog using the R package NADAR. # It also publishes related materials as &quot;external resources&quot;. library(nadar) # ---------------------------------------------------------------------------------- # Enter credentials (API confidential key) and catalog URL my_keys &lt;- read.csv(&quot;C:/confidential/my_API_keys.csv&quot;, header=F, stringsAsFactors=F) set_api_key(&quot;my_keys[1,1&quot;) set_api_url(&quot;https://.../index.php/api/&quot;) set_api_verbose(FALSE) # ---------------------------------------------------------------------------------- setwd(&quot;C:/my_indicators/&quot;) thumb = &quot;poverty.JPG&quot; # Image to be used as thumbnail in the data catalog db_id = &quot;WB_WDI_2021_09_15&quot; # The WDI database identifier # Document the indicator (Poverty headcount ratio at $1.90 a day) this_series = list( metadata_creation = list( producers = list( list(name = &quot;Development Data Group&quot;, abbr = &quot;DECDG&quot;, affiliation = &quot;World Bank&quot;, role = &quot;Metadata curation&quot;) ), prod_date = &quot;2021-10-15&quot;, version = &quot;Example v 1.0&quot; ), series_description = list( idno = &quot;SI.POV.DDAY&quot;, name = &quot;Poverty headcount ratio at $1.90 a day (2011 PPP) (% of population)&quot;, database_id = db_id, # To attach the database metadata to the series metadata measurement_unit = &quot;% of population&quot;, periodicity = &quot;Annual&quot;, definition_short = &quot;Poverty headcount ratio at $1.90 a day is the percentage of the population living on less than $1.90 a day at 2011 international prices. As a result of revisions in PPP exchange rates, poverty rates for individual countries cannot be compared with poverty rates reported in earlier editions.&quot;, definition_references = list( list(source = &quot;World Bank, Development Data Group&quot;, uri = &quot;https://databank.worldbank.org/metadataglossary/millennium-development-goals/series/SI.POV.DDAY&quot; ) ), methodology = &quot;International comparisons of poverty estimates entail both conceptual and practical problems. Countries have different definitions of poverty, and consistent comparisons across countries can be difficult. Local poverty lines tend to have higher purchasing power in rich countries, where more generous standards are used, than in poor countries. Since World Development Report 1990, the World Bank has aimed to apply a common standard in measuring extreme poverty, anchored to what poverty means in the world&#39;s poorest countries. The welfare of people living in different countries can be measured on a common scale by adjusting for differences in the purchasing power of currencies. The commonly used $1 a day standard, measured in 1985 international prices and adjusted to local currency using purchasing power parities (PPPs), was chosen for World Development Report 1990 because it was typical of the poverty lines in low-income countries at the time. As differences in the cost of living across the world evolve, the international poverty line has to be periodically updated using new PPP price data to reflect these changes. The last change was in October 2015, when we adopted $1.90 as the international poverty line using the 2011 PPP. Prior to that, the 2008 update set the international poverty line at $1.25 using the 2005 PPP. Poverty measures based on international poverty lines attempt to hold the real value of the poverty line constant across countries, as is done when making comparisons over time. The $3.20 poverty line is derived from typical national poverty lines in countries classified as Lower Middle Income. The $5.50 poverty line is derived from typical national poverty lines in countries classified as Upper Middle Income. Early editions of World Development Indicators used PPPs from the Penn World Tables to convert values in local currency to equivalent purchasing power measured in U.S dollars. Later editions used 1993, 2005, and 2011 consumption PPP estimates produced by the World Bank. The current extreme poverty line is set at $1.90 a day in 2011 PPP terms, which represents the mean of the poverty lines found in 15 of the poorest countries ranked by per capita consumption. The new poverty line maintains the same standard for extreme poverty - the poverty line typical of the poorest countries in the world - but updates it using the latest information on the cost of living in developing countries. As a result of revisions in PPP exchange rates, poverty rates for individual countries cannot be compared with poverty rates reported in earlier editions. The statistics reported here are based on consumption data or, when unavailable, on income surveys. Analysis of some 20 countries for which income and consumption expenditure data were both available from the same surveys found income to yield a higher mean than consumption but also higher inequality. When poverty measures based on consumption and income were compared, the two effects roughly cancelled each other out: there was no significant statistical difference.&quot;, limitation = &quot;Despite progress in the last decade, the challenges of measuring poverty remain. The timeliness, frequency, quality, and comparability of household surveys need to increase substantially, particularly in the poorest countries. The availability and quality of poverty monitoring data remains low in small states, countries with fragile situations, and low-income countries and even some middle-income countries. The low frequency and lack of comparability of the data available in some countries create uncertainty over the magnitude of poverty reduction. Besides the frequency and timeliness of survey data, other data quality issues arise in measuring household living standards. The surveys ask detailed questions on sources of income and how it was spent, which must be carefully recorded by trained personnel. Income is generally more difficult to measure accurately, and consumption comes closer to the notion of living standards. And income can vary over time even if living standards do not. But consumption data are not always available: the latest estimates reported here use consumption data for about two-thirds of countries. However, even similar surveys may not be strictly comparable because of differences in timing or in the quality and training of enumerators. Comparisons of countries at different levels of development also pose a potential problem because of differences in the relative importance of the consumption of nonmarket goods. The local market value of all consumption in kind (including own production, particularly important in underdeveloped rural economies) should be included in total consumption expenditure but may not be. Most survey data now include valuations for consumption or income from own production, but valuation methods vary.&quot;, topics = list( list(id = &quot;1&quot;, name = &quot;Economics, Consumption and consumer behaviour&quot;, vocabulary = &quot;&quot;, uri = &quot;https://vocabularies.cessda.eu/vocabulary/TopicClassification&quot;), list(id = &quot;2&quot;, name = &quot;Economics, Economic conditions and indicators&quot;, vocabulary = &quot;CESSDA Version 4.1&quot;, uri = &quot;https://vocabularies.cessda.eu/vocabulary/TopicClassification&quot;), list(id = &quot;3&quot;, name = &quot;Economics, Economic systems and development&quot;, vocabulary = &quot;CESSDA Version 4.1&quot;, uri = &quot;https://vocabularies.cessda.eu/vocabulary/TopicClassification&quot;), list(id = &quot;4&quot;, name = &quot;Social stratification and groupings, Equality, inequality and social exclusion&quot;, vocabulary = &quot;CESSDA Version 4.1&quot;, uri = &quot;https://vocabularies.cessda.eu/vocabulary/TopicClassification&quot;) ), relevance = &quot;The World Bank Group is committed to reducing extreme poverty to 3 percent or less, globally, by 2030. Monitoring poverty is important on the global development agenda as well as on the national development agenda of many countries. The World Bank produced its first global poverty estimates for developing countries for World Development Report 1990: Poverty (World Bank 1990) using household survey data for 22 countries (Ravallion, Datt, and van de Walle 1991). Since then there has been considerable expansion in the number of countries that field household income and expenditure surveys. The World Bank&#39;s Development Research Group maintains a database that is updated annually as new survey data become available (and thus may contain more recent data or revisions) and conducts a major reassessment of progress against poverty every year. PovcalNet is an interactive computational tool that allows users to replicate these internationally comparable $1.90, $3.20 and $5.50 a day global, regional and country-level poverty estimates and to compute poverty measures for custom country groupings and for different poverty lines. The Poverty and Equity Data portal provides access to the database and user-friendly dashboards with graphs and interactive maps that visualize trends in key poverty and inequality indicators for different regions and countries. The country dashboards display trends in poverty measures based on the national poverty lines alongside the internationally comparable estimates, produced from and consistent with PovcalNet.&quot;, time_periods = list(list(start = &quot;1960&quot;, end = &quot;2020&quot;)), geographic_units = list( list(name = &quot;Afghanistan&quot;, code = &quot;AFG&quot;, type = &quot;country/economy&quot;), list(name = &quot;Africa Eastern and Southern&quot;, code = &quot;AFE&quot;, type = &quot;geographic region&quot;), list(name = &quot;Africa Western and Central&quot;, code = &quot;AFW&quot;, type = &quot;geographic region&quot;), list(name = &quot;Albania&quot;, code = &quot;ALB&quot;, type = &quot;country/economy&quot;), list(name = &quot;Algeria&quot;, code = &quot;DZA&quot;, type = &quot;country/economy&quot;), list(name = &quot;Angola&quot;, code = &quot;AGO&quot;, type = &quot;country/economy&quot;), list(name = &quot;Aruba&quot;, code = &quot;ABW&quot;, type = &quot;country/economy&quot;) # ... and many more - In a real situation, this would be programmatically extracted from the data ), license = list(name = &quot;CC BY-4.0&quot;, uri = &quot;https://creativecommons.org/licenses/by/4.0/&quot;), api_documentation = list( description = &quot;See the Developer Information webpage for detailed documentation of the API&quot;, uri = &quot;https://datahelpdesk.worldbank.org/knowledgebase/topics/125589-developer-information&quot; ), source = &quot;World Bank, Development Data Group (DECDG) and Poverty and Inequality Global Practice. Data are based on primary household survey data obtained from government statistical agencies and World Bank country departments. Data for high-income economies are from the Luxembourg Income Study database. For more information and methodology, see PovcalNet website: http://iresearch.worldbank.org/PovcalNet/home.aspx&quot;, keywords = list( list(name = &quot;poverty rate&quot;), list(name = &quot;poverty incidence&quot;), list(name = &quot;global poverty line&quot;), list(name = &quot;international poverty line&quot;), list(name = &quot;welfare&quot;), list(name = &quot;prosperity&quot;), list(name = &quot;inequality&quot;), list(name = &quot;income&quot;) ), acronyms = list( list(acronym = &quot;PPP&quot;, expansion = &quot;Purchasing Power Parity&quot;) ), related_indicators = list( list(code = &quot;SI.POV.GAPS&quot;, label = &quot;Poverty gap at $1.90 a day (2011 PPP) (%)&quot;, uri = &quot;https://databank.worldbank.org/source/millennium-development-goals/Series/SI.POV.GAPS&quot;), list(code = &quot;SI.POV.NAHC&quot;, label = &quot;Poverty headcount ratio at national poverty lines (% of population)&quot;, uri = &quot;https://databank.worldbank.org/source/millennium-development-goals/Series/SI.POV.NAHC&quot;) ), framework = list( list(name = &quot;Sustainable Development Goals (SDGs)&quot;, description = &quot;The 2030 Agenda for Sustainable Development, adopted by all United Nations Member States in 2015, provides a shared blueprint for peace and prosperity for people and the planet, now and into the future. At its heart are the 17 Sustainable Development Goals (SDGs), which are an urgent call for action by all countries - developed and developing - in a global partnership.&quot;, goal_id = &quot;SDG Goal 1&quot;, goal_name = &quot;End poverty in all its forms everywhere&quot;, target_id = &quot;SDG Target 1.1&quot;, target_name = &quot;By 2030, eradicate extreme poverty for all people everywhere, currently measured as people living on less than $1.25 a day&quot;, indicator_id = &quot;SDG Indicator 1.1.1&quot;, indicator_name = &quot;Proportion of population below the international poverty line, by sex, age, employment status and geographical location (urban/rural)&quot;, uri = &quot;https://sdgs.un.org/goals&quot;) ) ) ) # Publish the metadata in NADA, with a link to the WDI website # Database-level metadata timeseries_database_add(idno = db_id, published = 1, overwrite = &quot;yes&quot;, metadata = wdi_database) # Indicator-level metadata timeseries_add( idno = this_series$series_description$idno, repositoryid = &quot;central&quot;, published = 1, overwrite = &quot;yes&quot;, metadata = this_series, thumbnail = thumb ) # Add a link to the WDI website as an external resource external_resources_add( title = &quot;World Development Indicators website&quot;, idno = this_series$series_description$idno, dctype = &quot;web&quot;, file_path = &quot;https://datatopics.worldbank.org/world-development-indicators/&quot;, overwrite = &quot;yes&quot; ) After uploading the above metadata, and activating some visualization widgets, the result in NADA will be as follows (not all metadata displayed here; see https://nada-demo.ihsn.org/index.php/catalog/study/SI.POV.DDAY for the full view): 8.3.3 Using Python The equivalent in Python of the R script provided above is as follows. # Same example in Python @@@@@@@@ "],["chapter09.html", "Chapter 9 Statistical tables 9.1 Introduction 9.2 Anatomy of a table 9.3 Schema description 9.4 Complete examples", " Chapter 9 Statistical tables 9.1 Introduction A statistical table (cross tabulation or contingency table) is a summary presentation of data. The OECD Glossary of Statistical Terms defines it as “observation data gained by a purposeful aggregation of statistical microdata conforming to statistical methodology [organized in] groups or aggregates, such as counts, means, or frequencies.” Tables are produced as an array of rows and columns that display numeric aggregates in a clearly labeled fashion. They may have a complex structure and become quite elaborate. They are typically found in publications such as statistical yearbooks, census and survey reports, research papers, or published on-line. Statistical tables can be understood by a broad audience. In some cases, they may be the only publicly-available output of a data collection activity. Even when other output is available –such as microdata, dashboards, or databases accessible via user interfaces or APIs– statistical tables are an important component of data dissemination. It is thus important to make tables as discoverable as possible. The schema described in this chapter was designed to structure and foster the comprehensiveness of information on tables by rendering the pertinent metadata into a structured, machine-readable format. It is intended for the purpose of improving data discoverability. The schema is not intended to store information to programmatically re-create tables. The schema description is available at http://dev.ihsn.org/nada/api-documentation/catalog-admin/index.html#tag/Tables 9.2 Anatomy of a table The figure below, adapted from LabWrite Resources, provides an illustration of what statistical tables typically look like. The main parts of a table are highlighted. They provide a content structure for the metadata schema we describe in this chapter. Table number and title: Every table must have a title, and should have a number. Tables in yearbooks, report and papers are usually numbered in the order that they are referred to in the document. They can be numbered sequentially (Table 1, Table 2, and so on), by chapter (Table 1.1, Table 1.2, Table 2.1, …), or based on other reference system. The Table number typically precedes the table title. The title provides a description of the contents of the table. It should be concise and include the key elements shown in the table. Column spanner, column heads, and stub head: The column headings (and sub-headings) identify what data are listed in the table in a vertical arrangement. A column heading placed above the leftmost column is often referred to as the stubhead, and the column is the stub column. A heading that sits above two or more columns to indicate a certain grouping is referred to as a column spanner. Stubs: The horizontal headings and sub-headings of the rows are called row captions. Together, they form the stub. Table body: The actual data (values) in a table (containing for example percentages, means, or counts of certain variables) form the table body. Table spanner: A table spanner is located in the body of the table in order to divide the data in a table without changing the columns. Spanners go the entire length of the table. Table notes: Table notes are used to provide information that is not self-explanatory (e.g., to provide the expanded form of acronyms used in row or column captions). Table source: The source identifies the dataset(s) or database(s) that contain the data used to generate the table. This can for example be a survey or a census dataset. 9.3 Schema description The table schema contains six blocks of elements. The first block of three elements (repository_id, published, and overwrite) do not describe the table, but are used by the NADA cataloguing application to determine where and how the table metadata is published in the catalog. The second block, metadata_information, contains “metadata on the metadata” and is used mainly for archiving purpose. The third block, table_description, contains the elements used to describe the table and its production process. A fourth block provenance, is used to document the origin of metadata that may be harvested from other catalogs. The block tags is used to add information (in the form of words or short phrases) that will be useful to create facets in the a catalog user interface. Last, an empty block additional is provided as a container for additional metadata elements that users may want to create. { &quot;repositoryid&quot;: &quot;string&quot;, &quot;published&quot;: 0, &quot;overwrite&quot;: &quot;no&quot;, &quot;metadata_information&quot;: {}, &quot;table_description&quot;: {}, &quot;provenance&quot;: [], &quot;tags&quot;: [], &quot;lda_topics&quot;: [], &quot;embeddings&quot;: [], &quot;additional&quot;: { } } 9.3.1 Cataloguing parameters The following elements are used by the NADA application API (see the NADA documentation for more information): repositoryid: A NADA catalog can be composed of multiple collections. The repositoryid element identifies in which collection the table will be published. This collection must have been previously created in the catalog. By default, the table will be published in the central catalog (i.e. in no particular collection). published: The NADA catalog allows tables to be published (in which case they will be visible to users of the catalog) or unpublished (in which case they will only be visible by administrators). The default value is 0 (unpublished). Code 1 is used to set the status to “published”. overwrite: This element defines what action will be taken when a command is issued to add the table to a catalog and a table with the same identifier (element idno) is already in the catalog. By default, the command will not overwrite the existing table (the default value of overwrite is “no”). Set this parameter to “yes” to allow the existing table to be overwritten in the catalog. 9.3.2 Metadata information metadata_information [Optional, Not Repeatable] The metadata_information block is used to document the table metadata (not the table itself). It provides information on the process of generating the table metadata. This block is optional. The information it contains is useful to catalog administrators, not to the public. It is however recommended to enter at least the identification of the metadata producer, her/his affiliation, and the date the metadata were created. One reason for this is that metadata can be shared and harvested across catalogs/organizations, so the metadata produced by one organization can be found in other data centers (complying with standards and schema is precisely intended to facilitate inter-operability of catalogs and automated information sharing). &quot;metadata_information&quot;: { &quot;idno&quot;: &quot;string&quot;, &quot;title&quot;: &quot;string&quot;, &quot;producers&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;abbr&quot;: &quot;string&quot;, &quot;affiliation&quot;: &quot;string&quot;, &quot;role&quot;: &quot;string&quot; } ], &quot;production_date&quot;: &quot;string&quot;, &quot;version&quot;: &quot;string&quot; } idno [Optional, Not Repeatable, String] A unique identifier for the metadata document (the metadata document is the JSON file containing the table metadata). This is different from the table unique identifier (see section title_statement below), although the same identifier can be used, and it is good practice to generate identfiers that would maintain an easy connection between the metadata idno and the table idno. For example, if the unique identifier of the table is “TBL_0001”, the idno in the metadata_information could be “META_TBL_001”. title [Optional, Not Repeatable, String] The title of the metadata document (not necessarily the title of the table). producers [Optional, Repeatable] This refers to the producer(s) of the table metadata, not to the producer(s) of the table. This could for example be the data curator in a data center. Four elements can be used to provide information on the metadata producer(s): name [Optional, Not Repeatable, String] The name of the metadata producer/curator. An alternative to entering the name of the curator (e.g. for privacy protection purpose) is to enter the curator identifier (see the element abbr below) abbr [Optional, Not Repeatable, String] This element can be used to provide an identifier of the metadata producer/curator mentioned in name. affiliation [Optional, Not Repeatable, String] The affiliation of the metadata producer/curator mentioned in name. role [Optional, Not Repeatable, String] The specific role of the metadata producer/curator mentioned in name (applicable when more than one person was involved in the production of the metadata). production_date [Optional, Not Repeatable, String] The date the metadata (not the table) was produced. The date will preferably be entered in ISO 8601 format (YYYY-MM-DD). version [Optional, Not Repeatable, String] The version of the metadata (not the version of the table). my_table = list( # ... , metadata_information = list( idno = &quot;META_TBL_POP_PC2001_02-01&quot;, producers = list( list(name = &quot;John Doe&quot;, affiliation = &quot;National Data Center of Popstan&quot;) ), production_date = &quot;2020-12-27&quot;, version = &quot;version 1.0&quot; ), # ... ) 9.3.3 Table description table_description [Required, Not Repeatable] This section contains the metadata elements that describe the table itself. Not all elements will be required to fully document a table, but efforts should be made to provide as much and as detailed information as possible, as richer metadata will make the table more discoverable. &quot;table_description&quot;: { &quot;title_statement&quot;: {}, &quot;identifiers&quot;: [], &quot;authoring_entity&quot;: [], &quot;contributors&quot;: [], &quot;publisher&quot;: [], &quot;date_created&quot;: &quot;string&quot;, &quot;date_published&quot;: &quot;string&quot;, &quot;date_modified&quot;: &quot;string&quot;, &quot;version&quot;: &quot;string&quot;, &quot;description&quot;: &quot;string&quot;, &quot;table_columns&quot;: [], &quot;table_rows&quot;: [], &quot;table_footnotes&quot;: [], &quot;table_series&quot;: [], &quot;statistics&quot;: [], &quot;unit_observation&quot;: [], &quot;data_sources&quot;: [], &quot;time_periods&quot;: [], &quot;universe&quot;: [], &quot;ref_country&quot;: [], &quot;geographic_units&quot;: [], &quot;geographic_granularity&quot;: &quot;string&quot;, &quot;bbox&quot;: [], &quot;languages&quot;: [], &quot;links&quot;: [], &quot;api_documentation&quot;: [], &quot;publications&quot;: [], &quot;keywords&quot;: [], &quot;themes&quot;: [], &quot;topics&quot;: [], &quot;disciplines&quot;: [], &quot;definitions&quot;: [], &quot;classifications&quot;: [], &quot;rights&quot;: &quot;string&quot;, &quot;license&quot;: [], &quot;citation&quot;: &quot;string&quot;, &quot;confidentiality&quot;: &quot;string&quot;, &quot;sdc&quot;: &quot;string&quot;, &quot;contacts&quot;: [], &quot;notes&quot;: [], &quot;relations&quot;: [] } title_statement [Required, Not Repeatable] &quot;title_statement&quot;: { &quot;idno&quot;: &quot;string&quot;, &quot;table_number&quot;: &quot;string&quot;, &quot;title&quot;: &quot;string&quot;, &quot;sub_title&quot;: &quot;string&quot;, &quot;alternate_title&quot;: &quot;string&quot;, &quot;translated_title&quot;: &quot;string&quot; } idno [Required, Not Repeatable, String] A unique identifier to the table. Do not include spaces in the idno. This identifier must be unique to the catalog in which the table will be published. Some organizations have their own system to assign unique identifiers to tables. Ideally, an identifier that guarantees uniqueness globally will be used, such as a Digital Object Identifier (DOI) or an ISBN number. Note that a table may have more than one identifier. In such case, the element idno (as a non-repeatable element) will contain the main identifier (as selected as the “reference” one by the catalog administrator). The other identifiers will be provided in the element identifiers (see below). table_number [Optional, Not Repeatable, String] The table number. The table number will usually begin with the word “Table” followed by a numeric identifier such as: Table 1 or Table 2.1 etc. Different publications may use different ways to reference a table. This is particularly the case for publications that are part of a standard survey program and have well-defined table templates. The following are different ways to number a table: Type Description Sequential This is a sequential number given to each table produced and appearing within the publication (e.g., Table 1, Table 2 to Table n). Thematic Provides a numbering scheme based on the theme and a sequential number Chapter The tables can be numbered according to the chapter and then a sequential reference within that reference such as: Table 1.1 or Table 3.5 etc. Annex Tables in an annex will usually be given a letter number referring to the annex and a sequential number such as Table A.1 or Table B.3. Note A table number is usually set apart from the title with a colon. The word “Table” should never abbreviated. title [Required, Not Repeatable, String] The title of the table. The title provides a brief description of the content of the table. It should be concise and include the key elements shown in the table. There are varying styles for writing a table title. A consistent style should be applied to all tables published in a catalog. sub_title [Optional, Not Repeatable, String] A subtitle can provide further descriptive or explanatory content to the table. alternate_title [Optional, Not Repeatable, String] An alternate title for the table. translated_title [Optional, Not Repeatable, String] A translation of the title. my_table = list( # ... table_description = list( title_statement = list( idno = &quot;EXAMPLE_TBL_001&quot;, table_number = &quot;Table 1.0&quot;, title = &quot;Resident population by age group, sex, and area of residence, 2020&quot;, sub_title = &quot;District of X, as of June 30&quot;, translated_title = &quot;Population résidente par groupe d&#39;âge, sexe et zone de résidence, 2020 (district X, au 30 juin)&quot; ), # ... ) ) identifiers [Optional ; Repeatable] This element is used to enter document identifiers other than the catalog identifier entered in the title_statement (idno). It can for example be a Digital Object Identifier (DOI). The identifier entered in the title_statement can be repeated here (the title_statement does not provide a type parameter; if a DOI or other standard reference ID is used as idno, it is recommended to repeat it here with the identification of its type). &quot;identifiers&quot;: [ { &quot;type&quot;: &quot;string&quot;, &quot;identifier&quot;: &quot;string&quot; } ] type [Optional, Not Repeatable, String] The type of unique ID, e.g. “DOI”. identifier [Required, Not Repeatable, String] The identifier itself. my_table = list( # ... , table_description = list( # ... , identifiers = list( type = &quot;DOI&quot;, identifier = &quot;XXX.XXX.XXXX&quot; ), # ... ) ) authoring_entity [Optional, Not Repeatable] The authoring entity identifies the person(s) or organization(s) responsible for the production of the table. An authoring entity is identified by its name, affiliation, abbreviation, URI, and author’s identifiers (if any). &quot;authoring_entity&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;affiliation&quot;: &quot;string&quot;, &quot;abbreviation&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot;, &quot;author_id&quot;: [ { &quot;type&quot;: null, &quot;id&quot;: null } ] } ] name [Optional, Not Repeatable, String] The name of person(s) or organization responsible for the production and content of the table. affiliation [Optional, Not Repeatable, String] The affiliation of the person(s) or organization(s) mentioned in name. abbreviation [Optional, Not Repeatable, String] The abbreviation (acronym) of the organization mentioned in name. uri [Optional, Not Repeatable, String] The URI can be a link to the website, or the email address, of the authoring entity mentioned in name. author_id [Optional ; Repeatable] The author identifier in a registry of academic researchers such as the Open Researcher and Contributor ID (ORCID). type [Optional ; Not repeatable ; String] The type of identifier, i.e. the identification of the registry that assigned the author’s identifier, e.g. “ORCID”. id [Optional ; Not repeatable ; String] The identifier of the author in the registry mentioned in type. my_table = list( # ... , table_description = list( # ... , authoring_entity = list( name = &quot;John Doe&quot;, affiliation = &quot;National Research Center, Popstan&quot;, abbreviation = &quot;NRC&quot;, uri = &quot;www. ...&quot;, author_id = list( list(type = &quot;ORCID&quot;, id = &quot;XYZ123&quot;) ) ), # ... ) ) contributors [Optional, Repeatable] This set of elements identifies the person(s) and/or organization(s), other than the authoring entity, who contributed to the production of the table. &quot;contributors&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;affiliation&quot;: &quot;string&quot;, &quot;abbreviation&quot;: &quot;string&quot;, &quot;role&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ] name [Optional, Not Repeatable, String] The name of the contributor (person or organization). affiliation [Optional, Not Repeatable, String] The affiliation of the contributor mentioned in name. This could be a government agency, a university or a department in a university, etc. abbreviation [Optional, Not Repeatable, String] The abbreviation for the institution which has been listed as the affiliation of the contributor. role [Optional, Not Repeatable, String] The specific role of the contributor mentioned in name. This could for example be ““Research assistant”, “Technical specialist”, “Programmer”, or “Reviewer”. uri [Optional, Not Repeatable, String] A URI (link to a website, or email address) for the contributor mentioned in name. my_table = list( # ... , table_description = list( # ... , contributors = list( name = &quot;John Doe&quot;, affiliation = &quot;National Research Center&quot;, abbreviation = &quot;NRC&quot;, role = &quot;Research assistant; Stata programming&quot;, uri = &quot;www. ...&quot; ), # ... ) ) publisher [Optional, Not repeatable] The entity responsible for publishing the table. &quot;publisher&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;affiliation&quot;: &quot;string&quot;, &quot;abbreviation&quot;: &quot;string&quot;, &quot;role&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ] name [Optional, Not Repeatable, String] The name of the publisher (person or organization). affiliation [Optional, Not Repeatable, String] The affiliation of the publisher. This could be a government agency, a university or a department in a university, etc. abbreviation [Optional, Not Repeatable, String] The abbreviation for the institution which has been listed as the affiliation of the publisher. role [Optional, Not Repeatable, String] The specific role of the publisher (this element is unlikely to be used as the role is obvious). uri [Optional, Not Repeatable, String] A URI (link to a website, or email address) of the publisher. my_table = list( # ... , table_description = list( # ... , publisher = list( name = &quot;National Statistics Office, Publishing Department&quot;, affiliation = &quot;Ministry of Planning, National Statistics Office&quot;, abbreviation = &quot;NSO&quot;, uri = &quot;www. ...&quot; ), # ... ) ) date_created [Optional, Not Repeatable, String] The date the table was created. It is recommended to enter the date in ISO 8601 format (YYYY-MM-DD or YYYY-MM or YYYY). The date the table is created refers to the date that the output was produced and considered ready for publication. date_published [Optional, Not Repeatable, String] The date the table was published. It is recommended to enter the date in ISO 8601 format (YYYY-MM-DD or YYYY-MM or YYYY). If the table is contained in a document (report, paper, book, etc.), the date the table is published is associated with the publication date of that document. If the table is found in a statistics yearbook for example, then the publication date will be the date the yearbook was published. date_modified [Optional, Not Repeatable, String] The date the table was last modified. It is recommended to enter the date in ISO 8601 format (YYYY-MM-DD or YYYY-MM or YYYY). Modifications, revisions, or re-publications of the table are recorded in this element. version [Optional, Not Repeatable, String] The version of the table refers to the published version of the table. If for some reason, data in a published table are revised, then the version of the table is captured in this element. description [Optional, Not Repeatable, String] A brief “narrative” description of the table. The description can contain information on the content, purpose, production process, or other relevant information. my_table = list( # ... , table_description = list( # ... , date_created = &quot;2020-06-15&quot;, date_published = &quot;2020-10-30&quot;, version = &quot;Version 1.0&quot;, description = &quot;The table is part of a series of tables extracted from the Population Census 2020 dataset. It presents counts of resident population by type of disability, sex, and age group, by province and at the national level. The data were collected in compliance with questions from the Washington Group.&quot;, # ... ) ) table_columns [Optional, Repeatable] The columns description is composed of the column spanner and the column heads. Columns spanners group the column heads together in a logical fashion to present the data to the user. Not all columns presented in a table will have a column spanner. The column spanners can become quite complicated; when a table is documented, the information found in the column spanner and heads can be merged and edited. What matters is not to document the exact structure of the table, but to ensure that the text of the spanners and heads is included in the metadata as this text will be used by search engines to find tables in data catalogs. &quot;table_columns&quot;: [ { &quot;label&quot;: &quot;string&quot;, &quot;var_name&quot;: &quot;string&quot;, &quot;dataset&quot;: &quot;string&quot; } ] label [Required, Not Repeatable, String] The labels of the table columns (or column captions) are vital for discoverability. The column labels will include both column spanners and column headers. Columns spanners are captions that join various column headers together. var_name *[Optional, Not Repeatable, String*] This refers to the name of the variables found in the dataset (typically microdata) used to produce the table. The objective of this optional field is to help establish a link between the source dataset and the table, to foster reproducibility. dataset [Optional, Not Repeatable, String] This refers to the dataset (typically microdata) used to produce the table. If the dataset is available in a catalog and has a unique identifier (DOI or other), this identifier can be entered here. Alternatively, the title of the dataset or a permanent URI can be provided. The column captions of the following table can be documented in the following manner: my_table = list( # ... , table_description = list( # ... , table_columns = list( list(label = &quot;Area of residence: National (total)&quot;, var_name = &quot;urbrur&quot;, dataset = &quot;pop_census_2020_v01&quot;), list(label = &quot;Area of residence: Urban&quot;, var_name = &quot;urbrur&quot;, dataset = &quot;pop_census_2020_v01&quot;), list(label = &quot;Area of residence: Rural&quot;, var_name = &quot;urbrur&quot;, dataset = &quot;pop_census_2020_v01&quot;), list(label = &quot;Sex: total&quot;, var_name = &quot;sex&quot;, dataset = &quot;pop_census_2020_v01&quot;) list(label = &quot;Sex: male&quot;, var_name = &quot;sex&quot;, dataset = &quot;pop_census_2020_v01&quot;) list(label = &quot;Sex: female&quot;, var_name = &quot;sex&quot;, dataset = &quot;pop_census_2020_v01&quot;) ), # ... ) ) Or, in a more concise but also valid version: my_table = list( # ... , table_description = list( # ... , table_columns = list( list(label = &quot;Area of residence: national (total) / urban / rural&quot;, var_name = &quot;urbrur&quot;, dataset = &quot;pop_census_2020_v01&quot;), list(label = &quot;Sex: total / male / female&quot;, var_name = &quot;sex&quot;, dataset = &quot;pop_census_2020_v01&quot;) ), # ... ) ) table_rows [Required, Not Repeatable, String] Like the column spanner and column heads, the table_rows section is composed of the stub head and stubs (row captions). The stubs are the captions of the rows of data and the stub head is the label that groups the rows together in a logical fashion. As for table_columns, the information found in the stubs can be merged and edited to be optimized for clarity and discoverability. &quot;table_rows&quot;: [ { &quot;label&quot;: &quot;string&quot;, &quot;var_name&quot;: &quot;string&quot;, &quot;dataset&quot;: &quot;string&quot; } ] label [Required, Not Repeatable, String] As with the column labels, the content in this row_label is designed to include the stub head, stubs and any captions included. var_name [Optional, Not Repeatable, String] As with the column variables, this optional element is reserved to identify those variables found in the source dataset that are associated with the row of data. dataset [Optional, Not Repeatable, String] This refers to the dataset (typically microdata) used to produce the table. If the dataset is available in a catalog and has a unique identifier (DOI or other), this identifier can be entered here. Alternatively, the title of the dataset or a permanent URI can be provided. Note also that the schema provides a data_sources element (see below) to describe in more detail the sources of data. The content of the dataset element must be compatible with the information provided in that other element. Example using the same table as for table_columns: my_table = list( # ... , table_description = list( # ... , table_rows = list( list(label = &quot;Age group; 0-4 years&quot;, var_name = &quot;age&quot;, dataset = &quot;pop_census_2020_v01&quot;), list(label = &quot;Age group; 5-9 years&quot;, var_name = &quot;age&quot;, dataset = &quot;pop_census_2020_v01&quot;), list(label = &quot;Age group; 10-14 years&quot;, var_name = &quot;age&quot;, dataset = &quot;pop_census_2020_v01&quot;), list(label = &quot;Age group; 15-19 years&quot;, var_name = &quot;age&quot;, dataset = &quot;pop_census_2020_v01&quot;) ), # ... ) ) The same information can be provided in a more concise version as follows: my_table = list( # ... , table_description = list( # ... , table_rows = list( list(label = &quot;Age group; 0-4 years, 5-9 years, 10-14 years, 15-19 years&quot;, var_name = &quot;age&quot;, dataset = &quot;pop_census_2020_v01&quot;) ), # ... ) ) table_footnotes [Optional, Repeatable] Footnotes provide additional clarity. They may for example be used to assure that the user is aware of conditions and exceptions that may apply to a table. Footnotes may include statements of missing data, imputation of data, or other content that is not included in the body of the publication. &quot;table_footnotes&quot;: [ { &quot;number&quot;: &quot;string&quot;, &quot;text&quot;: &quot;string&quot; } ] number [Optional, Not Repeatable, String] A sequential number is usually given to the footnotes, which starts with 1 for each table. text [Required, Not Repeatable, String] The text of the footnote. my_table = list( # ... , table_description = list( # ... , table_footnotes = list( list(number = &quot;1&quot;, text = &quot;Data refer to the resident population only.&quot;), list(number = &quot;2&quot;, text = &quot;Figures for the district of X have been imputed.&quot;) ), # ... ) ) table_series [Optional, Repeatable] Table series may be organized into series, typically by theme. &quot;table_series&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;maintainer&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot;, &quot;description&quot;: &quot;string&quot; } ] name [Optional, Not Repeatable, String] The name (label) of the series. maintainer [Optional, Not Repeatable, String] The person or organization in charge of maintaining the series. This will often be the same person/organization that produce and publish the table. This optional element will often be ignored. uri [Optional, Not Repeatable, String] A URI to the series information. This optional element will often be ignored. description [Optional, Not Repeatable, String] A description of the series. my_table = list( # ... , table_description = list( # ... , table_series = list( list(name = &quot;Population Census - Age distribution&quot;, description = &quot;Series 1 - Tables on demographic composition of the population&quot;) ), # ... ) ) statistics [Optional, Repeatable] The table metadata will not contain data. What the statistics element refers to is the type of statistics included in the table. Some tables may only contain counts, such as a table of population by age group and sex (which shows counts of persons; other tables could be counts of households, facilities, or any other observation unit). But statistical tables can contain many other types of summary statistics. This element is used to list these types of statistics. &quot;statistics&quot;: [ { &quot;value&quot;: &quot;string&quot; } ] value [Required, Not Repeatable, String] The use of a controlled vocabulary is recommended. This list could contain (but does not have to be limited to): - Count (frequencies) - Number of missing values - Mean (average) - Median - Mode - Minimum value - Maximum value - Range - Standard deviation - Variance - Confidence interval (95%) - Lower limit - Confidence interval (95%) - Upper limit - Standard error - Sum - Inter-quartile Range (IQR) - Percentile (possibly with specification, e,g, &quot;10th percentile&quot;) - Mean Absolute Deviation - Mean Absolute Deviation from the Median (MADM) - Coefficient of Variation (COV) - Coefficient of Dispersion (COD) - Skewness - Kurtosis - Entropy - Regression coefficient - R-squared - Adjusted R-squared - Z-score - Accuracy - Precision - Mean squared logarithmic error (MSLE)&lt;br&gt;&lt;br&gt; Example in R for a table showing the distribution of the population by age goup and sex, and the mean age by sex my_table = list( # ... , table_description = list( # ... , statistics = list( list(value = &quot;count&quot;), list(value = &quot;mean&quot;) ), # ... ) ) unit_observation [Optional, Repeatable] The element provides information on the unit(s) of observations that correspond to the values shown in the table. &quot;unit_observation&quot;: [ { &quot;value&quot;: &quot;string&quot; } ] value [Required, Not repeatable, String] The value is not a numeric value; it is the label (description) of the observation unit, e.g, “individual” or “person”, “household”, “dwelling”, enterprise, “country”, etc. my_table = list( # ... , table_description = list( # ... , unit_observation = list( list(value = &quot;individual&quot;) ), # ... ) ) data_sources [Optional, Repeatable] The data sources are often cited in the footnote section of a table. The name, source_id, and link elements are optional, but at least one of them must be provided. &quot;data_sources&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;abbreviation&quot;: &quot;string&quot;, &quot;source_id&quot;: &quot;string&quot;, &quot;note&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ] name [Optional, Not repeatable, String] The name (title) of the data source. For example, a table data may be extracted from the “Population Census 2020”. abbreviation [Optional, Not repeatable, String] The abbreviation (acronym) of the data source. source_id [Optional, Not repeatable, String] A unique identifier for the source, such as a Digital Object Identifier (DOI). note [Optional, Not repeatable, String] A note that describes how the source was used, possibly mentioning issues in the use of the source. uri [Optional, Not repeatable, String] A link (URL) to the source dataset. my_table = list( # ... , table_description = list( # ... , data_sources = list( list(source = &quot;Population and Housing Census 2020&quot;, abbreviation = &quot;PHC 2020&quot;, source_id = &quot;ABC_PHC_2020_PUF&quot; ) ), # ... ) ) time_periods [Optional, Repeatable] The time periods consists of a list or periods (range of years / quarters / months / days) that the data relate to, preferably entered in ISO 8601 format (YYYY, or YYYY-MM, or YYYY-MM-DD). If the data are by quarter, convert them into ISO 8601 format (e.g., first quarter of 2020 would be “from 2020-01 to 2020-03). This is a repeatable field. If the time periods are for example 1990, 2000 to 2004, and 2014 to June 2019, do not enter the time period as a single range 1990-2019 as this would include irrelevant periods. It should be entered as three separate ranges as in the example below. For data that are related to a specific date (for example, the population of a country as of the census day), enter the date in both the from and to fields. &quot;time_periods&quot;: [ { &quot;from&quot;: &quot;string&quot;, &quot;to&quot;: &quot;string&quot; } ] from [Required, Not repeatable, String] The start date of the time period covered by the table, preferably entered in ISO 8601 format (YYYY, or YYYY-MM, or YYYY-MM-DD). to [Required, Not repeatable, String] The end date of the time period covered by the table, preferably entered in ISO 8601 format (YYYY, or YYYY-MM, or YYYY-MM-DD). my_table = list( # ... , table_description = list( # ... , time_periods = list( list(from = &quot;1990&quot;, to = &quot;1990&quot;), list(from = &quot;2000&quot;, to = &quot;2004&quot;), list(from = &quot;2014&quot;, to = &quot;2019-06&quot;) ), # ... ) ) universe [Optional, Repeatable] The universe of a table refers to the population (or respondents) covered in the data. It does not have to be a population of individuals; it can for example be a population of households, facilities, firms, groups of persons, or even objects. The description of the universe should clearly inform the data users of inclusions and exclusions that they may not expect. &quot;universe&quot;: [ { &quot;value&quot;: &quot;string&quot; } ] value [Required, Not repeatable, String] A textual description of the universe covered by the data. my_table = list( # ... , table_description = list( # ... , universe = list( list(value = &quot;Resident male population aged 0 to 6 years; this excludes visitors and people present in the country under a diplomatic status. Nomadic and homeless populations are included.&quot;) ), # ... ) ) ref_country [Optional, Repeatable] This element is used to document the list of countries for which data are in the table. This element serves to assure that the country name and code are easily discoverable and contribute to a virtual national catalog. If the table only refers to part of a country (for example a city), the ref_country field should still be filled. Another element called geographic_unitsis provided (see below) to capture more detailed information on the table’s geographic coverage. &quot;ref_country&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;code&quot;: &quot;string&quot; } ] name [Required, Not repeatable, String] The name of a country for which data are in the table. code [Required, Not repeatable, String] The code of the country mentioned in name, preferably an ISO 3166 country code. geographic_units [Optional, Repeatable] An itemized list of geographic areas covered by the data in the table, other than the country/countries that must be entered in ref_country. &quot;geographic_units&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;code&quot;: &quot;string&quot;, &quot;type&quot;: &quot;string&quot; } ] name [Required, Not repeatable, String] The name of the geographic unit. code [Optional, Not repeatable, String] The code of the geographic unit mentioned in name. type [Optional, Not repeatable, String] The type of geographic unit mentioned in name (e.g., “State”, “Province”, “Town”, “Region”, etc.) my_table = list( # ... , table_description = list( # ... , ref_country = list( list(name = &quot;Malawi&quot;, code = &quot;MWI&quot;) ), geographic_units = list( list(name = &quot;Northern&quot;, type = &quot;region&quot;), list(name = &quot;Central&quot;, type = &quot;region&quot;), list(name = &quot;Southern&quot;, type = &quot;region&quot;), list(name = &quot;Lilongwe&quot;, type = &quot;town&quot;), list(name = &quot;Mzuzu&quot;, type = &quot;town&quot;), list(name = &quot;Blantyre&quot;, type = &quot;town&quot;) ), # ... ) ) geographic_granularity [Optional, Not repeatable, String] A description of the geographic levels for which data are presented in the table. This is not a list of specific geographic areas, but a list of the administrative level(s) that correspond to these geographic areas. Example for a table showing the population of a country by State, district, and sub-district (+ total) my_table = list( # ... , table_description = list( # ... , ref_country = list( list(name = &quot;India&quot;, code = &quot;IND&quot;) ), geographic_granularity = &quot;national, state (admin 1), district (admin 2), sub-district (admin 3)&quot;, # ... ) ) bbox [Optional ; Repeatable] Bounding boxes are typically used for geographic datasets to indicate the geographic coverage of the data, but can be provided for tables as well, although this will rarely be done. A geographic bounding box defines a rectangular geographic area. &quot;bbox&quot;: [ { &quot;west&quot;: &quot;string&quot;, &quot;east&quot;: &quot;string&quot;, &quot;south&quot;: &quot;string&quot;, &quot;north&quot;: &quot;string&quot; } ] west [Required ; Not repeatable ; String] Western geographic parameter of the bounding box. east [Required ; Not repeatable ; String] Eastern geographic parameter of the bounding box. south [Required ; Not repeatable ; String] Southern geographic parameter of the bounding box. north [Required ; Not repeatable ; String] Northern geographic parameter of the bounding box. languages [Optional, Repeatable] Most tables will only be provided in one language. This is however a repeatable field, to allow for more than one language to be listed. &quot;languages&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;code&quot;: &quot;string&quot; } ] name [Required, Not repeatable, String] The name of the language(s) in which the table is published, preferably extracted from the ISO 639 standardized nomenclature of languages. code [Optional, Not repeatable, String] The code of the language, preferably from the ISO 639 code list. my_table = list( # ... , table_description = list( # ... , languages = list( list(name = &quot;English&quot;, code = &quot;EN&quot;), list(name = &quot;French&quot;, code = &quot;FR&quot;) ), # ... ) ) links [Optional, Repeatable] A list of associated links related to the table. &quot;links&quot;: [ { &quot;uri&quot;: &quot;string&quot;, &quot;description&quot;: &quot;string&quot; } ] uri [Required, Not repeatable, String] The URI to an external resource. description [Optional, Not repeatable, String] A brief description of the resource. Example for a table extracted from the Gambia Demographic and Health Survey 2019/2020 Report, the links could be the following: my_table = list( # ... , table_description = list( # ... , links = list( list(uri = &quot;https://dhsprogram.com/pubs/pdf/FR369/FR369.pdf&quot;, description = &quot;The Gambia, Demographic and Health Survey 2019/2020 Report&quot;), list(uri = &quot;https://dhsprogram.com/data/available-datasets.cfm&quot;, description = &quot;DHS microdata for The Gambia&quot;) ), # ... ) ) api_documentation [Optional ; Repeatable] Increasingly, data are made accessible via Application Programming Interfaces (APIs). The API associated with a series must be documented. &quot;api_documentation&quot;: [ { &quot;description&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ] description [Optional ; Not repeatable ; String] This element will not contain the API documentation itself, but information on what documentation is available. uri [Optional ; Not repeatable ; String] The URL of the API documentation. publications [Optional, Repeatable] This element identifies the publication(s) where the table is published. This could for example be a Statistics Yearbook, a report, a paper, etc. &quot;publications&quot;: [ { &quot;title&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ] title [Required, Not repeatable, String] The title of the publication (including the producer and the year). uri [Optional, Not repeatable, String] A link to the publication. my_table = list( # ... , table_description = list( # ... , publications = list( list(title = &quot;United Nations Statistical Yearbook, Fifty-second issue, May 2023&quot;, uri = &quot;https://www.un-ilibrary.org/content/books/9789210557566&quot;) ), # ... ) ) keywords [Optional ; Repeatable] &quot;keywords&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;vocabulary&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ] A list of keywords that provide information on the core content of the table. Keywords provide a convenient solution to improve the discoverability of the table, as it allows terms and phrases not found in the table itself to be indexed and to make a table discoverable by text-based search engines. A controlled vocabulary will preferably be used (although not required), such as the UNESCO Thesaurus. The list provided here can combine keywords from multiple controlled vocabularies, and user-defined keywords. name [Required ; Not repeatable ; String] The keyword itself. vocabulary [Optional ; Not repeatable ; String] The controlled vocabulary (including version number or date) from which the keyword is extracted, if any. uri [Optional ; Not repeatable ; String] The URL of the controlled vocabulary from which the keyword is extracted, if any. my_table = list( # ... , table_description = list( # ... , keywords = list( list(name = &quot;Migration&quot;, vocabulary = &quot;Unesco Thesaurus (June 2021)&quot;, uri = &quot;http://vocabularies.unesco.org/browser/thesaurus/en/page/concept427&quot;), list(name = &quot;Migrants&quot;, vocabulary = &quot;Unesco Thesaurus (June 2021)&quot;, uri = &quot;http://vocabularies.unesco.org/browser/thesaurus/en/page/concept427&quot;), list(name = &quot;Refugee&quot;, vocabulary = &quot;Unesco Thesaurus (June 2021)&quot;, uri = &quot;http://vocabularies.unesco.org/browser/thesaurus/en/page/concept427&quot;), list(name = &quot;Forced displacement&quot;), list(name = &quot;Forcibly displaced&quot;) ), # ... ), # ... ) themes [Optional ; Repeatable] &quot;themes&quot;: [ { &quot;id&quot;: &quot;string&quot;, &quot;name&quot;: &quot;string&quot;, &quot;parent_id&quot;: &quot;string&quot;, &quot;vocabulary&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ] A list of themes covered by the table. A controlled vocabulary will preferably be used. Note that themes will rarely be used as the elements topics and disciplines are more appropriate for most uses. This is a block of five fields: - id [Optional ; Not repeatable ; String] The ID of the theme, taken from a controlled vocabulary. - name [Required ; Not repeatable ; String] The name (label) of the theme, preferably taken from a controlled vocabulary. - parent_id [Optional ; Not repeatable ; String] The parent ID of the theme (ID of the item one level up in the hierarchy), if a hierarchical controlled vocabulary is used. - vocabulary [Optional ; Not repeatable ; String] The name (including version number) of the controlled vocabulary used, if any. - uri [Optional ; Not repeatable ; String] The URL to the controlled vocabulary used, if any. topics [Optional ; Repeatable] &quot;topics&quot;: [ { &quot;id&quot;: &quot;string&quot;, &quot;name&quot;: &quot;string&quot;, &quot;parent_id&quot;: &quot;string&quot;, &quot;vocabulary&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ] Information on the topics covered in the table. A controlled vocabulary will preferably be used, for example the CESSDA Topics classification, a typology of topics available in 11 languages; or the Journal of Economic Literature (JEL) Classification System, or the World Bank topics classification. Note that you may use more than one controlled vocabulary. This element is a block of five fields: id [Optional ; Not repeatable ; String] The identifier of the topic, taken from a controlled vocabulary. name [Required ; Not repeatable ; String] The name (label) of the topic, preferably taken from a controlled vocabulary. parent_id [Optional ; Not repeatable ; String] The parent identifier of the topic (identifier of the item one level up in the hierarchy), if a hierarchical controlled vocabulary is used. vocabulary [Optional ; Not repeatable ; String] The name (including version number) of the controlled vocabulary used, if any. uri [Optional ; Not repeatable ; String] The URL to the controlled vocabulary used, if any. my_table &lt;- list( # ... , table_description = list( # ... , topics = list( list(name = &quot;Demography.Migration&quot;, vocabulary = &quot;CESSDA Topic Classification&quot;, uri = &quot;https://vocabularies.cessda.eu/vocabulary/TopicClassification&quot;), list(name = &quot;Demography.Censuses&quot;, vocabulary = &quot;CESSDA Topic Classification&quot;, uri = &quot;https://vocabularies.cessda.eu/vocabulary/TopicClassification&quot;), list(id = &quot;F22&quot;, name = &quot;International Migration&quot;, parent_id = &quot;F2 - International Factor Movements and International Business&quot;, vocabulary = &quot;JEL Classification System&quot;, uri = &quot;https://www.aeaweb.org/econlit/jelCodes.php?view=jel#J&quot;), list(id = &quot;O15&quot;, name = &quot;Human Resources - Human Development - Income Distribution - Migration&quot;, parent_id = &quot;O1 - Economic Development&quot;, vocabulary = &quot;JEL Classification System&quot;, uri = &quot;https://www.aeaweb.org/econlit/jelCodes.php?view=jel#J&quot;) ), # ... ), ) disciplines [Optional ; Repeatable] &quot;disciplines&quot;: [ { &quot;id&quot;: &quot;string&quot;, &quot;name&quot;: &quot;string&quot;, &quot;parent_id&quot;: &quot;string&quot;, &quot;vocabulary&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ] Information on the academic disciplines related to the content of the table. A controlled vocabulary will preferably be used, for example the one provided by the list of academic fields in Wikipedia. This is a block of five elements: id [Optional ; Not repeatable ; String] The identifier of the discipline, taken from a controlled vocabulary. name [Optional ; Not repeatable ; String] The name (label) of the discipline, preferably taken from a controlled vocabulary. parent_id [Optional ; Not repeatable ; String] The parent identifier of the discipline (identifier of the item one level up in the hierarchy), if a hierarchical controlled vocabulary is used. vocabulary [Optional ; Not repeatable ; String] The name (including version number) of the controlled vocabulary used, if any. uri [Optional ; Not repeatable ; String] The URL to the controlled vocabulary used, if any. my_table &lt;- list( # ... , table_description = list( # ... , disciplines = list( list(name = &quot;Economics&quot;, vocabulary = &quot;Wikipedia List of academic fields (as of 21 June 2021)&quot;, uri = &quot;https://en.wikipedia.org/wiki/List_of_academic_fields&quot;), list(name = &quot;Agricultural economics&quot;, vocabulary = &quot;Wikipedia List of academic fields (as of 21 June 2021)&quot;, uri = &quot;https://en.wikipedia.org/wiki/List_of_academic_fields&quot;), list(name = &quot;Econometrics&quot;, vocabulary = &quot;Wikipedia List of academic fields (as of 21 June 2021)&quot;, uri = &quot;https://en.wikipedia.org/wiki/List_of_academic_fields&quot;) ), # ... ), # ... ) definitions [Optional, Repeatable] Definitions or concepts covered by the table. &quot;definitions&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;definition&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ] name [Required, Not repeatable, String] The name (or label) of the term, indicator, or concept being defined. definition [Required, Not repeatable, String] The definition of the term, indicator, or concept. uri [Optional, Not repeatable, String] A link to the source of the definition, or to a site providing a more detailed definition. Example for a table on malnutrition that would include estimates of stunting and wasting prevalence: my_table = list( # ... , table_description = list( # ... , definitions = list( list(name = &quot;stunting&quot;, definition = &quot;Prevalence of stunting is the percentage of children under age 5 whose height for age is more than two standard deviations below the median for the international reference population ages 0-59 months. For children up to two years old height is measured by recumbent length. For older children height is measured by stature while standing. The data are based on the WHO&#39;s new child growth standards released in 2006.&quot;, uri = &quot;https://data.worldbank.org/indicator/SH.STA.STNT.ZS?locations=1W&quot;), list(name = &quot;wasting&quot;, definition = &quot;Prevalence of wasting, male,is the proportion of boys under age 5 whose weight for height is more than two standard deviations below the median for the international reference population ages 0-59.&quot;, uri = &quot;https://data.worldbank.org/indicator/SH.STA.WAST.MA.ZS?locations=1W&quot;) ), # ... ) ) classifications [Optional, Repeatable] The element is used to document the use of standard classifications (or “ontologies”, or “taxonomies”) in the table. &quot;classifications&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;version&quot;: &quot;string&quot;, &quot;organization&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ] name [Required, Not repeatable, String] Name (label) of the classification, ontology, or taxonomy. version [Optional, Not repeatable, String] Version of the classification, ontology, or taxonomy used in the table. organization [Optional, Not repeatable, String] Organization that is the custodian of the classification, ontology, or taxonomy. uri [Optional, Not repeatable, String] Link to an external resource where detailed information on the classification, ontology, or taxonomy can be obtained. my_table = list( # ... , table_description = list( # ... , classifications = list( list(name = &quot;International Standard Classification of Occupations (ISCO)&quot;, version = &quot;ISCO-08&quot;, organization = &quot;International Labour Organization (ILO)&quot;, uri = &quot;https://www.ilo.org/public/english/bureau/stat/isco/&quot;) ), # ... ) ) rights [Optional, Not repeatable, String] Information on the rights or copyright that applies to the table. license [Optional, Repeatable] A table may require a license to use or reproduce. This is done to protect the intellectual content of the research product. The licensing entity may be different from the researcher or the publisher. It is the entity which has the intellectual rights to the table (s) and would grant rights or restrictions on the reuse of the table. &quot;license&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ] name [Required, Not repeatable, String] The name of the license”. uri [Optional, Not repeatable, String] A link to a publicly-accessible description of the terms of the license. my_table = list( # ... , table_description = list( # ... , license = list( list(name = &quot;Attribution 4.0 International (CC BY 4.0)&quot;, uri = &quot;https://creativecommons.org/licenses/by/4.0/&quot;) ), # ... ) ) citation [Optional, Not repeatable, String] A citation requirement for the table (i.e. an indication of how the table should be cited in publications). confidentiality [Optional, Not repeatable, String] A published table may be protected through a confidentiality agreement between the publisher and the researcher. It may also determine certain rights regarding the use of the research and the data presented to the table. The data may also present confidential information that is produced for selective audiences. This element is used to provide a statement on any limitations ore restrictions on use of the table based on confidential data or agreements. sdc [Optional, Not repeatable, String] Information on statistical disclosure control measures applied to the table. This can include cell suppression, or other techniques. Specialized packages have been developed for this purpose, like sdcTable: Methods for Statistical Disclosure Control in Tabular Data and https://cran.r-project.org/web/packages/sdcTable/sdcTable.pdf The information provided here should be such that it does not provide intruders with useful information for reverse-engineering the protection measures applied to the table. contacts [Optional, Repeatable] Users of the data may need further clarification and information. This section may include the name-affiliation-email-URI of one or multiple contact persons. This block of elements will identify contact persons who can be used as resource persons regarding problems or questions raised by the user community. The URI attribute should be used to indicate a URN or URL for the homepage of the contact individual. The email attribute is used to indicate an email address for the contact individual. It is recommended to avoid putting the actual name of individuals. The information provided here should be valid for the long term. It is therefore preferable to identify contact persons by a title. The same applies for the email field. Ideally, a “generic” email address should be provided. It is easy to configure a mail server in such a way that all messages sent to the generic email address would be automatically forwarded to some staff members. &quot;contacts&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;role&quot;: &quot;string&quot;, &quot;affiliation&quot;: &quot;string&quot;, &quot;email&quot;: &quot;string&quot;, &quot;telephone&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ] name [Required, Not repeatable, String] Name of a person or unit (such as a data help desk). It will usually be better to provide a title/function than the actual name of the person. Keep in mind that people do not stay forever in their position. role [Optional, Not repeatable, String] The specific role of name, in regards to supporting users. This element is used when multiple names are provided, to help users identify the most appropriate person or unit to contact. affiliation [Optional, Not repeatable, String] Affiliation of the person/unit. email [Optional, Not repeatable, String] E-mail address of the person. telephone [Optional, Not repeatable, String] A phone number that can be called to obtain information or provide feedback on the table. This should never be a personal phone number; a corporate number (typically of a data help desk) should be provided. uri [Optional, Not repeatable, String] A link to a website where contact information for name can be found. my_table = list( # ... , table_description = list( # ... , contacts = list( list(name = &quot;Data helpdesk&quot;, role = &quot;Support to data users&quot;, affiliation = &quot;National Statistics Office&quot;, email = &quot;data_helpdesk@ ...&quot;) ) ) ) notes [Optional, Repeatable] The notes provide a space to include observations or open-ended content that may be material in understanding the table, which have not been captured in other elements of the schema. &quot;notes&quot;: [ { &quot;note&quot;: &quot;string&quot; } ] note [Required, Not repeatable, String] The note itself. relations [Optional ; Repeatable] If the table has a relation to other resources (e.g., it is a subset of another resource, or a translation of another resource), the relation(s) and associated resources can be listed in this element. &quot;relations&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;type&quot;: &quot;isPartOf&quot; } ] name [Optional ; Not repeatable ; String] The related resource. Recommended practice is to identify the related resource by means of a URI. If this is not possible or feasible, a string conforming to a formal identification system may be provided. type [Optional ; Not repeatable ; String] The type of relationship. The use of a controlled vocabulary is recommended. The Dublin Core proposes the following vocabulary: isPartOf, hasPart, isVersionOf, isFormatOf, hasFormat, references, isReferencedBy, isBasedOn, isBasisFor, replaces, isReplacedBy, requires, isRequiredBy. Type Description isPartOf The described resource is a physical or logical part of the referenced resource. hasPart isVersionOf The described resource is a version edition or adaptation of the referenced resource. A change in version implies substantive changes in content rather than differences in format. isFormatOf hasFormat The described resource pre-existed the referenced resource, which is essentially the same intellectual content presented in another format. references isReferencedBy isBasedOn isBasisFor replaces The described resource supplants, displaces or supersedes the referenced resource. isReplacedBy The described resource is supplanted, displaced or superseded by the referenced resource. requires 9.3.4 Provenance provenance [Optional ; Repeatable] &quot;provenance&quot;: [ { &quot;origin_description&quot;: { &quot;harvest_date&quot;: &quot;string&quot;, &quot;altered&quot;: true, &quot;base_url&quot;: &quot;string&quot;, &quot;identifier&quot;: &quot;string&quot;, &quot;date_stamp&quot;: &quot;string&quot;, &quot;metadata_namespace&quot;: &quot;string&quot; } } ] Metadata can be programmatically harvested from external catalogs. The provenance group of elements is used to store information on the provenance of harvested metadata, and on alterations that may have been made to the harvested metadata. origin_description [Required ; Not repeatable] The origin_description elements are used to describe when and from where metadata have been extracted or harvested. harvest_date [Required ; Not repeatable ; String] The date and time the metadata were harvested, entered in ISO 8601 format. altered [Optional ; Not repeatable ; Boolean] A boolean variable (“true” or “false”; “true by default) indicating whether the harvested metadata have been modified before being re-published. In many cases, the unique identifier of the study (element idno in the Table Description / Title Statement section) will be modified when published in a new catalog. base_url [Required ; Not repeatable ; String] The URL from where the metadata were harvested. identifier [Optional ; Not repeatable ; String] The unique dataset identifier (idno element) in the source catalog. When harvested metadata are re-published in a new catalog, the identifier will likely be changed. The identifier element in provenance is used to maintain traceability. date_stamp [Optional ; Not repeatable ; String] The date stamp (in UTC date format) of the metadata record in the originating repository (this should correspond to the date the metadata were last updated in the source catalog). metadata_namespace [Optional ; Not repeatable ; String] @@@@@@@ 9.3.5 Tags tags [Optional ; Repeatable] As shown in section 1.7 of the Guide, tags, when associated with tag_groups, provide a powerful and flexible solution to enable custom facets (filters) in data catalogs. See section 1.7 for an example in R. &quot;tags&quot;: [ { &quot;tag&quot;: &quot;string&quot;, &quot;tag_group&quot;: &quot;string&quot; } ] tag [Required ; Not repeatable ; String] A user-defined tag. tag_group [Optional ; Not repeatable ; String] A user-defined group (optional) to which the tag belongs. Grouping tags allows implementation of controlled facets in data catalogs. lda_topics [Optional ; Not repeatable] &quot;lda_topics&quot;: [ { &quot;model_info&quot;: [ { &quot;source&quot;: &quot;string&quot;, &quot;author&quot;: &quot;string&quot;, &quot;version&quot;: &quot;string&quot;, &quot;model_id&quot;: &quot;string&quot;, &quot;nb_topics&quot;: 0, &quot;description&quot;: &quot;string&quot;, &quot;corpus&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ], &quot;topic_description&quot;: [ { &quot;topic_id&quot;: null, &quot;topic_score&quot;: null, &quot;topic_label&quot;: &quot;string&quot;, &quot;topic_words&quot;: [ { &quot;word&quot;: &quot;string&quot;, &quot;word_weight&quot;: 0 } ] } ] } ] We mentioned in Chapter 1 the importance of producing rich metadata, and the opportunities that machine learning offers to enrich (or “augment”) metadata in a largely automated manner. One application of machine learning, more specifically of natural language processing, to enrich metadata related to publications is the topic extraction using Latent Dirichlet Allocation (LDA) models. LDA models must be trained on large corpora of documents. They do not require any pre-defined taxonomy of topics. The approach consists of “clustering” words that are likely to appear in similar contexts (the number of “clusters” or “topics” is a parameter provided when training a model). Clusters of related words form “topics”. A topic is thus defined by a list of keywords, each one of them provided with a score indicating its importance in the topic. Typically, the top 10 words that represent a topic will be used to describe it. The description of the topics covered by a document can be indexed to improve searchability (possibly in a selective manner, by setting thresholds on the topic shares and word weights). Once an LDA topic model has been trained, it can be used to infer the topic composition of any text. In the case of indicators and time series, this text will be a concatenation of some metadata elements including the series’ name, definitions, keywords, concepts, and possibly others. This inference will then provide the share that each topic represents in the metadata. The sum of all represented topics is 1 (100%). The lda_topics element includes the following metadata fields. An example in R was provided in Chapter 4 - Documents. model_info [Optional ; Not repeatable] Information on the LDA model. source [Optional ; Not repeatable ; String] The source of the model (typically, an organization). author [Optional ; Not repeatable ; String] The author(s) of the model. version [Optional ; Not repeatable ; String] The version of the model, which could be defined by a date or a number. model_id [Optional ; Not repeatable ; String] The unique ID given to the model. nb_topics [Optional ; Not repeatable ; Numeric] The number of topics in the model (the number of topics to be extracted from a corpus is the key parameter of any LDA model). description [Optional ; Not repeatable ; String] A brief description of the model. corpus [Optional ; Not repeatable ; String] A brief description of the corpus on which the LDA model was trained. uri [Optional ; Not repeatable ; String] A link to a web page where additional information on the model is available. topic_description [Optional ; Repeatable] The topic composition extracted from selected elements of the series metadata (typically, the name, definitions, and concepts). topic_id [Optional ; Not repeatable ; String] The identifier of the topic; this will often be a sequential number (Topic 1, Topic 2, etc.). topic_score [Optional ; Not repeatable ; Numeric] The share of the topic in the metadata (%). topic_label [Optional ; Not repeatable ; String] The label of the topic, if any (not automatically generated by the LDA model). topic_words [Optional ; Not repeatable] The list of N keywords describing the topic (e.g., the top 5 words). word [Optional ; Not repeatable ; String] The word. word_weight [Optional ; Not repeatable ; Numeric] The weight of the word in the definition of the topic. embeddings [Optional ; Repeatable] In Chapter 1 (section 1.n), we briefly introduced the concept of word embeddings and their use in implementation of semantic search tools. Word embedding models convert text (words, phrases, documents) into large-dimension numeric vectors (e.g., a vector of 100 or 200 numbers) that are representative of the semantic content of the text. The vectors are generated by submitting a text to a pre-trained word embedding model (possibly via an API). The word vectors do not have to be stored in the series/indicator metadata to be exploited by search engines. When a semantic search tool is implemented in a catalog, the vectors will be stored in a database end processed by a tool like Milvus. A metadata element is however provided to store the vectors for preservation and sharing purposes. This block of metadata elements is repeatable, allowing multiple vectors to be stored. When using vectors in a search engine, it is critical to only use vectors generated by one same model. &quot;embeddings&quot;: [ { &quot;id&quot;: &quot;string&quot;, &quot;description&quot;: &quot;string&quot;, &quot;date&quot;: &quot;string&quot;, &quot;vector&quot;: null } ] The embeddings element contains four metadata fields: id [Optional ; Not repeatable ; String] A unique identifier of the word embedding model used to generate the vector. description [Optional ; Not repeatable ; String] A brief description of the model. This may include the identification of the producer, a description of the corpus on which the model was trained, the identification of the software and algorithm used to train the model, the size of the vector, etc. date [Optional ; Not repeatable ; String] The date the model was trained (or a version date for the model). vector [Required ; Not repeatable ; @@@@] The numeric vector representing the series metadata. 9.3.6 Additional (custom) elements additional [Optional ; Not repeatable] The additional element allows data curators to add their own metadata elements to the schema. All custom elements must be added within the additional block; embedding them elsewhere in the schema would cause schema validation to fail. 9.4 Complete examples We provide here examples of documentation of actual tables, and their publishing in a NADA catalog. We use the R package NADAR and the Python library PyNada to publish metadata in the catalog. The example only demonstrate the production and publishing of table metadata. We do not show in the example how the data can also be published in a NADA database (MongoDB), to be made available via API. The use of the data API is covered in the NADA documentation. 9.4.1 Example 1 This first example is a table presenting the evolution since 1960 of the number of households by size and of the average household size in the United States, published by the US Census Bureau. This table, published in MS-Excel format, was downloaded on 20 February 2021 from https://www.census.gov/data/tables/time-series/demo/families/households.html. Using R library(nadar) # ---------------------------------------------------------------------------------- # Enter credentials (API confidential key) and catalog URL my_keys &lt;- read.csv(&quot;C:/confidential/my_API_keys.csv&quot;, header=F, stringsAsFactors=F) set_api_key(&quot;my_keys[1,1&quot;) set_api_url(&quot;https://.../index.php/api/&quot;) set_api_verbose(FALSE) # ---------------------------------------------------------------------------------- setwd(&quot;C:/my_tables/&quot;) id = &quot;TBL_EXAMPLE_01&quot; thumb = &quot;household_pic.JPG&quot; # To be used as thumbnail in the data catalog # Document the table my_table_hh4 &lt;- list( metadata_information = list( idno = &quot;META_TBL_EXAMPLE-01&quot;, producers = list( list(name = &quot;Olivier Dupriez&quot;,affiliation = &quot;World Bank&quot;) ), production_date = &quot;2021-02-20&quot; ), table_description = list( title_statement = list( idno = id, table_number = &quot;Table HH-4&quot;, title = &quot;Households by Size: 1960 to Present&quot;, sub_title = &quot;(Numbers in thousands, except for averages)&quot; ), authoring_entity = list( list(name = &quot;United States Census Bureau&quot;, affiliation = &quot; U.S. Department of Commerce&quot;, abbreviation = &quot;US BUCEN&quot;, uri = &quot;https://www.census.gov/en.html&quot; ) ), date_created = &quot;2020&quot;, date_published = &quot;2020-12&quot;, table_columns = list( list(label = &quot;Year&quot;), list(label = &quot;All households (number)&quot;), list(label = &quot;Number of people: One&quot;), list(label = &quot;Number of people: Two&quot;), list(label = &quot;Number of people: Three&quot;), list(label = &quot;Number of people: Four&quot;), list(label = &quot;Number of people: Five&quot;), list(label = &quot;Number of people: Six&quot;), list(label = &quot;Number of people: Seven or more&quot;), list(label = &quot;Average number of people per household&quot;) ), table_rows = list( list(label = &quot;Year (values from 1960 to 2020)&quot;) ), table_footnotes = list( list(number = &quot;1&quot;, text = &quot;This table uses the householder&#39;s person weight to describe characteristics of people living in households. As a result, estimates of the number of households do not match estimates of housing units from the Housing Vacancy Survey (HVS). The HVS is weighted to housing units, rather than the population, in order to more accurately estimate the number of occupied and vacant housing units. If you are primarily interested in housing inventory estimates, then see the published tables and reports here: http://www.census.gov/housing/hvs/. If you are primarily interested in characteristics about the population and people who live in households, then see the H table series and reports here: https://www.census.gov/topics/families/families-and-households.html.&quot;), list(number = &quot;2&quot;, text = &quot;Details may not sum to total due to rounding.&quot;), list(number = &quot;3&quot;, text = &quot;1993 figures revised based on population from the most recent decennial census.&quot;), list(number = &quot;4&quot;, text = &quot;The 2014 CPS ASEC included redesigned questions for income and health insurance coverage. All of the approximately 98,000 addresses were selected to receive the improved set of health insurance coverage items. The improved income questions were implemented using a split panel design. Approximately 68,000 addresses were selected to receive a set of income questions similar to those used in the 2013 CPS ASEC. The remaining 30,000 addresses were selected to receive the redesigned income questions. The source of data for this table is the CPS ASEC sample of 98,000 addresses.&quot;) ), table_series = list( list(name = &quot;Historical Households Tables&quot;, maintainer = &quot;United States Census Bureau&quot;, uri = &quot;https://www.census.gov/data/tables/time-series/demo/families/households.html&quot;, description = &quot;Tables on households generated from the Current Population Survey&quot;) ), statistics = list( list(value = &quot;Count&quot;), list(value = &quot;Average&quot;) ), unit_observation = list( list(value = &quot;Household&quot;) ), data_sources = list( list(source = &quot;U.S. Census Bureau, Current Population Survey, March and Annual Social and Economic Supplements&quot;) ), time_periods = list( list(from = &quot;1960&quot;, to = &quot;2020&quot;) ), universe = list( list(value = &quot;US resident population&quot;) ), ref_country = list( list(name = &quot;United States&quot;, code = &quot;USA&quot;) ), geographic_granularity = &quot;Country&quot;, languages = list( list(name = &quot;English&quot;, code = &quot;EN&quot;) ), links = list( list(uri = &quot;https://www2.census.gov/programs-surveys/demo/tables/families/time-series/households/hh4.xls&quot;, description = &quot;Table in MS-Excel formal&quot;), list(uri = &quot;https://www.census.gov/programs-surveys/cps/technical-documentation/complete.html&quot;, description = &quot;Technical documentation with information about ASEC, including the source and accuracy statement&quot;) ), topics = list( list( id = &quot;1&quot;, name = &quot;Demography - Censuses&quot;, parent_id = &quot;Demography&quot;, vocabulary = &quot;CESSDA Controlled Vocabulary for CESSDA Topic Classification v. 3.0 (2019-05-20)&quot;, uri = &quot;https://vocabularies.cessda.eu/vocabulary/TopicClassification?v=3.0&quot; ) ), contacts = list( list(name = &quot;Fertility and Family Statistics Branch&quot;, affiliation = &quot;US Census Bureau&quot;, telephone = &quot;+1 - 301-763-2416&quot;, uri = &quot;ask.census.gov&quot;) ) ) ) # Publish the table in a NADA catalog table_add(idno = id, metadata = my_table_hh4, repositoryid = &quot;central&quot;, published = 1, thumbnail = thumb, overwrite = &quot;yes&quot;) # Provide a link to the table series page (US Bucen website) external_resources_add( title = &quot;Historical Households Tables (US Bucen web page)&quot;, idno = id, dctype = &quot;web&quot;, file_path = &quot;https://www.census.gov/data/tables/time-series/demo/families/households.html&quot;, overwrite = &quot;yes&quot; ) The result in NADA will be as follows (only part of metadata displayed): Using Python The same result can be achieved in Python; the script will be as follows: # Python script 9.4.2 Example 2 For this second example, we use a regional table from the World Bank: “World Development Indicators - Country profiles”. The table is available on-line in Excel and in PDF formats, for many geographic areas: world, geographic regions, country groups (income level, etc), and country. A separate table is available for each of these areas. Metadata common to all table files is available in a separate Excel file. As the same metadata applies to all tables, we generate the metadata once, and use a function to publish the geography-specific tables in one loop. In our example, we only generate the tables for the following geographies: world, World Bank regions, and countries of South Asia. This will result in the documentation and publishing of 15 tables. By providing the list of all countries to the loop, we would publish 200+ tables using this script. We include definitions in the metadata. These definitions are extracted from the World Development Indicators API. In the script, we assume that we only want to publish the metadata in the catalog, and provide a link to the originating World Bank website. In other words, we do not make the XLSX or PDF directly accessible from the NADA catalog (which would be easy to implement). Using R # -------------------------------------------------------------------------- # Load libraries and establish the catalog administrator credentials # -------------------------------------------------------------------------- library(nadar) library(jsonlite) library(httr) library(rlist) # ---------------------------------------------------------------------------------- # Enter credentials (API confidential key) and catalog URL my_keys &lt;- read.csv(&quot;C:/confidential/my_API_keys.csv&quot;, header=F, stringsAsFactors=F) set_api_key(&quot;my_keys[1,1&quot;) set_api_url(&quot;https://.../index.php/api/&quot;) set_api_verbose(FALSE) # ---------------------------------------------------------------------------------- setwd(&quot;C:/my_tables/&quot;) thumb_file &lt;- &quot;WB_country_profiles_WLD.jpg&quot; src_data &lt;- &quot;World Bank, World Development Indicators database - WDI Central, 2021&quot; # The tables contain data extracted from WDI time series. We identified these # series ID and we list them here in their order of appearance in the table. tbl_wdi_indicators = list( &quot;SP.POP.TOTL&quot;, &quot;SP.POP.GROW&quot;, &quot;AG.SRF.TOTL.K2&quot;, &quot;EN.POP.DNST&quot;, &quot;SI.POV.NAHC&quot;, &quot;SI.POV.DDAY&quot;, &quot;NY.GNP.ATLS.CD&quot;, &quot;NY.GNP.PCAP.CD&quot;, &quot;NY.GNP.MKTP.PP.CD&quot;, &quot;NY.GNP.PCAP.PP.CD&quot;, &quot;SI.DST.FRST.20&quot;, &quot;SP.DYN.LE00.IN&quot;, &quot;SP.DYN.TFRT.IN&quot;, &quot;SP.ADO.TFRT&quot;, &quot;SP.DYN.CONU.ZS&quot;, &quot;SH.STA.BRTC.ZS&quot;, &quot;SH.DYN.MORT&quot;, &quot;SH.STA.MALN.ZS&quot;, &quot;SH.IMM.MEAS&quot;, &quot;SE.PRM.CMPT.ZS&quot;, &quot;SE.PRM.ENRR&quot;, &quot;SE.SEC.ENRR&quot;, &quot;SE.ENR.PRSC.FM.ZS&quot;, &quot;SH.DYN.AIDS.ZS&quot;, &quot;AG.LND.FRST.K2&quot;, &quot;ER.PTD.TOTL.ZS&quot;, &quot;ER.H2O.FWTL.ZS&quot;, &quot;SP.URB.GROW&quot;, &quot;EG.USE.PCAP.KG.OE&quot;, &quot;EN.ATM.CO2E.PC&quot;, &quot;EG.USE.ELEC.KH.PC&quot;, &quot;NY.GDP.MKTP.CD&quot;, &quot;NY.GDP.MKTP.KD.ZG&quot;, &quot;NY.GDP.DEFL.KD.ZG&quot;, &quot;NV.AGR.TOTL.ZS&quot;, &quot;NV.IND.TOTL.ZS&quot;, &quot;NE.EXP.GNFS.ZS&quot;, &quot;NE.IMP.GNFS.ZS&quot;, &quot;NE.GDI.TOTL.ZS&quot;, &quot;GC.REV.XGRT.GD.ZS&quot;, &quot;GC.NLD.TOTL.GD.ZS&quot;, &quot;FS.AST.DOMS.GD.ZS&quot;, &quot;GC.TAX.TOTL.GD.ZS&quot;, &quot;MS.MIL.XPND.GD.ZS&quot;, &quot;IT.CEL.SETS.P2&quot;, &quot;IT.NET.USER.ZS&quot;, &quot;TX.VAL.TECH.MF.ZS&quot;, &quot;IQ.SCI.OVRL&quot;, &quot;TG.VAL.TOTL.GD.ZS&quot;, &quot;TT.PRI.MRCH.XD.WD&quot;, &quot;DT.DOD.DECT.CD&quot;, &quot;DT.TDS.DECT.EX.ZS&quot;, &quot;SM.POP.NETM&quot;, &quot;BX.TRF.PWKR.CD.DT&quot;, &quot;BX.KLT.DINV.CD.WD&quot;, &quot;DT.ODA.ODAT.CD&quot; ) rows = list() defs = list() # We then use the WDI API to retrieve information on the series (name, label, # definition) to be included in the published metadata. for(s in tbl_wdi_indicators) { url = paste0(&quot;https://api.worldbank.org/v2/sources/2/series/&quot;, s, &quot;/metadata?format=JSON&quot;) s_meta &lt;- GET(url) if(http_error(s_meta)){ stop(&quot;The request failed&quot;) } else { s_metadata &lt;- fromJSON(content(s_meta, as = &quot;text&quot;)) s_metadata &lt;- s_metadata$source$concept[[1]][[2]][[1]][[2]][[1]] } indic_lbl = s_metadata$value[s_metadata$id==&quot;IndicatorName&quot;] indic_def = s_metadata$value[s_metadata$id==&quot;Longdefinition&quot;] this_row = list(var_name = s, dataset = src_data, label = indic_lbl) rows = list.append(rows, this_row) this_def = list(name = indic_lbl, definition = indic_def) defs = list.append(defs, this_def) } # -------------------------------------------------------------------------- # We create a function that takes two parameters: the country (or region) # name, and the country (or region) code. This function will generate the # table metadata and publish the selected table in the NADA catalog. # -------------------------------------------------------------------------- publish_country_profile &lt;- function(country_name, country_code) { # Generate the country/region-specific unique table ID and table title idno_meta &lt;- paste0(&quot;UC013_&quot;, country_code) idno_tbl &lt;- paste0(&quot;UC013_&quot;, country_code) tbl_title &lt;- paste0(&quot;World Development Indicators, Country Profile, &quot;, country_name, &quot; - 2021&quot;) citation &lt;- paste(&quot;World Bank,&quot;, tbl_title, &quot;, https://datacatalog.worldbank.org/dataset/country-profiles, accessed on [date]&quot;) # Generate the schema-compliant metadata my_tbl &lt;- list( metadata_information = list( producers = list(list(name = &quot;NADA team&quot;)), production_date = &quot;2021-09-14&quot;, version = &quot;v01&quot; ), table_description = list( title_statement = list( idno = idno_tbl, title = tbl_title ), authoring_entity = list( list(name = &quot;World Bank, Development Data Group&quot;, abbreviation = &quot;WB&quot;, uri = &quot;https://data.worldbank.org/&quot;) ), date_created = &quot;2021-07-03&quot;, date_published = &quot;2021-07&quot;, description = &quot;Country profiles present the latest key development data drawn from the World Development Indicators (WDI) database. They follow the format of The Little Data Book, the WDI&#39;s quick reference publication.&quot;, table_columns = list( list(label = &quot;Year 1990&quot;), list(label = &quot;Year 2000&quot;), list(label = &quot;Year 2010&quot;), list(label = &quot;Year 2018&quot;) ), table_rows = rows, table_series = list( list(name = &quot;World Development Indicators, Country Profiles&quot;, maintainer = &quot;World Bank, Development Data Group (DECDG)&quot;) ), data_sources = list( list(source = src_data) ), time_periods = list( list(from = &quot;1990&quot;, to = &quot;1990&quot;), list(from = &quot;2000&quot;, to = &quot;2000&quot;), list(from = &quot;2010&quot;, to = &quot;2010&quot;), list(from = &quot;2018&quot;, to = &quot;2018&quot;) ), ref_country = list( list(name = country_name, code = country_code) ), geographic_granularity = area, languages = list( list(name = &quot;English&quot;, code = &quot;EN&quot;) ), links = list( list(uri = &quot;https://datacatalog.worldbank.org/dataset/country-profiles&quot;, description = &quot;Country Profiles in World Bank Data Catalog website&quot;), list(uri = &quot;http://wdi.worldbank.org/tables&quot;, description = &quot;Country Profiles in World Bank Word Development Indicators website&quot;), list(uri = &quot;https://datatopics.worldbank.org/world-development-indicators/&quot;, description = &quot;Word Development Indicators website&quot;) ), keywords = list( list(name = &quot;World View&quot;), list(name = &quot;People&quot;), list(name = &quot;Environment&quot;), list(name = &quot;Economy&quot;), list(name = &quot;States and markets&quot;), list(name = &quot;Global links&quot;) ), topics = list( list(id = &quot;1&quot;, name = &quot;Demography&quot;, vocabulary = &quot;CESSDA&quot;, uri = &quot;https://vocabularies.cessda.eu/vocabulary/TopicClassification&quot;), list(id = &quot;2&quot;, name = &quot;Economics&quot;, vocabulary = &quot;CESSDA&quot;, uri = &quot;https://vocabularies.cessda.eu/vocabulary/TopicClassification&quot;), list(id = &quot;3&quot;, name = &quot;Education&quot;, vocabulary = &quot;CESSDA&quot;, uri = &quot;https://vocabularies.cessda.eu/vocabulary/TopicClassification&quot;), list(id = &quot;4&quot;, name = &quot;Health&quot;, vocabulary = &quot;CESSDA&quot;, uri = &quot;https://vocabularies.cessda.eu/vocabulary/TopicClassification&quot;), list(id = &quot;5&quot;, name = &quot;Labour And Employment&quot;, vocabulary = &quot;CESSDA&quot;, uri = &quot;https://vocabularies.cessda.eu/vocabulary/TopicClassification&quot;), list(id = &quot;6&quot;, name = &quot;Natural Environment&quot;, vocabulary = &quot;CESSDA&quot;, uri = &quot;https://vocabularies.cessda.eu/vocabulary/TopicClassification&quot;), list(id = &quot;7&quot;, name = &quot;Social Welfare Policy and Systems&quot;, vocabulary = &quot;CESSDA&quot;, uri = &quot;https://vocabularies.cessda.eu/vocabulary/TopicClassification&quot;), list(id = &quot;8&quot;, name = &quot;Trade Industry and Markets&quot;, vocabulary = &quot;CESSDA&quot;, uri = &quot;https://vocabularies.cessda.eu/vocabulary/TopicClassification&quot;), list(id = &quot;9&quot;, name = &quot;Economic development&quot;) ), definitions = defs, license = list( list(name = &quot;Creative Commons - Attribution 4.0 International - CC BY 4.0&quot;, uri = &quot;https://creativecommons.org/licenses/by/4.0/&quot;) ), citation = citation, contacts = list( list(name = &quot;World Bank, Development Data Group, Help Desk&quot;, telephone = &quot;+1 (202) 473-7824 or +1 (800) 590-1906&quot;, email = &quot;data@worldbank.org&quot;, uri = &quot;https://datahelpdesk.worldbank.org/&quot;) ) ) ) # Publish the table in the NADA catalog table_add(idno = my_tbl$table_description$title_statement$idno, metadata = my_tbl, repositoryid = &quot;central&quot;, published = 1, overwrite = &quot;yes&quot;, thumbnail = thumb_file) # Add a link to the WDI website as an external resource external_resources_add( title = &quot;World Development Indicators - Regional tables&quot;, idno = idno_tbl, dctype = &quot;web&quot;, file_path = &quot;http://wdi.worldbank.org/table&quot;, overwrite = &quot;yes&quot; ) } # -------------------------------------------------------------------------- # We run the function in a loop to publish the selected tables # -------------------------------------------------------------------------- # List of countries/regions geo_list &lt;- list( list(name = &quot;World&quot;, code = &quot;WLD&quot;, area = &quot;World&quot;), list(name = &quot;East Asia and Pacific&quot;, code = &quot;EAP&quot;, area = &quot;Region&quot;), list(name = &quot;Europe and Central Asia&quot;, code = &quot;ECA&quot;, area = &quot;Region&quot;), list(name = &quot;Latin America and Caribbean&quot;, code = &quot;LAC&quot;, area = &quot;Region&quot;), list(name = &quot;Middle East and North Africa&quot;, code = &quot;MNA&quot;, area = &quot;Region&quot;), list(name = &quot;South Asia&quot;, code = &quot;SAR&quot;, area = &quot;Region&quot;), list(name = &quot;Sub-Saharan Africa&quot;, code = &quot;AFR&quot;, area = &quot;Region&quot;), list(name = &quot;Afghanistan&quot;, code = &quot;AFG&quot;, area = &quot;Country&quot;), list(name = &quot;Bangladesh&quot;, code = &quot;BGD&quot;, area = &quot;Country&quot;), list(name = &quot;Bhutan&quot;, code = &quot;BHU&quot;, area = &quot;Country&quot;), list(name = &quot;India&quot;, code = &quot;IND&quot;, area = &quot;Country&quot;), list(name = &quot;Maldives&quot;, code = &quot;MDV&quot;, area = &quot;Country&quot;), list(name = &quot;Nepal&quot;, code = &quot;NPL&quot;, area = &quot;Country&quot;), list(name = &quot;Pakistan&quot;, code = &quot;PAK&quot;, area = &quot;Country&quot;), list(name = &quot;Sri Lanka&quot;, code = &quot;LKA&quot;, area = &quot;Country&quot;)) # Loop through the list of countries/region to publish the tables for(i in 1:length(geo_list)) { area &lt;- as.character(geo_list[[i]][3]) publish_country_profile( country_name = as.character(geo_list[[i]][1]), country_code = as.character(geo_list[[i]][2])) } ** Using Python** # Python script The result in NADA 9.4.3 Example 3 This example is selected to show how the documentation can take advantage of R or Python to extract information from the table. Here we have the table in MS-Excel format. The table contains a long list of countries, which would be tedious to manually enter. A script reads the Excel file and extracts some of the information which is then added to the table metadata. The table also contains the definitions of the indicators shown in the table. Here we assume we want to provide the XLS and PDF tables in addition to a link to the source website. We will identify and upload the resources (XLS and PDF) on our web server. The table: Using R library(nadar) library(readxl) library(rlist) # ---------------------------------------------------------------------------------- # Enter credentials (API confidential key) and catalog URL my_keys &lt;- read.csv(&quot;C:/confidential/my_API_keys.csv&quot;, header=F, stringsAsFactors=F) set_api_key(&quot;my_keys[1,1&quot;) set_api_url(&quot;https://.../index.php/api/&quot;) set_api_verbose(FALSE) # ---------------------------------------------------------------------------------- setwd(&quot;C:/my_tables/&quot;) thumb = &quot;SDGs.jpg&quot; id = &quot;TBL_EXAMPLE-03&quot; # --------------------------------------------------------------------------- # We read the MS-Excel file and extract the list of countries and definitions # --------------------------------------------------------------------------- # We generate the list of countries df &lt;- read_xlsx(&quot;WV2_Global_goals_ending_poverty_and_improving_lives.xlsx&quot;, range = &quot;A5:A230&quot;) ctry_list &lt;- list() for(i in 1:nrow(df)) { c &lt;- list(name = as.character(df[[1]][i])) ctry_list &lt;- list.append(ctry_list, c) } # We extract the definitions found in the table. # Note that we could have instead copy/pasted the definitions. # For example, the command line: # list(name = as.character(df[1,1]), definition = as.character(df[3,1])) # is equivalent to: # list(name = &quot;Income share held by lowest 20%&quot;, # definition = &quot;Percentage share of income or consumption is the share that accrues to subgroups of population indicated by deciles or quintiles. Percentage shares by quintile may not sum to 100 because of rounding.&quot;) df &lt;- read_xlsx(&quot;WV2_Global_goals_ending_poverty_and_improving_lives.xlsx&quot;, range = &quot;A241:A340&quot;, col_names = FALSE) def_list = list( list(name = as.character(df[1,1]), definition = as.character(df[3,1])), list(name = as.character(df[11,1]), definition = as.character(df[13,1])), list(name = as.character(df[21,1]), definition = as.character(df[23,1])), list(name = as.character(df[31,1]), definition = as.character(df[33,1])), list(name = as.character(df[41,1]), definition = as.character(df[43,1])), list(name = as.character(df[51,1]), definition = as.character(df[53,1])), list(name = as.character(df[61,1]), definition = as.character(df[63,1])), list(name = as.character(df[71,1]), definition = as.character(df[73,1])), list(name = as.character(df[78,1]), definition = as.character(df[80,1])), list(name = as.character(df[85,1]), definition = as.character(df[87,1])), list(name = as.character(df[92,1]), definition = as.character(df[94,1])) ) # We generate the table metadata my_tbl &lt;- list( metadata_information = list( idno = &quot;META_TBL_EXAMPLE-03&quot;, producers = list( list(name = &quot;Olivier Dupriez&quot;, affiliation = &quot;World Bank&quot;) ), production_date = &quot;2021-02-20&quot; ), table_description = list( title_statement = list( idno = id, table_number = &quot;WV.2&quot;, title = &quot;Global Goals: Ending Poverty and Improving Lives&quot; ), authoring_entity = list( list(name = &quot;World Bank, Development Data Group&quot;, abbreviation = &quot;WB&quot;, uri = &quot;https://data.worldbank.org/&quot;) ), date_created = &quot;2020-12-16&quot;, date_published = &quot;2020-12&quot;, description = &quot;&quot;, table_columns = list( list(label = &quot;Percentage share of income or consumption - Lowest 20% - 2007-18&quot;), list(label = &quot;Prevalence of child malnutrition - Stunting, height for age - % of children under 5 - 2011-19&quot;), list(label = &quot;Maternal mortality ratio - Modeled estimates - per 100,000 live births - 2017&quot;), list(label = &quot;Under-five mortality rate - Total - per 1,000 live births - 2019&quot;), list(label = &quot;Incidence of HIV, ages 15-49 (per 1,000 uninfected population ages 15-49) - 2019&quot;), list(label = &quot;Incidence of tuberculosis - per 100,000 people - 2019&quot;), list(label = &quot;Mortality caused by road traffic injury - per 100,000 people - 2016&quot;), list(label = &quot;Primary completion rate - Total - % of relevant age group - 2018&quot;), list(label = &quot;Contributing family workers - Male - % of male employment - 2018&quot;), list(label = &quot;Contributing family workers - Female - % of female employment - 2018&quot;), list(label = &quot;Labor productivity - GDP per person employed - % growth - 2015-18&quot;) ), table_rows = list( list(label = &quot;Country or region&quot;) ), table_series = list( list(name = &quot;World Development Indicators - World View&quot;, description = &quot;World Development Indicators includes data spanning up to 56 years-from 1960 to 2016. World view frames global trends with indicators on population, population density, urbanization, GNI, and GDP. As in previous years, the World view online tables present indicators measuring the world&#39;s economy and progress toward improving lives, achieving sustainable development, providing support for vulnerable populations, and reducing gender disparities. Data on poverty and shared prosperity are now in a separate section, while highlights of progress toward the Sustainable Development Goals are now presented in the companion publication, Atlas of Sustainable Development Goals 2017. The global highlights in this section draw on the six themes of World Development Indicators: - Poverty and shared prosperity, which presents indicators that measure progress toward the World Bank Group&#39;s twin goals of ending extreme poverty by 2030 and promoting shared prosperity in every country. - People, which showcases indicators covering education, health, jobs, social protection, and gender and provides a portrait of societal progress across the world. - Environment, which presents indicators on the use of natural resources, such as water and energy, and various measures of environmental degradation, including pollution, deforestation, and loss of habitat, all of which must be considered in shaping development strategies. - Economy, which provides a window on the global economy through indicators that describe the economic activity of the more than 200 countries and territories that produce, trade, and consume the world&#39;s output. - States and markets, which encompasses indicators on private investment and performance, financial system development, quality and availability of infrastructure, and the role of the public sector in nurturing investment and growth. - Global links, which presents indicators on the size and direction of the flows and links that enable economies to grow, including measures of trade, remittances, equity, and debt, as well as tourism and migration.&quot;, uri = &quot;http://wdi.worldbank.org/tables&quot;, maintainer = &quot;World Bank, Development Data Group (DECDG)&quot;) ), data_sources = list( list(source = &quot;World Bank, World Development Indicators database, 2020&quot;) ), time_periods = list( list(from = &quot;2007&quot;, to = &quot;2019&quot;) # The table cover all years from 2007 to 2019 ), ref_country = ctry_list, geographic_granularity = &quot;Country, WB geographic region, other country groupings&quot;, languages = list( list(name = &quot;English&quot;, code = &quot;EN&quot;) ), links = list( list(uri = &quot;http://wdi.worldbank.org/tables&quot;, description = &quot;World Development Indicators - Global Goals tables&quot;), list(uri = &quot;https://datatopics.worldbank.org/world-development-indicators/&quot;, description = &quot;Word Development Indicators website&quot;), list(uri = &quot;https://sdgs.un.org/goals&quot;, description = &quot;United Nations, Sustainable Development Goals (SDG) website&quot;) ), keywords = list( list(name = &quot;Sustainable Development Goals (SDGs)&quot;), list(name = &quot;Shared prosperity&quot;), list(name = &quot;HIV - AIDS&quot;) ), topics = list( list(id = &quot;1&quot;, name = &quot;Demography&quot;, vocabulary = &quot;CESSDA&quot;, uri = &quot;https://vocabularies.cessda.eu/vocabulary/TopicClassification&quot;), list(id = &quot;2&quot;, name = &quot;Economics&quot;, vocabulary = &quot;CESSDA&quot;, uri = &quot;https://vocabularies.cessda.eu/vocabulary/TopicClassification&quot;), list(id = &quot;3&quot;, name = &quot;Education&quot;, vocabulary = &quot;CESSDA&quot;, uri = &quot;https://vocabularies.cessda.eu/vocabulary/TopicClassification&quot;), list(id = &quot;4&quot;, name = &quot;Health&quot;, vocabulary = &quot;CESSDA&quot;, uri = &quot;https://vocabularies.cessda.eu/vocabulary/TopicClassification&quot;) ), disciplines = list( list(name = &quot;Economics&quot;) ), definitions = def_list, license = list( list(name = &quot;Creative Commons - Attribution 4.0 International - CC BY 4.0&quot;, uri = &quot;https://creativecommons.org/licenses/by/4.0/&quot;) ), citation = &quot;&quot;, contacts = list( list(name = &quot;World Bank, Development Data Group, Help Desk&quot;, telephone = &quot;+1 (202) 473-7824 or +1 (800) 590-1906&quot;, email = &quot;data@worldbank.org&quot;, uri = &quot;https://datahelpdesk.worldbank.org/&quot;) ) ) ) # We publish the table in the catalog table_add(idno = id, metadata = my_tbl, repositoryid = &quot;central&quot;, published = 1, overwrite = &quot;yes&quot;, thumbnail = thumb) # We add the MS-Excel and PDF versions of the table as external resources external_resources_add( title = &quot;Global Goals: Ending Poverty and Improving Lives (in MS-Excel format)&quot;, idno = id, dctype = &quot;tbl&quot;, file_path = &quot;WV2_Global_goals_ending_poverty_and_improving_lives.xlsx&quot;, overwrite = &quot;yes&quot; ) external_resources_add( title = &quot;Global Goals: Ending Poverty and Improving Lives (in PDF format)&quot;, idno = id, dctype = &quot;tbl&quot;, file_path = &quot;WV2_Global_goals_ending_poverty_and_improving_lives.pdf&quot;, overwrite = &quot;yes&quot; ) The table will now be available in the NADA catalog. *** Using Python #Python script "],["chapter10.html", "Chapter 10 Images 10.1 Image metadata 10.2 Schema description 10.3 Examples", " Chapter 10 Images 10.1 Image metadata This chapter describes the use of two metadata standards for the documentation of images. Images may include both electronic and physical representations, but we are here interested in images available as electronic files, intended to be catalogued and published in on-line catalogs/albums. These files will typically be available in one of the following formats: JPG, PNG, or TIFF. Images can be photos taken by digital cameras, images generated by computer, or scanned images. The metadata standards we describe are intended to make these images discoverable, accessible, and usable. For that purpose, metadata must be provided on the content of the image (in the form of caption, description, keywords, etc.), on the location and date the image was generated, on the author, and more. Information on use license and copyrights, on possible privacy protection issues (persons, possibly minors, etc.) is needed to provide users with information they need to ensure their use of the published images is legal, ethical, and responsible. The device used to generate images in the form of electronic files (such as digital cameras) contain embedded metadata. Digital cameras generate EXIF metadata. This information may be useful to some users, but (with a few exceptions like the date the photo was taken and the GPS location if generated), they lack information on the content of the image (what is represented in it), required for discoverability. This information must added by curators. Part of it will be entered manually, other can be extracted in a largely automated manner using machine learning models and APIs. This information must be structured and stored in compliance with a metadata standard. We present in this chapter two standards that can serve that purpose: the comprehensive (and somewhat complex) IPTC standard, and the simpler Dublin Core (DCMI) standard. The metadata schema we propose embeds both options; when using the schema, users will select either one or the other to document their images. We also make references to the ImageObject metadata schema from schema.org, and include some of their elements in our schema. Although photographs may be more explicit than a long discourse for humans, they don’t describe themselves in term of content as texts do. For texts, authors use many clues to indicate what they are talking about: titles, abstract, keywords, etc. which may be used for automatic cataloguing. Searching for photos must rely on manual cataloguing, or relate texts and documents that come with the photos. (Source: https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.43.5077&amp;rep=rep1&amp;type=pdf) We start with a brief presentation of the EXIF metadata, then describe the schema we propose for the documentation and cataloguing of images. 10.1.1 Embedded metadata: EXIF Modern digital cameras automatically generate metadata and embed it into the image file. This metadata is known as the Exchangeable Image File Format or EXIF. EXIF will record information on the date and time the image was taken, on the GPS location coordinates (latitude &amp; longitude, possibly altitude) if the camera was equipped with a GPS and geolocation was enabled, information on the device including manufacturer and model, technical information (lens type, focal range, aperture, shutter speed, flash settings), the system-generated unique image identifier, and more. There are several ways to extract or view an image’s EXIF Data. For example, the R packages ExifTool and ExifR allow extraction and use of EXIF metadata, and applications like Flickr will display EXIF content. But with the exception of the date, location (if captured), and unique image identifier, the content of the EXIF does not provide information that users interested in identifying images based on their source and/or content will find useful. Metadata describing the content and source of an image will have to be obtained from another source or using other tools. 10.1.2 IPTC and Dublin Core standards The metadata schema we propose for documenting images contains two mutually-exclusive options: the Dublin Core, as a simple option, and the IPTC as a more complex and advanced solutions. The schema also contains a few metadata elements that will be used no matter which option is selected. The schema is structured as follows: A few elements common to both options are provided to document the metadata (not the image itself), to provide some cataloguing parameters, and to set a unique identifier for the image being documented. Then come the two options for documenting the image itself: the IPTC block of metadata elements, and the Dublin Core block of elements. Users will make use of one of them, not both. The IPTC is the most detailed and complex schema. The version embedded in our schema is 2019.1 According to the IPTC website, “The IPTC Photo Metadata Standard is the most widely used standard to describe photos, because of its universal acceptance among news agencies, photographers, photo agencies, libraries, museums, and other related industries. It structures and defines metadata properties that allow users to add precise and reliable data about images.” The IPTC standard consists of two schemas: IPTC Core and IPTC Extension. They provide a comprehensive set of fields to document an image including information on time and geographic coverage, people and objects shown in the image, information on rights, and more. The schema is complex and in most cases only a small subset of fields will be used to document an image. Controlled vocabularies are recommended for some elements. The Dublin Core (DCMI) is a simpler and highly flexible standard, composed of 15 core elements which we supplement with a few elements mostly taken from the ImageObject schema from schema.org. Last, a small number of additional metadata elements are provided, which are common to both options described above. Whether the IPTC or the simpler DCMI option is used, the metadata should be made as rich as possible. 10.1.3 Augmenting image metadata To make images discoverable, metadata that describe the content depicted in an image, the source of the image and the rights and licensing associated with it, are essential but not provided in the EXIF. Additional metadata must be provided. Some of these metadata will have to be generated by image authors and/or curators, other can be generated in a much automated manner using machine learning models and tools. Image processing algorithms that make it possible to augmented metadata include algorithms of face detection, person identification, automated labeling, text extraction, and others. Before describing the proposed metadata schema in the following sections, we present here some example of tools that make such metadata enhancement easy and affordable. The example we provide below makes use of the Google Vision API to generate image metadata. Google Vision is one out of multiple tools that can be used for that purpose such as Amazon Rekognition, or Microsoft Azure Computer Vision. This example makes use of a photo selected from the World Bank Flickr album. The image comes with a brief description that identifies the photographer, the location (name of the country and town, not GPS location), and the content of the image. The description of the image includes important keywords that, when indexed in a catalog, will support discoverability of the image. This information, to be manually entered, is valuable and must be part of the curated image metadata. But we can add useful additional information in an automated manner and at low cost using machine learning models. In the example below, we use the (free) on-line “Try it” tool of the Google Vision application. The Google Vision API returns and displays the results of the image processing in multiple tabs. The same content is available programmatically in JSON format. The content of this JSON file can be mapped to elements of the metadata schema, for automatic addition to the image metadata. The first tab is the result of faces detection. Each detected face has a bounding box and metadata such as the derived emotion of the person. The bounding box can be used to automatically flag images that have one or multiple “significant size” face(s) and may have to be excluded from the published images for privacy protection reasons. The second tab reports on detected objects. The third tab suggests labels that could be attached to the image, provided with a degree of confidence. A threshold can be set to automatically add (or not) each proposed label as a keyword in the image metadata. The fourth tab shows the text detected in the image. The quality of text detection and recognition depends on the resolution of the image and on the size and orientation of the text in the image. In our example, the algorithm fails to read (most of) the small, rotated and truncated text. The tool managed to recognize some, but not all characters. In this case, this would be considered as not useful information to be added to the image metadata. We are not interested in the properties tab which does not provide information that can be used for discoverability of images based on their content or source. The last tab, Safe search, could be used as warnings if you plan to make the image publicly accessible. This “Try it” tool demonstrates the capabilities of the application which, for automating the processing of a collection of images, would be accessed programmatically using R, Python or another programming language. Accessing the application’s API requires a key. The cost of image labeling, face detection, and other image processing is low. For information on pricing, consult the website of the API providers. 10.2 Schema description The schema contains two options to document images: the IPTC and the Dublin Core metadata standards. The schema contains four main groups of metadata elements: 1. A small set of “common elements” (used no matter what option – IPTC or Dublin Core – is used), used mostly for cataloguing purpose. 2. The IPTC metadata elements 3. The Dublin Core (DCMI) elements 4. Another small set of common elements. The description of IPTC metadata elements is largely taken from the Photo Metadata section of the IPTC website. { &quot;repositoryid&quot;: &quot;central&quot;, &quot;published&quot;: &quot;0&quot;, &quot;overwrite&quot;: &quot;no&quot;, &quot;metadata_information&quot;: {}, &quot;image_description&quot;: { &quot;idno&quot;: &quot;string&quot;, &quot;identifiers&quot;: [], &quot;iptc&quot;: {}, &quot;dcmi&quot;: {}, &quot;license&quot;: [], &quot;album&quot;: [] }, &quot;provenance&quot;: [], &quot;tags&quot;: [], &quot;lda_topics&quot;: [], &quot;embeddings&quot;: [], &quot;additional&quot;: { } } 10.2.1 Common elements metadata_information [Optional ; Not repeatable] This block is used to describe who produced the metadata and when. This is an optional section of the schema. It is useful for archivist more than data users. The description of the image itself is found in the IPTC or DCMI section. &quot;metadata_information&quot;: { &quot;title&quot;: &quot;string&quot;, &quot;idno&quot;: &quot;string&quot;, &quot;producers&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;abbr&quot;: &quot;string&quot;, &quot;affiliation&quot;: &quot;string&quot;, &quot;role&quot;: &quot;string&quot; } ], &quot;production_date&quot;: &quot;string&quot;, &quot;version&quot;: &quot;string&quot; } title [Optional ; Not Repeatable ; String] The title of the image metadata. This can be the same as the image title. idno [Optional ; Not Repeatable ; String] The unique identifier of the image metadata document (which can be different from the image identifier). producers [Optional ; Repeatable] A list of persons or organizations involved in the documentation (production of the metadata) of the image. name [Optional ; Not repeatable, String] The name of the person or agency that is responsible for the documentation of the image. abbr [Optional ; Not repeatable, String] Abbreviation (acronym) of the agency mentioned in name. affiliation [Optional ; Not repeatable, String] Affiliation of the person or agency mentioned in name. role [Optional ; Not repeatable, String] The specific role of the person or agency mentioned in name in the production of the metadata. This element will be used when more than one person or organization is listed in the producers element to distinguish the specific contribution of each metadata producer. production_date [Optional ; Not repeatable, String] The date the image metadata was generated (not the date the image was created), preferably entered in ISO 8601 format (YYYY-MM-DD or YYYY-MM or YYYY). version [Optional ; Not repeatable, String] The version of the metadata on this image. This element will rarely be used. image_description [Required ; Not Repeatable] The image_description will contain the metadata related to one image. &quot;image_description&quot;: { &quot;idno&quot;: &quot;string&quot;, &quot;identifiers&quot;: [ { &quot;type&quot;: &quot;string&quot;, &quot;identifier&quot;: &quot;string&quot; } ], &quot;iptc&quot;: {}, &quot;dcmi&quot;: {}, &quot;license&quot;: [], &quot;album&quot;: [] } idno [Required ; Not Repeatable, String] The (main) unique identifier of the image, to be used for cataloguing purpose. identifiers [Optional, Repeatable] The repeatable element identifiers is used to list image identifiers other than the one used in idno. Some images may have unique identifiers assigned by different organizations or cataloguing systems; this element is used to document them. This element is used to enter image identifiers (IDs) other than the catalog ID entered in the image_description / idno element. It can for example be a Digital Object Identifier (DOI), or the EXIF identifier. Note that the ID entered in the idno element can be repeated here (idno does not provide a type parameter, that curators may want to document). type [Optional, Not Repeatable, String] The type of identifier. This could be for example “DOI”. identifier [Required, Not Repeatable, String] The identifier itself. 10.2.2 IPTC option iptc [Optional ; Not Repeatable] The schema provides two options (standards) to document an image: the IPTC, and the Dublin Core. Only one of these standards, not both, will be used to document an image. The block iptc will be used when IPTC is the preferred option. In such case, the dcmi block describe later in this chapter will be left empty. IPTC is the most complex of these two options. &quot;iptc&quot;: { &quot;photoVideoMetadataIPTC&quot;: { &quot;title&quot;: &quot;string&quot;, &quot;imageSupplierImageId&quot;: &quot;string&quot;, &quot;registryEntries&quot;: [], &quot;digitalImageGuid&quot;: &quot;string&quot;, &quot;dateCreated&quot;: &quot;2023-04-11T15:06:09Z&quot;, &quot;headline&quot;: &quot;string&quot;, &quot;eventName&quot;: &quot;string&quot;, &quot;description&quot;: &quot;string&quot;, &quot;captionWriter&quot;: &quot;string&quot;, &quot;keywords&quot;: [], &quot;sceneCodes&quot;: [], &quot;sceneCodesLabelled&quot;: [], &quot;subjectCodes&quot;: [], &quot;subjectCodesLabelled&quot;: [], &quot;creatorNames&quot;: [], &quot;creatorContactInfo&quot;: {}, &quot;creditLine&quot;: &quot;string&quot;, &quot;digitalSourceType&quot;: &quot;http://example.com&quot;, &quot;jobid&quot;: &quot;string&quot;, &quot;jobtitle&quot;: &quot;string&quot;, &quot;source&quot;: &quot;string&quot;, &quot;locationsShown&quot;: [], &quot;imageRating&quot;: 0, &quot;supplier&quot;: [], &quot;copyrightNotice&quot;: &quot;string&quot;, &quot;copyrightOwners&quot;: [], &quot;usageTerms&quot;: &quot;string&quot;, &quot;embdEncRightsExpr&quot;: [], &quot;linkedEncRightsExpr&quot;: [], &quot;webstatementRights&quot;: &quot;http://example.com&quot;, &quot;instructions&quot;: &quot;string&quot;, &quot;genres&quot;: [], &quot;intellectualGenre&quot;: &quot;string&quot;, &quot;artworkOrObjects&quot;: [], &quot;personInImageNames&quot;: [], &quot;personsShown&quot;: [], &quot;modelAges&quot;: [], &quot;additionalModelInfo&quot;: &quot;string&quot;, &quot;minorModelAgeDisclosure&quot;: &quot;http://example.com&quot;, &quot;modelReleaseDocuments&quot;: [], &quot;modelReleaseStatus&quot;: {}, &quot;organisationInImageCodes&quot;: [], &quot;organisationInImageNames&quot;: [], &quot;productsShown&quot;: [], &quot;maxAvailHeight&quot;: 0, &quot;maxAvailWidth&quot;: 0, &quot;propertyReleaseStatus&quot;: {}, &quot;propertyReleaseDocuments&quot;: [], &quot;aboutCvTerms&quot;: [] } } photoVideoMetadataIPTC [Required ; Not Repeatable ; String] Contains all elements used to describe the image using the IPTC standard. title [Optional ; Not Repeatable ; String] The title is a shorthand reference for the digital image. It provides a short verbal and human readable name which can be a text and/or a numeric reference. It is not the same as the Headline (see below). Some may use the title field to store the file name of the image, though the field may be used in many ways. This element should not be used to provide the unique identifier of the image. imageSupplierImageId [Optional ; Not Repeatable ; String] A unique identifier assigned by the image supplier to the image. registryEntries [Optional ; Repeatable] A structured element used to provide cataloguing information (i.e. an entry in a registry). It includes the unique identifier for the image issued by the registry and the registry’s organization identifier. &quot;registryEntries&quot;: [ { &quot;role&quot;: &quot;http://example.com&quot;, &quot;assetIdentifier&quot;: &quot;string&quot;, &quot;registryIdentifier&quot;: &quot;http://example.com&quot; } ] role: [Optional ; Not Repeatable ; String] An identifier of the reason and/or purpose for this Registry Entry. assetIdentifier [Optional ; Not Repeatable ; String] A unique identifier created by the registry and applied by the creator of the digital image. This value shall not be changed after being applied. This identifier is linked to a corresponding Registry Organization Identifier. Enter the unique identifier created by a registry and applied by the creator of the digital image. This value shall not be changed after being applied. This identifier may be globally unique by itself, but it must be unique for the issuing registry. An input to this field should be made mandatory. registryIdentifier [Optional ; Not Repeatable ; String] An identifier for the registry/organization which issued the corresponding Registry Image Id. digitalImageGuid [Optional ; Not Repeatable ; String] A globally unique identifier for the image. This identifier is created and applied by the creator of the digital image at the time of its creation. This value shall not be changed after that time. The identifier can be generated using an algorithm that would guarantee that the created identifier is globally unique. Device that create digital images like digital or video cameras or scanners usually create such an identifier at the time of the creation of the digital data, and add it to the metadata embedded in the image file (e.g., the EXIF metadata).IPTC’s requirements for unique ids are as follows: It must be globally unique. Algorithms for this purpose exist. It should identify the camera body. It should identify each individual photo from this camera body. It should identify the date and time of the creation of the picture. It should be secured against tampering. dateCreated [Optional ; Not Repeatable ; String] Designates the date and optionally the time the content of the image was created. For a photo, this will be the date and time the photo was taken. When no information is available on the time, the time is set to 00:00:00. The preferred format for the dateCreated element is the truncated DateTime format, for example: 2021-02-22T21:24:06Z headline [Optional ; Not Repeatable ; String] A brief publishable summary of the contents of the image. Note that a headline is not the same as a title. eventName [Optional ; Not Repeatable ; String] The name or a brief description of the event where the image was taken. If this is a sub-event of a larger event, mention both in the description. For example: “Opening statement, 1st International Conference on Metadata Standards, New York, November 2021”. description [Optional ; Not Repeatable ; String] A textual description, including captions, of the image. This describes the who, what, and why of what is happening in this image. This might include names of people, and/or their role in the action that is taking place within the image. Example: “The president of the Metadata Association delivers the keynote address”. captionWriter [Optional ; Not Repeatable ; String] An identifier, or the name, of the person involved in writing, editing or correcting the description of the image. keywords: [Optional ; Repeatable ; String] &quot;keywords&quot;: [ &quot;string&quot; ] Keywords (terms or phrases) to express the subject of the image. Keywords do not have to be taken from a controlled vocabulary. sceneCodes [Optional ; Repeatable ; String] &quot;sceneCodes&quot;: [ &quot;string&quot; ] The sceneCodes describe the scene of a photo content. The IPTC Scene-NewsCodes controlled vocabulary (published under a Creative Commons Attribution (CC BY) 4.0 license) should be used, where a scene is represented as a string of 6 digits. code Label Description 010100 headshot A head only view of a person (or animal/s) or persons as in a montage. 010200 half-length A torso and head view of a person or persons. 010300 full-length A view from head to toe of a person or persons 010400 profile A view of a person from the side 010500 rear view A view of a person or persons from the rear. 010600 single A view of only one person, object or animal. 010700 couple A view of two people who are in a personal relationship, for example engaged, married or in a romantic partnership. 010800 two A view of two people 010900 group A view of more than two people 011000 general view An overall view of the subject and its surrounds 011100 panoramic view A panoramic or wide angle view of a subject and its surrounds 011200 aerial view A view taken from above 011300 under-water A photo taken under water 011400 night scene A photo taken during darkness 011500 satellite A photo taken from a satellite in orbit 011600 exterior view A photo that shows the exterior of a building or other object 011700 interior view A scene or view of the interior of a building or other object 011800 close-up A view of, or part of a person/object taken at close range in order to emphasize detail or accentuate mood. Macro photography. 011900 action Subject in motion such as children jumping, horse running 012000 performing Subject or subjects on a stage performing to an audience 012100 posing Subject or subjects posing such as a “victory” pose or other stance that symbolizes leadership. 012200 symbolic A posed picture symbolizing an event - two rings for marriage 012300 off-beat An attractive, perhaps fun picture of everyday events - dog with sunglasses, people cooling off in the fountain 012400 movie scene Photos taken during the shooting of a movie or TV production. sceneCodesLabelled [Optional ; Repeatable] &quot;sceneCodesLabelled&quot;: [ { &quot;code&quot;: &quot;string&quot;, &quot;label&quot;: &quot;string&quot;, &quot;description&quot;: &quot;string&quot; } ] The sceneCodes element described above only allows for the capture of codes. To improve discoverability (by indexing important keywords), not only the scene codes but also the scene description should be provided. The IPTC standard does not provide an element that allows the scene label and description to be entered. The sceneCodesLabelled is an element that we added to our schema. Ideally, curators will enter the scene codes in the element sceneCodes to maintain full compatibility with the IPTC, and complement that information by also entering the codes and their description in the sceneCodesLabelled element. code [Optional ; Not Repeatable ; String] The code for the scene of a photo content. The IPTC Scene-NewsCodes controlled vocabulary (published under a Creative Commons Attribution (CC BY) 4.0 license) should be used, where a scene is represented as a string of 6 digits. See table above. label [Optional ; Not Repeatable ; String] The label of the scene. See table above for examples. description [Optional ; Not Repeatable ; String] A more detailed description of the scene. See table above for examples. subjectCodes [Optional ; Repeatable ; String] &quot;subjectCodes&quot;: [ &quot;string&quot; ] Specifies one or more subjects from the IPTC Subject-NewsCodes controlled vocabulary to categorize the image. Each Subject is represented as a string of 8 digits. The vocabulary consists of about 1400 terms organized into 3 levels (users can decide to use only the first, or the first two levels; the more detail is provided, the better the discoverability of the image). The first level of the controlled vocabulary is as follows: code Label Description 01000000 arts, culture and entertainment Matters pertaining to the advancement and refinement of the human mind, of interests, skills, tastes and emotions 02000000 crime, law and justice Establishment and/or statement of the rules of behavior in society, the enforcement of these rules, breaches of the rules and the punishment of offenders. Organizations and bodies involved in these activities. 03000000 disaster and accident Man made and natural events resulting in loss of life or injury to living creatures and/or damage to inanimate objects or property. 04000000 economy, business and finance All matters concerning the planning, production and exchange of wealth. 05000000 education All aspects of furthering knowledge of human individuals from birth to death. 06000000 environmental issue All aspects of protection, damage, and condition of the ecosystem of the planet earth and its surroundings. 07000000 health All aspects pertaining to the physical and mental welfare of human beings. 08000000 human interest Lighter items about individuals, groups, animals or objects. 09000000 labor Social aspects, organizations, rules and conditions affecting the employment of human effort for the generation of wealth or provision of services and the economic support of the unemployed. 10000000 lifestyle and leisure Activities undertaken for pleasure, relaxation or recreation outside paid employment, including eating and travel. 11000000 politics Local, regional, national and international exercise of power, or struggle for power, and the relationships between governing bodies and states. 12000000 religion and belief All aspects of human existence involving theology, philosophy, ethics and spirituality. 13000000 science and technology All aspects pertaining to human understanding of nature and the physical world and the development and application of this knowledge 14000000 social issue Aspects of the behavior of humans affecting the quality of life. 15000000 sport Competitive exercise involving physical effort. Organizations and bodies involved in these activities. 16000000 unrest conflicts and war Acts of socially or politically motivated protest and/or violence. 17000000 weather The study, reporting and prediction of meteorological phenomena. As an example of subjects at the three levels, the list below zooms on the subject “education”. code Subject Description 05000000 education All aspects of furthering knowledge of human individuals from birth to death 05001000 Adult education Education provided for older students outside the usual age groups of 5-25 05002000 Further education Any form of education beyond basic education of several levels 05003000 parent organization Groups of parents set up to support schools 05004000 preschool Education for children under the national compulsory education age 05005000 school A building or institution in which education of various sorts is provided 05005001 elementary schools Schools usually of a level from kindergarten through 11 or 12 years of age 05005002 middle schools Transitional school between elementary and high school, 12 through 13 years of age 05005003 high schools Pre-college/ university level education 14 to 17 or 18 years of age, called freshman, sophomore, junior and senior 05006000 teachers union Organization of teachers for collective bargaining and other purposes 05007000 university Institutions of higher learning capable of providing doctorate degrees 05008000 upbringing Lessons learned from parents and others as one grows up 05009000 entrance examination Exams for entering colleges, universities, junior and senior high schools, and all other higher and lower education institutes, including cram schools, which help students prepare for exams for entry to prestigious schools. 05010000 teaching and learning Either end of the education equation 05010001 students People of any age in a structured environment, not necessarily a classroom, in order to learn something 05010002 teachers People with knowledge who can impart that knowledge to others 05010003 curriculum The courses offered by a learning institution and the regulation of those courses 05010004 test/examination A measurement of student accomplishment 05011000 religious education Instruction by any faith, in that faith or about other faiths, usually, but not always, conducted in schools run by religious bodies 05011001 parochial school A school run by the Roman Catholic faith 05011002 seminary A school of any faith specifically designed to train ministers 05011003 yeshiva A school for training rabbis 05011004 madrasa A school for teaching Islam subjectCodesLabelled [Optional ; Repeatable] &quot;subjectCodesLabelled&quot;: [ { &quot;code&quot;: &quot;string&quot;, &quot;label&quot;: &quot;string&quot;, &quot;description&quot;: &quot;string&quot; } ] The subjectCodes element described above only allows for the capture of codes. To improve discoverability (by indexing important keywords), not only the subject codes but also the subject description should be provided. The IPTC standard does not provide an element that allows the subject label and description to be entered. The subjectCodesLabelled is an element that we added to our schema. Ideally, curators will enter the subject codes in the element subjectCodes to maintain full compatibility with the IPTC, and complement that information by also entering the codes and their description in the subjectCodesLabelled element. code [Optional ; Not Repeatable ; String] Specifies one or more subjects from the IPTC Subject-NewsCodes controlled vocabulary to categorize the image. Each Subject is represented as a string of 8 digits. The vocabulary consists of about 1400 terms organized into 3 levels (users can decide to use only the first, or the first two levels; the more detail is provided, the better the discoverability of the image). See examples in the table above. label [Optional ; Not Repeatable ; String] The label of the subject. See table above for examples. description [Optional ; Not Repeatable ; String] A more detailed description of the subject. See table above for examples. creatorNames [Optional ; Repeatable ; String] &quot;creatorNames&quot;: [ &quot;string&quot; ] Enter details about the creator or creators of this image. The Image Creator must often be attributed in association with any use of the image. The Image Creator, Copyright Owner, Image Supplier and Licensor may be the same or different entities. creatorContactInfo [Optional ;Not repeatable ; String] &quot;creatorContactInfo&quot;: { &quot;country&quot;: &quot;string&quot;, &quot;emailwork&quot;: &quot;string&quot;, &quot;region&quot;: &quot;string&quot;, &quot;phonework&quot;: &quot;string&quot;, &quot;weburlwork&quot;: &quot;string&quot;, &quot;address&quot;: &quot;string&quot;, &quot;city&quot;: &quot;string&quot;, &quot;postalCode&quot;: &quot;string&quot; } The creator’s contact information provides all necessary information to get in contact with the creator of this image and comprises a set of elements for proper addressing. Note that if the creator is also the licensor, his or her contact information should be provided in the licensor fields. country [Optional ; Not Repeatable ; String] The country name for the address of the person that created this image. emailwork [Optional ; Not Repeatable ; String] The work email address(es) for the creator of the image. Multiple email addresses can be given, in which case they should be separated by a comma. region [Optional ; Not Repeatable ; String] The state or province for the address of the creator of the image. phonework [Optional ; Not Repeatable ; String] The work phone number(s) for the creator of the image. Use the international format including the country code, such as +1 (123) 456789. Multiple numbers can be given, in which case they should be separated by a comma. weburlwork [Optional ; Not Repeatable ; String] The work web address for the creator of the image. Multiple addresses can be given, in which case they should be separated by a comma. address [Optional ; Not Repeatable ; String] The address of the creator of the image. This may comprise a company name. city [Optional ; Not Repeatable ; String] The city for the address of the person that created the image. postalCode [Optional ; Not Repeatable ; String] Enter the local postal code for the address of the person who created the image. creditLine [Optional ; Not Repeatable ; String] The credit to person(s) and/or organization(s) required by the supplier of the image to be used when published. This is a free-text field. digitalSourceType [Optional ; Not Repeatable ; String] The type of the source of this digital image. One value should be selected from the IPTC controlled vocabulary (published under a Creative Commons Attribution (CC BY) 4.0 license license) that contains the following values: Type Source Description digitalCapture Original digital capture of a real life scene The digital image is the original and only instance and was taken by a digital camera negativeFilm Digitized from a negative on film The digital image was digitized from a negative on film on any other transparent medium positiveFilm Digitized from a positive on film The digital image was digitized from a positive on a transparency or any other transparent medium print Digitized from a print on non-transparent medium The digital image was digitized from an image printed on a non-transparent medium softwareImage Created by software The digital image was created by computer software jobid [Optional ; Not Repeatable ; String] Number or identifier for the purpose of improved workflow handling (control or tracking). This is a user created identifier related to the job for which the image is supplied. Note: As this identifier references a job of the receiver’s workflow it must first be issued by the receiver, then transmitted to the creator or provider of the news object and finally added by the creator to this field. jobtitle [Optional ; Not Repeatable ; String] The job title of the photographer (the person listed in creatorNames). The use of this element implies that the photographer information (creatorNames is not empty). source [Optional ; Not Repeatable ; String] The name of a person or party who has a role in the content supply chain. The source can be different from the creator and from the entities listed in the Copyright Notice. locationsShown [Optional ; Repeatable] &quot;locationsShown&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;identifiers&quot;: [ &quot;http://example.com&quot; ], &quot;worldRegion&quot;: &quot;string&quot;, &quot;countryName&quot;: &quot;string&quot;, &quot;countryCode&quot;: &quot;string&quot;, &quot;provinceState&quot;: &quot;string&quot;, &quot;city&quot;: &quot;string&quot;, &quot;sublocation&quot;: &quot;string&quot;, &quot;gpsAltitude&quot;: 0, &quot;gpsLatitude&quot;: 0, &quot;gpsLongitude&quot;: 0 } ] This block of elements is used to document the location shown in the image. This information should be provided with as much detail as possible. It contains elements that can be used to provide a “nested” description of the location, from a high geographic level (world region) down to a very specific location (city and sub-location within a city). name [Optional ; Not Repeatable ; String] The full name of the location. identifiers [Optional ; Repeatable ; String] A globally unique identifier of the location shown. worldRegion [Optional ; Not Repeatable ; String] The name of a world region. This element is at the first (top) level of the top-down geographical hierarchy. countryName [Optional ; Not Repeatable ; String] The name of a country of a location. This element is at the second level of a top-down geographical hierarchy. countryCode [Optional ; Not Repeatable ; String] The ISO code of the country mentioned in countryName. provinceState [Optional ; Not Repeatable ; String] The name of a sub-region of the country - for example a province or a state name. This element is at the third level of a top-down geographical hierarchy. city [Optional ; Not Repeatable ; String] The name of the city. This element is at the fourth level of a top-down geographical hierarchy. sublocation [Optional ; Not Repeatable ; String] The sublocation name could either be the name of a sublocation to a city or the name of a well known location or (natural) monument outside a city. This element is at the fifth (lowest) level of a top-down geographical hierarchy. gpsAltitude [Optional ; Not Repeatable ; Numeric] The altitude in meters of a WGS84 based position of this location. gpsLatitude [Optional ; Not Repeatable ; Numeric] Latitude of a WGS84 based position of this location (in some cases, this information may be contained in the EXIF metadata). gpsLongitude [Optional ; Not Repeatable ; Numeric] Longitude of a WGS84 based position of this location (in some cases, this information may be contained in the EXIF metadata). imageRating [Optional ; Not Repeatable ; Numeric] Rating of the image by its user or supplier. The value shall be -1 or in the range 0 to 5. -1 indicates “rejected” and 0 “unrated”. If an explicit value is not provided, the default value is 0 will be assumed. supplier [Optional ; Repeatable] &quot;supplier&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;identifiers&quot;: [ &quot;http://example.com&quot; ] } ] name [Optional ; Not Repeatable ; String] The name of the supplier of the image (person or organization). identifiers [Optional ; Repeatable ; String] The identifier for the most recent supplier of this image. This will not necessarily be the creator or the owner of the image. copyrightNotice [Optional ; Not Repeatable ; String] Contains any necessary copyright notice for claiming the intellectual property for this photograph and should identify the current owner of the copyright for the photograph. Other entities like the creator of the photograph may be added in the corresponding field. Notes on usage rights should be provided in “Rights usage terms”. Example: ©2008 Jane Doe. If the copyright ownership must be expressed in a more controlled manner, use the fields “Copyright Owner”, “Copyright Owner ID”, “Copyright Owner Name” described below instead of the copyrightNotice element. copyrightOwners [Optional ; Repeatable] Owner or owners of the copyright in the licensed image, described in a structured format (as an alternative to the element copyrightNotice described above. This block serves the same purpose of identifying the rights holder/s for the image. The Copyright Owner, Image Creator and Licensor may be the same or different entities. &quot;copyrightOwners&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;role&quot;: [ &quot;http://example.com&quot; ], &quot;identifiers&quot;: [ &quot;http://example.com&quot; ] } ] &lt;br&gt; - **`name`** *[Optional ; Not Repeatable ; String]* &lt;br&gt; The name of the owner of the copyright in the licensed image.&lt;br&gt; - **`role`** *[Optional ; Repeatable ; String]*&lt;br&gt; The role the entity.&lt;br&gt; - **`identifiers`** *[Optional ; Repeatable ; String]*&lt;br&gt; The identifier of the owner of the copyright in the licensed image.&lt;br&gt;&lt;br&gt; - **`usageTerms`** *[Optional ; Not Repeatable ; String]* &lt;br&gt; The licensing parameters of the image expressed in free-text. Enter instructions on how this image can legally be used. The PLUS fields of the IPTC Extension can be used in parallel to express the licensed usage in more controlled terms.&lt;br&gt; - **`embdEncRightsExpr`** *[Optional ; Repeatable]* &lt;br&gt; An embedded rights expression using a rights expression language which is encoded as a string. Embedded Encoded Rights Expression (EERE) structure A structure providing details of an embedded encoded rights expression &lt;br&gt; ```json &quot;embdEncRightsExpr&quot;: [ { &quot;encRightsExpr&quot;: &quot;string&quot;, &quot;rightsExprEncType&quot;: &quot;string&quot;, &quot;rightsExprLangId&quot;: &quot;http://example.com&quot; } ] encRightsExpr [Optional ; Not Repeatable ; String] Rights Expression Language ID. An identifier of the rights expression language used by the rights expression. rightsExprEncType [Optional ; Not Repeatable ; String] The encoding type of the rights expression, identified by an IANA Media Type. rightsExprLangId [Optional ; Not Repeatable ; String] An embedded rights expression using any rights expression language. @@@@ https://www.iptc.org/std/photometadata/specification/IPTC-PhotoMetadata#embedded-encoded-rights-expression-eere-structure linkedEncRightsExpr [Optional ; Repeatable] Link to Encoded Rights Expression. &quot;linkedEncRightsExpr&quot;: [ { &quot;linkedRightsExpr&quot;: &quot;http://example.com&quot;, &quot;rightsExprEncType&quot;: &quot;string&quot;, &quot;rightsExprLangId&quot;: &quot;http://example.com&quot; } ] linkedRightsExpr [Optional ; Not Repeatable ; String] The link to a web resource representing an encoded rights expression. rightsExprEncType [Optional ; Not Repeatable ; String] The encoding type of the rights expression, identified by an IANA Media Type. rightsExprLangId [Optional ; Not Repeatable ; String] The identifer of the rights expression language used by the rights expression. webstatementRights [Optional ; Not Repeatable ; String] URL referencing a web resource providing a statement of the copyright ownership and usage rights of the image. instructions [Optional ; Not Repeatable ; String] Any of a number of instructions from the provider or creator to the receiver of the image which might include any of the following: embargoes and other restrictions not covered by the “Rights Usage Terms” field; information regarding the original means of capture (scanning notes, colourspace info) or other specific text information that the user may need for accurate reproduction; additional permissions required when publishing; credits for publishing if they exceed the IIM length of the credit field. genres [Optional ; Repeatable] &quot;genres&quot;: [ { &quot;cvId&quot;: &quot;http://example.com&quot;, &quot;cvTermName&quot;: &quot;string&quot;, &quot;cvTermId&quot;: &quot;http://example.com&quot;, &quot;cvTermRefinedAbout&quot;: &quot;http://example.com&quot; } ] cvId [Optional ; Not Repeatable ; String] The globally unique identifier of the Controlled Vocabulary the term is from. cvTermName [Optional ; Not Repeatable ; String] The natural language name of the term from a Controlled Vocabulary. cvTermId [Optional ; Not Repeatable ; String] The globally unique identifier of the term from a Controlled Vocabulary. cvTermRefinedAbout [Optional ; Not Repeatable ; String] Optionally enter a refinement of the ‘about’ relationship of the term with the content of the image. This must be a globally unique identifier from a Controlled Vocabulary. May be used to refine the generic about relationship. Artistic, style, journalistic, product or other genre(s) of the image (expressed by a term from any Controlled Vocabulary) intellectualGenre [Optional ; Not Repeatable ; String] A term to describe the nature of the image in terms of its intellectual or journalistic characteristics (for example “actuality”, “interview”, “background”, “feature”, “summary”, “wrapup” for journalistic genres, or “daybook”, “obituary”, “press release”, “transcript” for news category related genres. It is advised to use terms from a controlled vocabulary such as the NewsCodes Scheme published by the IPTC under a Creative Commons Attribution (CC BY) 4.0 license. Genre Description Actuality Recording of an event Advertiser Supplied Content is supplied by an organization or individual that has paid the news provider for its placement Advice Letters and answers about readers’ personal problems Advisory Recommendation on editorial or technical matters by a provider to its customers On This Day List of data, including birthdays of famous people and items of historical significance, for a given day Analysis Data and conclusions drawn by a journalist who has conducted in depth research for a story Archival material Material selected from the originator’s archive that has been previously distributed Background Scene setting and explanation for an event being reported Behind the Story The content describes how a story was reported and offers context on the reporting Biography Facts and background about a person Birth Announcement News of newly born children Current Events Content about events taking place at the time of the report Curtain Raiser Information about the staging and outcome of an immediately upcoming event Daybook Items filed on a regular basis that are lists of upcoming events with time and place, designed to inform others of events for planning purposes. Exclusive Information content, in any form, that is unique to a specific information provider. Fact Check The news item looks into the truth or falsehood of another reported news item or assertion (for example a statement on social media by a public figure) Feature The object content is about a particular event or individual that may not be significant to the current breaking news. Fixture The object contains data that occurs often and predictably. Forecast The object contains opinion as to the outcome of a future event. From the Scene The object contains a report from the scene of an event. Help us to Report The news item is a call for readers to provide information that may help journalists to investigate a potential news story History The object content is based on previous rather than current events. Horoscope Astrological forecasts Interview The object contains a report of a dialogue with a news source that gives it significant voice (includes Q and A). Listing of facts Detailed listing of facts related to a topic or a story Music The object contains music alone. Obituary The object contains a narrative about an individual’s life and achievements for publication after his or her death. Opinion The object contains an editorial comment that reflects the views of the author. Polls and Surveys The object contains numeric or other information produced as a result of questionnaires or interviews. Press Release The object contains promotional material or information provided to a news organisation. Press-Digest The object contains an editorial comment by another medium completely or in parts without significant journalistic changes. Profile The object contains a description of the life or activity of a news subject (often a living individual). Program A news item giving lists of intended events and time to be covered by the news provider. Each program covers a day, a week, a month or a year. The covered period is referenced as a keyword. Question and Answer Session The object contains the interviewer and subject questions and answers. Quote The object contains a one or two sentence verbatim in direct quote. Raw Sound The object contains unedited sounds. Response to a Question The object contains a reply to a question. Results Listings and Statistics The object contains alphanumeric data suitable for presentation in tabular form. Retrospective The object contains material that looks back on a specific (generally long) period of time such as a season, quarter, year or decade. Review The object contains a critique of a creative activity or service (for example a book, a film or a restaurant). Satire Uses exaggeration, irony, or humor to make a point; not intended to be understood as factual Scener The object contains a description of the event circumstances. Side bar and supporting information Related story that provides additional context or insight into a news event Special Report In-depth examination of a single subject requiring extensive research and usually presented at great length, either as a single item or as a series of items Sponsored Content is produced on behalf of an organization or individual that has paid the news provider for production and may approve content publication Summary Single item synopsis of a number of generally unrelated news stories Supported Content is produced with financial support from an organization or individual, yet not approved by the underwriter before or after publication Synopsis The object contains a condensed version of a single news item. Text only The object contains a transcription of text. Transcript and Verbatim A word for word report of a discussion or briefing Update The object contains an intraday snapshot (as for electronic services) of a single news subject. Voicer Content is only voice Wrap Complete summary of an event Wrapup Recap of a running story artworkOrObjects [Optional ; Repeatable] This block provides a set of metadata elements to be used to describe the object or artwork shown in the image. &quot;artworkOrObjects&quot;: [ { &quot;title&quot;: &quot;string&quot;, &quot;contentDescription&quot;: &quot;string&quot;, &quot;physicalDescription&quot;: &quot;string&quot;, &quot;creatorNames&quot;: [ &quot;string&quot; ], &quot;creatorIdentifiers&quot;: [ &quot;string&quot; ], &quot;contributionDescription&quot;: &quot;string&quot;, &quot;stylePeriod&quot;: [ &quot;string&quot; ], &quot;dateCreated&quot;: &quot;2023-04-11T15:06:09Z&quot;, &quot;circaDateCreated&quot;: &quot;string&quot;, &quot;source&quot;: &quot;string&quot;, &quot;sourceInventoryNr&quot;: &quot;string&quot;, &quot;sourceInventoryUrl&quot;: &quot;http://example.com&quot;, &quot;currentCopyrightOwnerName&quot;: &quot;string&quot;, &quot;currentCopyrightOwnerIdentifier&quot;: &quot;http://example.com&quot;, &quot;copyrightNotice&quot;: &quot;string&quot;, &quot;currentLicensorName&quot;: &quot;string&quot;, &quot;currentLicensorIdentifier&quot;: &quot;http://example.com&quot; } ] title [Optional ; Not Repeatable ; String] A human readable name of the object or artwork shown in the image. contentDescription [Optional ; Not Repeatable ; String] A textual description of the content depicted in the object or artwork. physicalDescription [Optional ; Not Repeatable ; String] A textual description of the physical characteristics of the artwork or object, without reference to the content depicted. This would be used to describe the object type, materials, techniques, and measurements. creatorNames [Optional Repeatable ; String] The name of the person(s) (possibly an organization) who created the object or artwork shown in the image. creatorIdentifiers [Optional ; Repeatable ; String] One or multiple globally unique identifier(s) for the artist who created the artwork or object shown in the image. This could be an identifier issued by an online registry of persons or companies. Make sure to enter these identifiers in the exact same sequence as the names entered in the field creatorNames. contributionDescription [Optional ; Not Repeatable ; String] A description of any contributions made to the artwork or object. It should include the type, date and location of contribution, and details about the contributor. stylePeriod [Optional ; Repeatable ; String] The style, historical or artistic period, movement, group, or school whose characteristics are represented in the artwork or object. It is advised to take the terms from a Controlled Vocabulary. dateCreated [Optional ; Not Repeatable ; String] The date and optionally the time the artwork or object shown in the image was created. circaDateCreated [Optional ; Not Repeatable ; String] The approximate date or range of dates associated with the creation and production of an artwork or object or its components. source [Optional ; Not Repeatable ; String] The name of the organization or body holding and registering the artwork or object in this image for inventory purposes. sourceInventoryNr [Optional ; Not Repeatable ; String] The inventory number issued by the organization or body holding and registering the artwork or object in the image. sourceInventoryUrl [Optional ; Not Repeatable ; String] A reference URL for the metadata record of the inventory maintained by the Source. currentCopyrightOwnerName [Optional ; Not Repeatable ; String] The name of the current owner of the copyright of the artwork or object. currentCopyrightOwnerIdentifier [Optional ; Not Repeatable ; String] A globally unique identifier for the current copyright owner e.g. issued by an online registry of persons or companies. copyrightNotice [Optional ; Not Repeatable ; String] Any necessary copyright notice for claiming the intellectual property for artwork or an object in the image and should identify the current owner of the copyright of this work with associated intellectual property rights. currentLicensorName [Optional ; Not Repeatable ; String] Name of the current licensor of the artwork or object. currentLicensorIdentifier [Optional ; Not Repeatable ; String] A globally unique identifier for the current licensor e.g. issued by an online registry of persons or companies. personInImageNames [Optional ; Repeatable ; String] &quot;personInImageNames&quot;: [ &quot;string&quot; ] This repeatable block of elements is used to provide information on the person(s) shown in the image. personsShown [Optional ; Repeatable] Details about person(s) shown in the image. It is not required to list all, just those details which can be recognized. &quot;personsShown&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;description&quot;: &quot;string&quot;, &quot;identifiers&quot;: [ &quot;http://example.com&quot; ], &quot;characteristics&quot;: [ { &quot;cvId&quot;: &quot;http://example.com&quot;, &quot;cvTermName&quot;: &quot;string&quot;, &quot;cvTermId&quot;: &quot;http://example.com&quot;, &quot;cvTermRefinedAbout&quot;: &quot;http://example.com&quot; } ] } ] name [Optional ; Not Repeatable ; String] The name of a person shown in the image. description [Optional ; Not Repeatable ; String] A textual description of the person. For example, you may include actions taken, emotional expressions shown and more. identifiers [Optional ; Not Repeatable ; String] Globally Unique identifiers of the person, such as those from WikiData. characteristics [Optional ; Not Repeatable ; String] A property or trait of the person, provided as a term selected from a Controlled Vocabulary. cvId [Optional ; Not Repeatable ; String] The globally unique identifier of the Controlled Vocabulary the term is from. cvTermName [Optional ; Not Repeatable ; String] The natural language name of the term from a Controlled Vocabulary. cvTermId [Optional ; Not Repeatable ; String] The globally unique identifier of the term from a Controlled Vocabulary. cvTermRefinedAbout [Optional ; Not Repeatable ; String] The refined ‘about’ relationship of the term with the content. Optionally enter a refinement of the ‘about’ relationship of the term with the content of the image. This must be a globally unique identifier from a Controlled Vocabulary. modelAges [Optional ; Repeatable ; Numeric] &quot;modelAges&quot;: [ 0 ] Age of the human model(s) at the time the image was taken. Be aware of any legal implications of providing ages for young models. Ages below 18 years should not be included. additionalModelInfo [Optional ; Not Repeatable ; String] Information about other facets of the model(s). minorModelAgeDisclosure [Optional ; Not Repeatable ; String] The age of the youngest model pictured in the image, at the time the image was created. This information is not intended to be displayed publicly; it is intended to be used as a filter for inclusion/exclusion of images in catalogs and dissemination processes. modelReleaseDocuments [Optional ; Repeatable ; String] &quot;modelReleaseDocuments&quot;: [ &quot;string&quot; ] Identifier associated with each Model Release. modelReleaseStatus [Optional ; Not Repeatable] &quot;modelReleaseStatus&quot;: { &quot;cvId&quot;: &quot;http://example.com&quot;, &quot;cvTermName&quot;: &quot;string&quot;, &quot;cvTermId&quot;: &quot;http://example.com&quot;, &quot;cvTermRefinedAbout&quot;: &quot;http://example.com&quot; } cvId [Optional ; Not Repeatable ; String] The globally unique identifier of the Controlled Vocabulary the term is from. cvTermName [Optional ; Not Repeatable ; String] The natural language name of the term from a Controlled Vocabulary. cvTermId [Optional ; Not Repeatable ; String] The globally unique identifier of the term from a Controlled Vocabulary. cvTermRefinedAbout [Optional ; Not Repeatable ; String] The refined ‘about’ relationship of the term with the content. Optionally enter a refinement of the ‘about’ relationship of the term with the content of the image. This must be a globally unique identifier from a Controlled Vocabulary. May be used to refine the generic about relationship. organisationInImageCodes [Optional ; Repeatable ; String] &quot;organisationInImageCodes&quot;: [ &quot;string&quot; ] The code, extracted from a controlled vocabulary, used to identify the organization or company featured in the image. For example a stock ticker symbol may be used. Enter an identifier for the controlled vocabulary, then a colon, and finally the code from the vocabulary assigned to the organization (e.g. nasdaq:companyA) organisationInImageNames [Optional ; Repeatable ; String] &quot;organisationInImageNames&quot;: [ &quot;string&quot; ] The name of the organization or company which is featured in the image. productsShown [Optional ; Repeatable] Details about a product shown in the image. &quot;productsShown&quot;: [ { &quot;description&quot;: &quot;string&quot;, &quot;gtin&quot;: &quot;string&quot;, &quot;name&quot;: &quot;string&quot; } ] description [Optional ; Not Repeatable ; String] A textual description of the product. gtin [Optional ; Not Repeatable ; String] The Global Trade Item Number (GTIN) of the product (GTIN-8 to GTIN-14 codes can be used). name [Optional ; Not Repeatable ; String] The name of the product. maxAvailHeight [Optional ; Not Repeatable ; Numeric] The maximum available height in pixels of the original photo from which this photo has been derived by downsizing. maxAvailWidth [Optional ; Not Repeatable ; Numeric] The maximum available width in pixels of the original photo from which this photo has been derived by downsizing. propertyReleaseStatus [Optional ; Not Repeatable] &quot;propertyReleaseStatus&quot;: { &quot;cvId&quot;: &quot;http://example.com&quot;, &quot;cvTermName&quot;: &quot;string&quot;, &quot;cvTermId&quot;: &quot;http://example.com&quot;, &quot;cvTermRefinedAbout&quot;: &quot;http://example.com&quot; } This summarizes the availability and scope of property releases authorizing usage of the properties appearing in the photograph. One value should be selected from a controlled vocabulary. It is recommended to apply the value PR-UPR very carefully and to check the wording of the property release thoroughly before applying it. - cvId [Optional ; Not Repeatable ; String] The globally unique identifier of the Controlled Vocabulary the term is from. - cvTermName [Optional ; Not Repeatable ; String] The natural language name of the term from a Controlled Vocabulary. - cvTermId [Optional ; Not Repeatable ; String] The globally unique identifier of the term from a Controlled Vocabulary. - cvTermRefinedAbout [Optional ; Not Repeatable ; String] Refined ‘about’ relationship of the CV-Term. The refined ‘about’ relationship of the term with the content. Optionally enter a refinement of the ‘about’ relationship of the term with the content of the image. This must be a globally unique identifier from a Controlled Vocabulary. propertyReleaseDocuments [Optional ; Repeatable ; String] &quot;propertyReleaseDocuments&quot;: [ &quot;string&quot; ] Optional identifier associated with each Property Release. aboutCvTerms [Optional ; Repeatable] &quot;aboutCvTerms&quot;: [ { &quot;cvId&quot;: &quot;http://example.com&quot;, &quot;cvTermName&quot;: &quot;string&quot;, &quot;cvTermId&quot;: &quot;http://example.com&quot;, &quot;cvTermRefinedAbout&quot;: &quot;http://example.com&quot; } ] One or more topics, themes or entities the content is about, each one expressed by a term from a controlled vocabulary. - cvId [Optional ; Not Repeatable ; String] The globally unique identifier of the Controlled Vocabulary the term is from. - cvTermName [Optional ; Not Repeatable ; String] The natural language name of the term from a Controlled Vocabulary. - cvTermId [Optional ; Not Repeatable ; String] The globally unique identifier of the term from a Controlled Vocabulary. - cvTermRefinedAbout [Optional ; Not Repeatable ; String] Refined ‘about’ relationship of the CV-Term. The refined ‘about’ relationship of the term with the content. Optionally enter a refinement of the ‘about’ relationship of the term with the content of the image. This must be a globally unique identifier from a Controlled Vocabulary. The IPTC elements are followed by a small set of common elements: see license, tags, and album in section Additional elements. 10.2.3 Dublin Core option We introduced the Dublin Core Metadata Initiative (DCMI) specification in chapter 3 - Documents. It contains 15 core elements, which are generic and versatile enough to be used for documenting different types of resources. Other elements can be added to the specification to increase its relevancy for specific uses. In the schema we recommend for the documentation of publications, we added elements inspired by the MARC 21 standard. We take a similar approach for the use of the Dublin Core for documenting images, by adding elements inspired by the ImageObject schema from schema.org to the 15 elements. The fifteen elements, with their definition extracted from the Dublin Core website, are the following: Element name Description identifier An unambiguous reference to the resource within a given context. type The nature or genre of the resource. title A name given to the resource. description An account of the resource. subject The topic of the resource. creator An entity primarily responsible for making the resource. contributor An entity responsible for making contributions to the resource. publisher An entity responsible for making the resource available. date A point or period of time associated with an event in the life cycle of the resource. coverage The spatial or temporal topic of the resource, the spatial applicability of the resource, or the jurisdiction under which the resource is relevant. format The file format, physical medium, or dimensions of the resource. language A language of the resource. relation A related resource. rights Information about rights held in and over the resource. source A related resource from which the described resource is derived. We do not use the identifier element, as we already have a unique identifier in the common element idno. We added the following elements to the schema, which are not part of the core list of the DCMI: identifiers caption keywords topics country gps (latitude, longitude, altitude) note The common additional elements license, album and tags also complement the DCMI metadata (see section Additional elements). We describe below how DCMI elements are used to document images. dcmi [Optional, Not repeatable] Users of the schema will chose either IPTC or Dublin Core (DCMI), not both, to document their images. If the choice is DCMI, the elements under dcmi will be used. &quot;dcmi&quot;: { &quot;type&quot;: &quot;image&quot;, &quot;title&quot;: &quot;string&quot;, &quot;caption&quot;: &quot;string&quot;, &quot;description&quot;: &quot;string&quot;, &quot;topics&quot;: [], &quot;keywords&quot;: [], &quot;creator&quot;: &quot;string&quot;, &quot;contributor&quot;: &quot;string&quot;, &quot;publisher&quot;: &quot;string&quot;, &quot;date&quot;: &quot;string&quot;, &quot;country&quot;: [], &quot;coverage&quot;: &quot;string&quot;, &quot;gps&quot;: {}, &quot;format&quot;: &quot;string&quot;, &quot;languages&quot;: [], &quot;relations&quot;: [], &quot;rights&quot;: &quot;string&quot;, &quot;source&quot;: &quot;string&quot;, &quot;note&quot;: &quot;string&quot; } type [Required, Not Repeatable, String] The Dublin Core schema is flexible and versatile, and can be used to document different types of resources. This element is used to document the type of resource being documented. The DCMI provides a list of suggested categories, including “image” which is the relevant type to be entered here. Some users may want to be more specific in the description of the type of resource, for example distinguishing color from black &amp; white images. This distinction should not be made in this element; another element can be used for such purpose (like tags and tag groups). title [Optional, Not Repeatable, String] The title of the photo. caption [Optional, Not Repeatable, String] A caption for the photo. description [Optional, Not Repeatable, String] A brief description of the content depicted in the image. This element will typically provide more detailed information than the title or caption. Note that other elements can be used to provide a more specific and “itemized” description of an image; the element keywords for example can be used to list labels associated with an image (possibly generated in an automated manner using machine learning tools). topics [Optional ; Repeatable] The topics field indicates the broad substantive topic(s) that the image represents. A topic classification facilitates referencing and searches in electronic survey catalogs. Topics should be selected from a standard controlled vocabulary such as the Council of European Social Science Data Archives (CESSDA) thesaurus. &quot;topics&quot;: [ { &quot;id&quot;: &quot;string&quot;, &quot;name&quot;: &quot;string&quot;, &quot;parent_id&quot;: &quot;string&quot;, &quot;vocabulary&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ] id [Optional ; Not repeatable ; String] The unique identifier of the topic. It can be a sequential number, or the ID of the topic in a controlled vocabulary. name [Required ; Not repeatable ; String] The label of the topic associated with the data. parent_id [Optional ; Not repeatable ; String] When a hierarchical (nested) controlled vocabulary is used, the parent_id field can be used to indicate a higher-level topic to which this topic belongs. vocabulary [Optional ; Not repeatable ; String] The name of the controlled vocabulary used, if any. uri A link to the controlled vocabulary mentioned in field `vocabulary’. keywords [Optional ; Repeatable] Words or phrases that describe salient aspects of an image content. Can be used for building keyword indexes and for classification and retrieval purposes. A controlled vocabulary can be employed. Keywords should be selected from a standard thesaurus, preferably an international, multilingual thesaurus. &quot;keywords&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;vocabulary&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ] name [Required ; String ; Non repeatable] Keyword (or phrase). Keywords summarize the content or subject matter of the image. vocabulary [Optional ; Not repeatable ; String] Controlled vocabulary from which the keyword is extracted, if any. uri [Optional ; Not repeatable ; String] The URI of the controlled vocabulary used, if any. creator [Optional, Not Repeatable, String] The name of the person (or organization) who has taken the photo or created the image. contributor [Optional, Not Repeatable, String] The contributor could be a person or organization, possibly a sponsoring organizations. publisher [Optional, Not Repeatable, String] The person or organization who publish the image. date [Optional, Not Repeatable, String] The date when the photo was taken / the image was created, preferably entered in ISO 8601 format. country [Optional, Repeatable] &quot;country&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;code&quot;: &quot;string&quot; } ] name [Optional, Not Repeatable, String] The name of the country/economy where the photo was taken. code [Optional, Not Repeatable, String] The code of the country/economy mentioned in name. This will preferably be the ISO country code. coverage [Optional, Not Repeatable, String] In the Dublin Core, the coverage can be either temporal or geographic. In the use of the schema, coverage is used to document the geographic coverage of the image. This element complements the country element, and allows more specific information to be provided. gps [Optional, Not Repeatable] The geographic location where the photo was taken. Some digital cameras equipped with GPS can, when the option is activated, capture and store in the EXIF metadata the exact geographic location where the photo was taken. &quot;gps&quot;: { &quot;latitude&quot;: -90, &quot;longitude&quot;: -180, &quot;altitude&quot;: 0 } latitude [Optional, Not Repeatable, String] The latitude of the geographic location where the photo was taken. longitude [Optional, Not Repeatable, String] The longitude of the geographic location where the photo was taken. altitude [Optional, Not Repeatable, String] The altitude of the geographic location where the photo was taken. format [Optional, Not Repeatable, String] This refers to the image file format. It is typically expressed using a MIME format. languages [Optional, Not repeatable, String] The language(s) in which the image metadata (caption, title) is provided. This is a block of two elements (at least one must be provided for each language). &quot;languages&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;code&quot;: &quot;string&quot; } ] name [Optional ; Not repeatable ; String] The name of the language. code [Optional ; Not repeatable ; String] The code of the language. The use of ISO 639-2 (the alpha-3 code in Codes for the representation of names of languages) is recommended. Numeric codes must be entered as strings. relations [Optional, Repeatable, String] A list of related resources (images or of other type) &quot;relations&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;type&quot;: &quot;isPartOf&quot;, &quot;uri&quot;: &quot;string&quot; } ] name [Optional ; Not repeatable ; String] The name (title) of the related resource. type [Optional ; Not repeatable ; String] A brief description of the type of relation. A controlled vocabulary could be used. uri [Optional ; Not repeatable ; String] A link to the related resource being described. rights [Optional, Not Repeatable, String] The copyrights for the photograph. License is in another (common) element. source [Optional, Not Repeatable, String] A related resource from which the described image is derived. note [Optional, Not Repeatable, String] Any additional information on the image, not captured in one of the other metadata elements. 10.2.4 Additional elements (IPTC and DCMI) Two elements are added to the list of image_description section of the schema. They apply both to the IPTC and to the DCMI options. license [Optional ; Repeatable] The license under which the image is published. &quot;license&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ] name [Optional ; Not Repeatable ; String] The name of the license. uri [Optional ; Not Repeatable ; String] A URL where detailed information on the license / terms of use can be found. album [Optional ; Repeatable] If your catalog contains many images, you will likely want to group them by album. Albums are collections of images organized by theme, period, location, photographer, or other criteria. One image can belong to more than one album. Albums are thus “virtual collections”. &quot;album&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;description&quot;: &quot;string&quot;, &quot;owner&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ] name [Optional ; Not Repeatable ; String] A short name (label) given to the album. description [Optional ; Not Repeatable ; String] A brief description of the album. owner [Optional ; Not Repeatable ; String] Identification of the owner/custodian of the album. This can be the name of a person or an organization. uri [Optional ; Not Repeatable ; String] A URL for the album. provenance [Optional ; Repeatable] Metadata can be programmatically harvested from external catalogs. The provenance group of elements is used to store information on the provenance of harvested metadata, and on alterations that may have been made to the harvested metadata. &quot;provenance&quot;: [ { &quot;origin_description&quot;: { &quot;harvest_date&quot;: &quot;string&quot;, &quot;altered&quot;: true, &quot;base_url&quot;: &quot;string&quot;, &quot;identifier&quot;: &quot;string&quot;, &quot;date_stamp&quot;: &quot;string&quot;, &quot;metadata_namespace&quot;: &quot;string&quot; } } ] origin_description [Required ; Not repeatable] The origin_description elements are used to describe when and from where metadata have been extracted or harvested. harvest_date [Required ; Not repeatable ; String] The date and time the metadata were harvested, entered in ISO 8601 format. altered [Optional ; Not repeatable ; Boolean] A boolean variable (“true” or “false”; “true by default) indicating whether the harvested metadata have been modified before being re-published. In many cases, the unique identifier of the study (element idno in the Study Description / Title Statement section) will be modified when published in a new catalog. base_url [Required ; Not repeatable ; String] The URL from where the metadata were harvested. identifier [Optional ; Not repeatable ; String] The unique dataset identifier (idno element) in the source catalog. When harvested metadata are re-published in a new catalog, the identifier will likely be changed. The identifier element in provenance is used to maintain traceability. date_stamp [Optional ; Not repeatable ; String] The date stamp (in UTC date format) of the metadata record in the originating repository (this should correspond to the date the metadata were last updated in the source catalog). metadata_namespace [Optional ; Not repeatable ; String] @@@@@@@ definition tags [Optional ; Repeatable] As shown in section 1.7 of the Guide, tags, when associated with tag_groups, provide a powerful and flexible solution to enable custom facets (filters) in data catalogs. See section 1.7 for an example in R. &quot;tags&quot;: [ { &quot;tag&quot;: &quot;string&quot;, &quot;tag_group&quot;: &quot;string&quot; } ] tag [Required ; Not repeatable ; String] A user-defined tag. tag_group [Optional ; Not repeatable ; String] A user-defined group (optional) to which the tag belongs. Grouping tags allows implementation of controlled facets in data catalogs. 10.2.5 LDA topics lda_topics [Optional ; Not repeatable] &quot;lda_topics&quot;: [ { &quot;model_info&quot;: [ { &quot;source&quot;: &quot;string&quot;, &quot;author&quot;: &quot;string&quot;, &quot;version&quot;: &quot;string&quot;, &quot;model_id&quot;: &quot;string&quot;, &quot;nb_topics&quot;: 0, &quot;description&quot;: &quot;string&quot;, &quot;corpus&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ], &quot;topic_description&quot;: [ { &quot;topic_id&quot;: null, &quot;topic_score&quot;: null, &quot;topic_label&quot;: &quot;string&quot;, &quot;topic_words&quot;: [ { &quot;word&quot;: &quot;string&quot;, &quot;word_weight&quot;: 0 } ] } ] } ] We mentioned in Chapter 1 the importance of producing rich metadata, and the opportunities that machine learning offers to enrich (or “augment”) metadata in a largely automated manner. One application of machine learning, more specifically of natural language processing, to enrich metadata related to publications is the topic extraction using Latent Dirichlet Allocation (LDA) models. LDA models must be trained on large corpora of documents. They do not require any pre-defined taxonomy of topics. The approach consists of “clustering” words that are likely to appear in similar contexts (the number of “clusters” or “topics” is a parameter provided when training a model). Clusters of related words form “topics”. A topic is thus defined by a list of keywords, each one of them provided with a score indicating its importance in the topic. Typically, the top 10 words that represent a topic will be used to describe it. The description of the topics covered by a document can be indexed to improve searchability (possibly in a selective manner, by setting thresholds on the topic shares and word weights). Once an LDA topic model has been trained, it can be used to infer the topic composition of any document. This inference will then provide the share that each topic represents in the document. The sum of all represented topics is 1 (100%). The metadata element lda_topics is provided to allow data curators to store information on the inferred topic composition of the documents listed in a catalog. Sub-elements are provided to describe the topic model, and the topic composition. The lda_topics element includes the following metadata fields: model_info [Optional ; Not repeatable] Information on the LDA model. source [Optional ; Not repeatable ; String] The source of the model (typically, an organization). author [Optional ; Not repeatable ; String] The author(s) of the model. version [Optional ; Not repeatable ; String] The version of the model, which could be defined by a date or a number. model_id [Optional ; Not repeatable ; String] The unique ID given to the model. nb_topics [Optional ; Not repeatable ; Numeric] The number of topics in the model (the number of topics to be extracted from a corpus is the key parameter of any LDA model). description [Optional ; Not repeatable ; String] A brief description of the model. corpus [Optional ; Not repeatable ; String] A brief description of the corpus on which the LDA model was trained. uri [Optional ; Not repeatable ; String] A link to a web page where additional information on the model is available. topic_description [Optional ; Repeatable] The topic composition of the document. topic_id [Optional ; Not repeatable ; String] The identifier of the topic; this will often be a sequential number (Topic 1, Topic 2, etc.). topic_score [Optional ; Not repeatable ; Numeric] The share of the topic in the document (%). topic_label [Optional ; Not repeatable ; String] The label of the topic, if any (not automatically generated by the LDA model). topic_words [Optional ; Not repeatable] The list of N keywords describing the topic (e.g., the top 5 words). word [Optional ; Not repeatable ; String] The word. word_weight [Optional ; Not repeatable ; Numeric] The weight of the word in the definition of the topic. This is specific to the model, not to a document. lda_topics = list( list( model_info = list( list(source = &quot;World Bank, Development Data Group&quot;, author = &quot;A.S.&quot;, version = &quot;2021-06-22&quot;, model_id = &quot;Mallet_WB_75&quot;, nb_topics = 75, description = &quot;LDA model, 75 topics, trained on Mallet&quot;, corpus = &quot;World Bank Documents and Reports (1950-2021)&quot;, uri = &quot;&quot;)) ), topic_description = list( list(topic_id = &quot;topic_27&quot;, topic_score = 32, topic_label = &quot;Education&quot;, topic_words = list(list(word = &quot;school&quot;, word_weight = &quot;&quot;) list(word = &quot;teacher&quot;, word_weight = &quot;&quot;), list(word = &quot;student&quot;, word_weight = &quot;&quot;), list(word = &quot;education&quot;, word_weight = &quot;&quot;), list(word = &quot;grade&quot;, word_weight = &quot;&quot;)), list(topic_id = &quot;topic_8&quot;, topic_score = 24, topic_label = &quot;Gender&quot;, topic_words = list(list(word = &quot;women&quot;, word_weight = &quot;&quot;) list(word = &quot;gender&quot;, word_weight = &quot;&quot;), list(word = &quot;man&quot;, word_weight = &quot;&quot;), list(word = &quot;female&quot;, word_weight = &quot;&quot;), list(word = &quot;male&quot;, word_weight = &quot;&quot;)), list(topic_id = &quot;topic_39&quot;, topic_score = 22, topic_label = &quot;Forced displacement&quot;, topic_words = list(list(word = &quot;refugee&quot;, word_weight = &quot;&quot;) list(word = &quot;programme&quot;, word_weight = &quot;&quot;), list(word = &quot;country&quot;, word_weight = &quot;&quot;), list(word = &quot;migration&quot;, word_weight = &quot;&quot;), list(word = &quot;migrant&quot;, word_weight = &quot;&quot;)), list(topic_id = &quot;topic_40&quot;, topic_score = 11, topic_label = &quot;Development policies&quot;, topic_words = list(list(word = &quot;development&quot;, word_weight = &quot;&quot;) list(word = &quot;policy&quot;, word_weight = &quot;&quot;), list(word = &quot;national&quot;, word_weight = &quot;&quot;), list(word = &quot;strategy&quot;, word_weight = &quot;&quot;), list(word = &quot;activity&quot;, word_weight = &quot;&quot;)) ) ) ) The information provided by LDA models can be used to build a “filter by topic composition” tool in a catalog, to help identify documents based on a combination of topics, allowing users to set minimum thresholds on the share of each selected topic. 10.2.6 Embeddings embeddings [Optional ; Repeatable] In Chapter 1 (section 1.n), we briefly introduced the concept of word embeddings and their use in implementation of semantic search tools. Word embedding models convert text (words, phrases, documents) into large-dimension numeric vectors (e.g., a vector of 100 or 200 numbers) that are representative of the semantic content of the text. The vectors are generated by submitting a text to a pre-trained word embedding model (possibly via an API). These vector representations can be used to identify semantically-closed documents, by calculating the distance between vectors and identifying the closest ones, as shown in the example below. The word vectors do not have to be stored in the document metadata to be exploited by search engines. When a semantic search tool is implemented in a catalog, the vectors will be stored in a database end processed by a tool like Milvus. A metadata element is however provided to store the vectors for preservation and sharing purposes. This block of metadata elements is repeatable, allowing multiple vectors to be stored. When using vectors in a search engine, it is critical to only use vectors generated by one same model. &quot;embeddings&quot;: [ { &quot;id&quot;: &quot;string&quot;, &quot;description&quot;: &quot;string&quot;, &quot;date&quot;: &quot;string&quot;, &quot;vector&quot;: null } ] The embeddings element contains four metadata fields: id [Optional ; Not repeatable ; String] A unique identifier of the word embedding model used to generate the vector. description [Optional ; Not repeatable ; String] A brief description of the model. This may include the identification of the producer, a description of the corpus on which the model was trained, the identification of the software and algorithm used to train the model, the size of the vector, etc. date [Optional ; Not repeatable ; String] The date the model was trained (or a version date for the model). vector [Required ; Not repeatable ; Object] @@@@@@@@ do not offer options The numeric vector representing the document, provided as an object (array or string). [1,4,3,5,7,9] additional [Optional ; Not repeatable] The additional element allows data curators to add their own metadata elements to the schema. All custom elements must be added within the additional block; embedding them elsewhere in the schema would cause schema validation to fail. 10.3 Examples Use schema and resource schema for publishing links. 10.3.1 Example 1 - Using the IPTC option We selected an image from the World Bank Flickr collection. The image is available at https://www.flickr.com/photos/worldbank/8120361619/in/album-72157648790716931/ Some metadata is provided with the photo. Metadata: The image is made available in multiple formats. We assume that we want to only provide access to the small, medium and original version of the image available in our NADA catalog. We also assume that instead of uploading the images to our catalog server to make them available directly from our catalog, we want to provide link to the images in the source repository (Flickr in this case). Using R library(nadar) # ---------------------------------------------------------------------------------- # Enter credentials (API confidential key) and catalog URL my_keys &lt;- read.csv(&quot;C:/confidential/my_API_keys.csv&quot;, header=F, stringsAsFactors=F) set_api_key(&quot;my_keys[1,1&quot;) set_api_url(&quot;https://.../index.php/api/&quot;) set_api_verbose(FALSE) # ---------------------------------------------------------------------------------- setwd(&quot;C:/my_images/&quot;) # Download image files from Flickr (different resolutions) download.file(&quot;https://live.staticflickr.com/4858/31953178928_77e4d7abae_o_d.jpg&quot;, destfile = &quot;img_001_original.jpg&quot;, mode = &quot;wb&quot;) download.file(&quot;https://live.staticflickr.com/4858/31953178928_44abb01418_w_d.jpg&quot;, destfile = &quot;img_001_small.jpg&quot;, mode = &quot;wb&quot;) # Generate image metadata (using the IPTC metadata elements) my_image &lt;- list( metadata_information = list( producers = list(name = &quot;OD&quot;), production_date = &quot;2022-01-10&quot; ), idno = &quot;image_001&quot;, image_description = list( iptc = list( photoVideoMetadataIPTC = list( title = &quot;Man fetching water, Afghanistan&quot;, imageSupplierImageId = &quot;Image_001&quot;, headline = &quot;Residents get water&quot;, dateCreated = &quot;2008-09-20T00:00:00Z&quot;, creatorNames = list(&quot;Sofie Tesson, Taimani Films&quot;), description = &quot;View of villagers, getting some water. World Bank Emergency Horticulture and Livestock Project&quot;, digitalImageGuid = &quot;72157648790716931&quot;, locationsShown = list( list(countryCode = &quot;AFG&quot;, countryName = &quot;Afghanistan&quot;) ), keywords = list(&quot;Water and sanitation&quot;), @@@ as list? sceneCodes = list(&quot;010600, 011000, 011100, 011900&quot;), sceneCodesLabelled = list( list(code = &quot;010600&quot;, label = &quot;single&quot;, description = &quot;A view of only one person, object or animal.&quot;), list(code = &quot;011000&quot;, label = &quot;general view&quot;, description = &quot;An overall view of the subject and its surrounds&quot;), list(code = &quot;011100&quot;, label = &quot;panoramic view&quot;, description = &quot;A panoramic or wide angle view of a subject and its surrounds&quot;), list(code = &quot;011900&quot;, label = &quot;action&quot;, description = &quot;Subject in motion&quot;) ), @@@ as list? subjectCodes = list(&quot;06000000, 09000000, 14000000&quot;), subjectCodesLabelled = list( list(code = &quot;06000000&quot;, label = &quot;environmental issue&quot;, description = &quot;All aspects of protection, damage, and condition of the ecosystem of the planet earth and its surroundings.&quot;), list(code = &quot;09000000&quot;, label = &quot;labor&quot;, description = &quot;Social aspects, organizations, rules and conditions affecting the employment of human effort for the generation of wealth or provision of services and the economic support of the unemployed.&quot;), list(code = &quot;14000000&quot;, label = &quot;social issue&quot;, description = &quot;Aspects of the behavior of humans affecting the quality of life.&quot;) ), source = &quot;World Bank&quot;, supplier = list( list(name = &quot;World Bank&quot;) ) ) ), license = list( list(name = &quot;Attribution 2.0 Generic (CC BY 2.0)&quot;, uri = &quot;https://creativecommons.org/licenses/by/2.0/&quot;) ), album = list( list(name = &quot;World Bank Projects in Afghanistan&quot;) ) ) ) # Publish the image metadata in the NADA catalog image_add(idno = &quot;image_001&quot;, metadata = my_image, repositoryid = &quot;central&quot;, overwrite = &quot;yes&quot;, published = 1, thumbnail = thumb) # Provide a link to the images in the originating repository, and upload files # (uploading files will make them available directly from the NADA catalog) external_resources_add( idno = &quot;image_001&quot;, dctype = &quot;pic&quot;, title = &quot;Man fetching water, Afghanistan (Flickr link)&quot;, file_path = &quot;https://www.flickr.com/photos/water_alternatives/31953178928/in/photolist-QFAoS5&quot;, overwrite = &quot;yes&quot; ) external_resources_add( idno = &quot;image_001&quot;, dctype = &quot;pic&quot;, title = &quot;Man fetching water, Afghanistan (original size)&quot;, file_path = &quot;img_001_original.jpg&quot;, overwrite = &quot;yes&quot; ) external_resources_add( idno = &quot;image_001&quot;, dctype = &quot;pic&quot;, title = &quot;Man fetching water, Afghanistan (small size)&quot;, file_path = &quot;img_001_small.jpg&quot;, overwrite = &quot;yes&quot; ) Result in NADA The metadata, links, and images will be displayed in NADA. Different views (mosaic, list, page views) are available. If the metadata contained a GPS location, a map showing the exact location where the photo was taken will also be displayed in the image page. Using Python # Python script 10.3.2 Example 2 - Using the DCMI option We document the same image as in Example 1. Using R library(nadar) # ---------------------------------------------------------------------------------- # Enter credentials (API confidential key) and catalog URL my_keys &lt;- read.csv(&quot;C:/confidential/my_API_keys.csv&quot;, header=F, stringsAsFactors=F) set_api_key(&quot;my_keys[1,1&quot;) set_api_url(&quot;https://.../index.php/api/&quot;) set_api_verbose(FALSE) # ---------------------------------------------------------------------------------- setwd(&quot;C:/my_images/&quot;) # Download image files from Flickr (different resolutions) download.file(&quot;https://live.staticflickr.com/4858/31953178928_77e4d7abae_o_d.jpg&quot;, destfile = &quot;img_001_original.jpg&quot;, mode = &quot;wb&quot;) download.file(&quot;https://live.staticflickr.com/4858/31953178928_44abb01418_w_d.jpg&quot;, destfile = &quot;img_001_small.jpg&quot;, mode = &quot;wb&quot;) # Generate image metadata (using the DCMI metadata elements) pic_desc &lt;- list( metadata_information = list( producers = list(name = &quot;OD&quot;), production_date = &quot;2022-01-10&quot; ), idno = &quot;image_001&quot;, image_description = list( dcmi = list( identifier = &quot;72157648790716931&quot;, type = &quot;image&quot;, title = &quot;Man fetching water, Afghanistan&quot;, caption = &quot;Residents get water&quot;, description = &quot;View of villagers, getting some water. World Bank Emergency Horticulture and Livestock Project&quot;, subject = &quot;&quot;, topics = list(), keywords = list( list(name = &quot;water and sanitation&quot;) ), creator = &quot;Sofie Tesson, Taimani Films&quot;, publisher = &quot;World Bank&quot;, date = &quot;2008-09-20T00:00:00Z&quot;, country = list(name = &quot;Afghanistan&quot;, code = &quot;AFG&quot;), language = &quot;English&quot; ), license = list( list(name = &quot;Attribution 2.0 Generic (CC BY 2.0)&quot;, uri = &quot;https://creativecommons.org/licenses/by/2.0/&quot;)), album = list( list(name = &quot;World Bank Projects in Afghanistan&quot;) ) ) ) # Publish the image metadata in the NADA catalog image_add(idno = &quot;image_001&quot;, metadata = pic_desc, repositoryid = &quot;central&quot;, overwrite = &quot;yes&quot;, published = 1, thumbnail = thumb) # Provide a link to the images in the originating repository, and upload files # (uploading files will make them available directly from the NADA catalog) external_resources_add( idno = &quot;image_001&quot;, dctype = &quot;pic&quot;, title = &quot;Man fetching water, Afghanistan (Flickr link)&quot;, file_path = &quot;https://www.flickr.com/photos/water_alternatives/31953178928/in/photolist-QFAoS5&quot;, overwrite = &quot;yes&quot; ) external_resources_add( idno = &quot;image_001&quot;, dctype = &quot;pic&quot;, title = &quot;Man fetching water, Afghanistan (original size)&quot;, file_path = &quot;img_001_original.jpg&quot;, overwrite = &quot;yes&quot; ) external_resources_add( idno = &quot;image_001&quot;, dctype = &quot;pic&quot;, title = &quot;Man fetching water, Afghanistan (small size)&quot;, file_path = &quot;img_001_small.jpg&quot;, overwrite = &quot;yes&quot; ) Using Python # Python script "],["chapter11.html", "Chapter 11 Videos 11.1 Augmenting video metadata 11.2 Schema description 11.3 Complete example", " Chapter 11 Videos The schema we propose to document video files is a combination of elements extracted from the Dublin Core Metadata Initiative (DCMI) and from the VideoObject (from schema.org) schemas. This schema is very similar to the schema we proposed for audio files (see chapter 10). The Dublin Core is a generic and versatile standard, which we also use (in an augmented form) for the documentation of Documents (Chapter 4), Images (Chapter 9), and Audio files (chapter 10). It contains 15 core elements, to which we added a selection of elements from VideoObject. We also included the elements keywords, topics, tags, provenance and additional that are found in other schemas documented in the Guide. The resulting metadata schema is simple, but it contains the elements needed to document the resources and their content in a way that will foster their discoverability in data catalogs. Compliance with the VideoObject elements contributes to search engine optimization, as search engines like Google, Bing and others “reward” metadata published in formats compatible with the schema.org recommendations. { &quot;repositoryid&quot;: &quot;string&quot;, &quot;published&quot;: 0, &quot;overwrite&quot;: &quot;no&quot;, &quot;metadata_information&quot;: {}, &quot;video_description&quot;: {}, &quot;provenance&quot;: [], &quot;tags&quot;: [], &quot;lda_topics&quot;: [], &quot;embeddings&quot;: [], &quot;additional&quot;: { } } When published in a NADA catalog, the metadata related to video files will appear in a specific tab. 11.1 Augmenting video metadata Videos typically come with limited metadata. To make them more discoverable, a transcription of the video content can be generated, stored, and indexed in the catalog. The metadata schema we propose includes an element transcription that can store transcriptions (and possibly their automatically-generated translations) in the video metadata. Word embedding models and topic models can be applied to the transcriptions to further augment the metadata. This will significantly increase the discoverability of the resource, and offer the possibility to apply semantic searchability on video metadata. Machine learning speech-to-text solutions are available (although not for all languages) to automatically generate transcriptions at a low cost. This includes commercial applications like Whisper by openAI, Microsoft Azure, or Amazon Transcribe. Open source solutions in Python also exist. Transcriptions of videos published on Youtube are available on-line (the example below was extracted from https://www.youtube.com/watch?v=Axs8NPVYmms). Note that some care must be taken when adding automatic speech transcriptions into your metadata, as the transcriptions are not always perfect and may return unexpected results. This will be the case when the sound quality is low, or when the video includes sections in an unknown language (see the example below, of a video in English that includes a brief segmnent in Somali; the speech-to-text algorithm may in such case attempt to transcribe text it does not recognize, returning invalid information). 11.2 Schema description The first three elements of the schema (repositoryid, published, and overwrite) are not part of the video metadata. They are parameters used to indicate how the video metadata will be published in a NADA catalog. repositoryid identifies the collection in which the metadata will be published. By default, the metadata will be published in the central catalog. To publish them in a collection, the collection must have been previously created in NADA. published: Indicates whether the metadata must be made visible to visitors of the catalog. By default, the value is 0 (unpublished). This value must be set to 1 (published) to make the metadata visible. overwrite: Indicates whether metadata that may have been previously uploaded for the same video can be overwritten. By default, the value is “no”. It must be set to “yes” to overwrite existing information. Note that a video will be considered as being the same as a previously uploaded one if the identifier provided in the metadata element video_description &gt; idno is the same. 11.2.1 Metadata information metadata_information [Optional ; Not Repeatable] The metadata information set is used to document the video metadata (not the video itself). This provides information useful for archiving purposes. This set is optional. It is recommended however to enter at least the identification and affiliation of the metadata producer, and the date of creation of the metadata. One reason for this is that metadata can be shared and harvested across catalogs/organizations, so metadata produced by one organization can be found in other data centers. &quot;metadata_information&quot;: { &quot;title&quot;: &quot;string&quot;, &quot;idno&quot;: &quot;string&quot;, &quot;producers&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;abbr&quot;: &quot;string&quot;, &quot;affiliation&quot;: &quot;string&quot;, &quot;role&quot;: &quot;string&quot; } ], &quot;production_date&quot;: &quot;string&quot;, &quot;version&quot;: &quot;string&quot; } title [Optional ; Not Repeatable ; String] The title of the video. idno [Optional ; Not Repeatable ; String] A unique identifier for the metadata document (unique in the catalog; ideally also unique globally). This is different from the video unique ID (see idno element in section video_description below), although it is good practice to generate identifiers that would maintain an easy connection between the metadata idno element and the video idno found under video_description (see below). producers [Optional ; Repeatable] This refers to the producer(s) of the metadata, NOT to the producer(s) of the video. This could for example be the data curator in a data center. name [Optional ; Not repeatable ; String] Name of the metadata producer/curator. An alternative to entering the name of the curator (e.g. for privacy protection purpose) is to enter the curator ID (see the element abbr below) abbr [Optional ; Not repeatable ; String] Can be used to provide an ID of the metadata producer/curator. affiliation [Optional ; Not repeatable ; String] Affiliation of the metadata producer/curator. role [Optional ; Not repeatable ; String] Specific role of the metadata producer/curator. production_date [Optional ; Not repeatable ; String] Date the metadata (not the table) was produced. version [Optional ; Not repeatable ; String] Version of the metadata (not version of the table). 11.2.2 Video description video_description [Required ; Not Repeatable] The video_description section contains all elements that will be used to describe the video and its content. These are the elements that will be indexed and made searchable when published in a data catalog. idno [Mandatory, Not Repeatable ; String] idno is an identification number that is used to uniquely identify a video in a catalog. It will also help users of the data cite the video properly. The best option is to obtain a Digital Object Identifier (DOI) for the video, as it will ensure that the ID is unique globally. Alternatively, it can be an identifier constructed by an organization using a consistent scheme. Note that the schema allows you to provide more than one identifier for a video (see identifiers below). This element maps to the “identifier” element in the Dublin Core. identifiers [Optional ; Repeatable] &quot;identifiers&quot;: [ { &quot;type&quot;: &quot;string&quot;, &quot;identifier&quot;: &quot;string&quot; } ] This element is used to enter video identifiers other than the idno element described above). It can for example be a Digital Object Identifier (DOI). Note that the identifier entered in idno can be repeated here, allowing to attach a “type” attribute to it. - type [Optional ; Not repeatable ; String] The type of unique identifier, e.g., “DOI”. - value [Required ; Not repeatable ; String] The identifier. title [Required ; Not repeatable ; String] The title of the video. This element maps to the element caption in VideoObject. alt_title [Optional ; Not repeatable ; String] An alias for the video title. This element maps to the element alternateName in VideoObject. description [Optional ; Not repeatable ; String] A brief description of the video, typically about a paragraph long (around 150 to 250 words). This element maps to the element abstract in VideoObject. genre [Optional ; Repeatable ; String] The genre of the video, broadcast channel or group. This is a VideoObject element. A controlled vocabulary can be used. keywords [Optional ; Repeatable] &quot;keywords&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;vocabulary&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ] A list of keywords that provide information on the core content of the video. Keywords provide a convenient solution to improve the discoverability of the video, as it allows terms and phrases not found elsewhere in the video metadata to be indexed and to make the video discoverable by text-based search engines. A controlled vocabulary will preferably be used (although not required), such as the UNESCO Thesaurus. The list can combine keywords from multiple controlled vocabularies, and user-defined keywords. - name [Required ; Not repeatable ; String] The keyword itself. - vocabulary [Optional ; Not repeatable ; String] The controlled vocabulary (including version number or date) from which the keyword is extracted, if any. - uri [Optional ; Not repeatable ; String] The URL of the controlled vocabulary from which the keyword is extracted, if any. my_video &lt;- list( # ... , video_description = list( # ... , keywords = list( list(name = &quot;Migration&quot;, vocabulary = &quot;Unesco Thesaurus (June 2021)&quot;, uri = &quot;http://vocabularies.unesco.org/browser/thesaurus/en/page/concept427&quot;), list(name = &quot;Migrants&quot;, vocabulary = &quot;Unesco Thesaurus (June 2021)&quot;, uri = &quot;http://vocabularies.unesco.org/browser/thesaurus/en/page/concept427&quot;), list(name = &quot;Refugee&quot;, vocabulary = &quot;Unesco Thesaurus (June 2021)&quot;, uri = &quot;http://vocabularies.unesco.org/browser/thesaurus/en/page/concept427&quot;), list(name = &quot;Forced displacement&quot;), list(name = &quot;Internally displaced population (IDP)&quot;) ), # ... ), # ... ) topics [Optional ; Repeatable] &quot;topics&quot;: [ { &quot;id&quot;: &quot;string&quot;, &quot;name&quot;: &quot;string&quot;, &quot;parent_id&quot;: &quot;string&quot;, &quot;vocabulary&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ] Information on the topics covered in the video. A controlled vocabulary will preferably be used, for example the CESSDA Topics classification, a typology of topics available in 11 languages; or the Journal of Economic Literature (JEL) Classification System, or the World Bank topics classification. Note that you may use more than one controlled vocabulary. This element is a block of five fields: id [Optional ; Not repeatable ; String] The identifier of the topic, taken from a controlled vocabulary. name [Required ; Not repeatable ; String] The name (label) of the topic, preferably taken from a controlled vocabulary. parent_id [Optional ; Not repeatable ; String] The parent identifier of the topic (identifier of the item one level up in the hierarchy), if a hierarchical controlled vocabulary is used. vocabulary [Optional ; Not repeatable ; String] The name (including version number) of the controlled vocabulary used, if any. uri [Optional ; Not repeatable ; String] The URL to the controlled vocabulary used, if any. my_video &lt;- list( # ... , video_description = list( # ... , topics = list( list(name = &quot;Demography.Migration&quot;, vocabulary = &quot;CESSDA Topic Classification&quot;, uri = &quot;https://vocabularies.cessda.eu/vocabulary/TopicClassification&quot;), list(name = &quot;Demography.Censuses&quot;, vocabulary = &quot;CESSDA Topic Classification&quot;, uri = &quot;https://vocabularies.cessda.eu/vocabulary/TopicClassification&quot;), list(id = &quot;F22&quot;, name = &quot;International Migration&quot;, parent_id = &quot;F2 - International Factor Movements and International Business&quot;, vocabulary = &quot;JEL Classification System&quot;, uri = &quot;https://www.aeaweb.org/econlit/jelCodes.php?view=jel#J&quot;), list(id = &quot;O15&quot;, name = &quot;Human Resources - Human Development - Income Distribution - Migration&quot;, parent_id = &quot;O1 - Economic Development&quot;, vocabulary = &quot;JEL Classification System&quot;, uri = &quot;https://www.aeaweb.org/econlit/jelCodes.php?view=jel#J&quot;), list(id = &quot;O12&quot;, name = &quot;Microeconomic Analyses of Economic Development&quot;, parent_id = &quot;O1 - Economic Development&quot;, vocabulary = &quot;JEL Classification System&quot;, uri = &quot;https://www.aeaweb.org/econlit/jelCodes.php?view=jel#J&quot;), list(id = &quot;J61&quot;, name = &quot;Geographic Labor Mobility - Immigrant Workers&quot;, parent_id = &quot;J6 - Mobility, Unemployment, Vacancies, and Immigrant Workers&quot;, vocabulary = &quot;JEL Classification System&quot;, uri = &quot;https://www.aeaweb.org/econlit/jelCodes.php?view=jel#J&quot;) ), # ... ), ) persons [Optional ; Repeatable] &quot;persons&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;role&quot;: &quot;string&quot; } ] A list of persons who appear in the video. - name [Required ; Not repeatable ; String] The name of the person. - role [Optional ; Not repeatable, String] The role of the person mentioned in name. my_video &lt;- list( metadata_information = list( # ... ), video_description = list( # ... , persons = list( list(name = &quot;John Smith&quot;, role = &quot;Keynote speaker&quot;), list(name = &quot;Jane Doe&quot;, role = &quot;Debate moderator&quot;) ), # ... ) main_entity [Optional ; Not repeatable ; String] Indicates the primary entity described in the video. This element maps to the element mainEntity in VideoObject. date_created [Optional, Not Repeatable ; String] The date the video was created. It is recommended to enter the date in the ISO 8601 format (YYYY-MM-DD or YYYY-MM or YYYY). The date the video is created refers to the date that the video was produced and considered ready for dissemination. date_published [Optional, Not Repeatable ; String] The date the video was published. It is recommended to use the ISO 8601 format (YYYY-MM-DD or YYYY-MM or YYYY). version [Optional, Not Repeatable ; String] The version of the video refers to the published version of the video. status [Optional ; Not repeatable, String] The status of the video in terms of its stage in a lifecycle. A controlled vocabulary should be used. Example terms include {Incomplete, Draft, Published, Obsolete}. Some organizations define a set of terms for the stages of their publication lifecycle. This element maps to the element creativeWorkStatus in VideoObject. country [Optional ; Repeatable] &quot;country&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;code&quot;: &quot;string&quot; } ] The list of countries (or regions) covered by the video, if applicable. This refers to the content of the video, not to the country where the video was released. This is a repeatable block of two elements: - name [Required ; Not repeatable ; String] The country/region name. Note that many organizations have their own policies on the naming of countries/regions/economies/territories, which data curators will have to comply with. - code [Optional ; Not repeatable ; String] The country/region code (entered as a string, even for numeric codes). It is recommended to use a standard list of countries and regions, such as the ISO country list (ISO 3166). spatial_coverage [Optional ; Not repeatable ; String] Indicates the place(s) which are depicted or described in the video. This element maps to the element contentLocation in VideoObject. This element complements the ref_country element. It can be used to qualify the geographic coverage of the video, in the form of a free text. content_reference_time [Optional ; Not repeatable ; String] The specific time described by the video, for works that emphasize a particular moment within an event. This element maps to the element contentReferenceTime in VideoObject. temporal_coverage [Optional ; Not repeatable ; String] Indicates the period that the video applies to, i.e. that it describes, either as a DateTime or as a textual string indicating a time period in ISO 8601 time interval format. This element maps to the element temporalCoverage in VideoObject. recorded_at [Optional ; Not repeatable ; String] This element maps to the element recordedAt in VideoObject schema. It identifies the event where the video was recorded (e.g., a conference, or a demonstration). audience [Optional ; Not repeatable ; String] A brief description of the intended audience of the video, i.e. the group for whom it was created. bbox [Optional ; Repeatable] &quot;bbox&quot;: [ { &quot;west&quot;: &quot;string&quot;, &quot;east&quot;: &quot;string&quot;, &quot;south&quot;: &quot;string&quot;, &quot;north&quot;: &quot;string&quot; } ] This element is used to define one or multiple bounding box(es), which are the (rectangular) fundamental geometric description of the geographic coverage of the video. A bounding box is defined by west and east longitudes and north and south latitudes, and includes the largest geographic extent of the video’s geographic coverage. The bounding box provides the geographic coordinates of the top left (north/west) and bottom-right (south/east) corners of a rectangular area. This element can be used in catalogs as the first pass of a coordinate-based search. - west [Required ; Not repeatable ; String] West longitude of the box - east [Required ; Not repeatable ; String] East longitude of the box - south [Required ; Not repeatable ; String] South latitude of the box - north [Required ; Not repeatable ; String] North latitude of the box language [Optional, Repeatable] &quot;language&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;code&quot;: &quot;string&quot; } ] Most videos will only be provided in one language. This is however a repeatable field, to allow for more than one language to be listed. For the language code, ISO codes will preferably be used. The language refers to the language in which the video is published. This is a block of two elements (at least one must be provided for each language): - name [Optional ; Not repeatable ; String] The name of the language. - code [Optional ; Not repeatable ; String] The code of the language. The use of ISO 639-2 (the alpha-3 code in Codes for the representation of names of languages) is recommended. Numeric codes must be entered as strings. creator [Optional, Not repeatable ; String] Organization or person who created/authored the video. production_company [Optional, Not repeatable ; String] The production company or studio responsible for the item. This element maps to the element productionCompany in VideoObject. publisher [Optional, Not repeatable ; String] my_video = list( # ... , video_description = list( # ... , publisher = &quot;@@@@@&quot;, # ... ) ) repository [Optional ; Not repeatable ; String] The name of the repository (organization). contacts [Optional, Repeatable] Users of the video may need further clarification and information. This section may include the name-affiliation-email-URI of one or multiple contact persons. This block of elements will identify contact persons who can be used as resource persons regarding problems or questions raised by the user community. The URI attribute should be used to indicate a URN or URL for the homepage of the contact individual. The email attribute is used to indicate an email address for the contact individual. It is recommended to avoid putting the actual name of individuals. The information provided here should be valid for the long term. It is therefore preferable to identify contact persons by a title. The same applies for the email field. Ideally, a “generic” email address should be provided. It is easy to configure a mail server in such a way that all messages sent to the generic email address would be automatically forwarded to some staff members. &quot;contacts&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;role&quot;: &quot;string&quot;, &quot;affiliation&quot;: &quot;string&quot;, &quot;email&quot;: &quot;string&quot;, &quot;telephone&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ] name [Required, Not repeatable, String] Name of a person or unit (such as a data help desk). It will usually be better to provide a title/function than the actual name of the person. Keep in mind that people do not stay forever in their position. role [Optional, Not repeatable, String] The specific role of name, in regards to supporting users. This element is used when multiple names are provided, to help users identify the most appropriate person or unit to contact. affiliation [Optional, Not repeatable, String] Affiliation of the person/unit. email [Optional, Not repeatable, String] E-mail address of the person. telephone [Optional, Not repeatable, String] A phone number that can be called to obtain information or provide feedback on the table. This should never be a personal phone number; a corporate number (typically of a data help desk) should be provided. uri [Optional, Not repeatable, String] A link to a website where contact information for name can be found. contributors [Optional, Repeatable] &quot;contributors&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;affiliation&quot;: &quot;string&quot;, &quot;abbr&quot;: &quot;string&quot;, &quot;role&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ] Identifies the person(s) and/or organization(s) who contributed to the production of the video. The role attribute allows defining what the specific contribution of the identified person or organization was. - name [Optional, Not Repeatable ; String] The name of the contributor (person or organization). - affiliation [Optional, Not Repeatable ; String] The affiliation of the contributor. - abbr [Optional, Not Repeatable ; String] The abbreviation for the institution which has been listed as the affiliation of the contributor. - role [Optional, Not Repeatable ; String] The specific role of the contributor. This could for example be “Cameraman”, “Sound engineer”, etc. - uri [Optional, Not Repeatable ; String] A URI (link to a website, or email address) for the contributor. my_video = list( # ... , video_description = list( # ... , contributors = list( list( name = &quot;&quot;, affiliation = &quot;&quot;, abbr = &quot;&quot;, role = &quot;&quot;, uri = &quot;&quot;) ), # ... ) ) sponsors [Optional ; Repeatable] &quot;sponsors&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;abbr&quot;: &quot;string&quot;, &quot;grant&quot;: &quot;string&quot;, &quot;role&quot;: &quot;string&quot; } ] This element is used to list the funders/sponsors of the video. If different funding agencies financed different stages of the production process, use the “role” attribute to distinguish them. - name [Required ; Not repeatable ; String] The name of the sponsor (person or organization) - abbr [Optional ; Not repeatable ; String] The abbreviation (acronym) of the sponsor. - grant [Optional ; Not repeatable ; String] The grant (or contract) number. - role [Optional ; Not repeatable ; String] The specific role of the sponsor. translators [Optional ; Repeatable] &quot;translators&quot;: [ { &quot;first_name&quot;: &quot;string&quot;, &quot;initial&quot;: &quot;string&quot;, &quot;last_name&quot;: &quot;string&quot;, &quot;affiliation&quot;: &quot;string&quot; } ] Organization or person who adapted the video to different languages. This element maps to the element translator in VideoObject. - first_name [Optional ; Not repeatable ; String] The first name of the translator. - initial [Optional ; Not repeatable ; String] The initials of the translator. - last_name [Optional ; Not repeatable ; String] The last name of the translator. - affiliation [Optional ; Not repeatable ; String] The affiliation of the translator. is_based_on [Optional ; Not repeatable, String] A resource from which this video is derived or from which it is a modification or adaption. This element maps to the element isBasedOn in VideoObject. is_part_of [Optional ; Not repeatable, String] Indicates another video that this video is part of. This element maps to the element isPartOf in VideoObject. relations [Optional ; Repeatable, String] &quot;relations&quot;: [ &quot;string&quot; ] Defines, as a free text field, the relation between the video being documented and other resources. This is a Dublin Core element. video_provider [Optional ; Not repeatable, String] The person or organization who provides the video. This element maps to the element provider in VideoObject. video_url [Optional ; Not repeatable, String] URL of the video. This element maps to the element url in VideoObject. embed_url [Optional ; Not repeatable, String] A URL pointing to a player for a specific video. This element maps to the element embedUrl in VideoObject. For example, “https://www.youtube.com/embed/7Aif1xjstws” To be embedded, a video must be hosted on a video sharing platform like Youtube (www.youtube.com). To obtain the “embed link” from youtube, click on the “Share” button, then “Embed”. In the result box, select the content of the element src =. encoding_format [Optional ; Not repeatable, String] The video file format, typically expressed using a MIME format. This element corresponds to the “encodingFormat” element of VideoObject and maps to the element format of the Dublin Core. duration [Optional ; Not repeatable, String] The duration of the item (movie, audio recording, event, etc.) in ISO 8601 format. This element is a VideoObject element. ISO 8601 durations are expressed using the following format, where (n) is replaced by the value for each of the date and time elements that follows the (n). For example: (3)H means 3 hours. P(n)Y(n)M(n)DT(n)H(n)M(n)S Where: P is the Period designator and is always placed at the beginning of the duration (n)Y represents the number of years (n)M represents the number of months (n)W represents the number of weeks (n)D represents the number of days T is the Time designator and always precedes the time components (n)H represents the number of hours (n)M represents the number of minutes (n)S represents the number of seconds For example, P1Y2M20DT3H30M8S represents a duration of one year, two months, twenty days, three hours, thirty minutes, and eight seconds. Date and time elements including their designator may be omitted if their value is zero, and lower-order elements may also be omitted for reduced precision. For example, “P23DT23H” and “P4Y” are both acceptable duration representations. As M can represent both Month and Minutes, the time designator T is used. For example, “P1M” is a one-month duration and “PT1M” is a one-minute duration. This information on the ISO 8601 was adapted from wikipedia where more detailed information can be found. rights [Optional ; Not repeatable, String] A textual description of the rights associated to the video. If a copyright is available, the three following elements will be used instead of this element. copyright_holder [Optional ; Not repeatable, String] The party holding the legal copyright to the video. This element corresponds to the “copyrightHolder” element of VideoObject. copyright_notice [Optional ; Not repeatable, String] Text of a notice appropriate for describing the copyright aspects of the video, ideally indicating the owner of the copyright. This element corresponds to the “copyrightNotice” element of VideoObject. copyright_year [Optional ; Not repeatable, String] The year during which the claimed copyright for the video was first asserted. This element corresponds to the “copyrightYear” element of VideoObject. credit_text [Optional ; Not repeatable, String] This element can be used to credit the person(s) and/or organization(s) associated with a published video. This element corresponds to the “creditText” element of VideoObject. citation [Optional ; Not repeatable, String] This element provides a required or recommended citation of the audio file. transcript [Optional ; Repeatable, String] &quot;transcript&quot;: [ { &quot;language_name&quot;: &quot;string&quot;, &quot;language_code&quot;: &quot;string&quot;, &quot;text&quot;: &quot;string&quot; } ] The transcript of the video content, provided as a text. Note that if the text is very long, an alternative is to save it in a separate text file and to make it available in a data catalog as an external resource. - language_name [Optional ; Not repeatable ; String] The name of the language of the transcript. - language_code [Optional ; Not repeatable ; String] The code of the language of the transcript, preferably the ISO code. - text [Optional ; Not repeatable ; String] The transcript itself. Adding the transcript in the metadata will make the video much more discoverable, as the content of the transcription can be indexed in catalogs. media [Optional ; Repeatable ; String] &quot;media&quot;: [ &quot;string&quot; ] A description of the media on which the recording is stored (other than the online file format); e,g., “CD-ROM”. album [Optional ; Repeatable] &quot;album&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;description&quot;: &quot;string&quot;, &quot;owner&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ] When a video is published in a catalog containing many other videos, it may be desirable to organize them by album. Albums are collections of videos organized by theme, period, location, or other criteria. One video can belong to more than one album. Albums are “virtual collections”. - name [Optional ; Not Repeatable ; String] The name (label) of the album. - description [Optional ; Not Repeatable ; String] A brief description of the album. - owner [Optional ; Not Repeatable ; String] The owner of the album. - uri [Optional ; Not Repeatable ; String] A link (URL) to the album. provenance [Optional ; Repeatable] Metadata can be programmatically harvested from external catalogs. The provenance group of elements is used to store information on the provenance of harvested metadata, and on alterations that may have been done to the harvested metadata. These elements are NOT part of the IPTC or DCMI metadata standard. &quot;provenance&quot;: [ { &quot;origin_description&quot;: { &quot;harvest_date&quot;: &quot;string&quot;, &quot;altered&quot;: true, &quot;base_url&quot;: &quot;string&quot;, &quot;identifier&quot;: &quot;string&quot;, &quot;date_stamp&quot;: &quot;string&quot;, &quot;metadata_namespace&quot;: &quot;string&quot; } } ] origin_description [Required ; Not repeatable] The origin_description elements are used to describe when and from where metadata have been extracted or harvested. harvest_date [Required ; Not repeatable ; String] The date and time the metadata were harvested, in ISO 8601 format. altered [Optional ; Not repeatable ; Boolean] A boolean variable (“true” or “false”; “true by default) indicating whether the harvested metadata have been modified before being re-published. In many cases, the unique identifier of the study (element idno in the Study Description / Title Statement section) will be modified when published in a new catalog. base_url [Required ; Not repeatable ; String] The URL from where the metadata were harvested. identifier [Optional ; Not repeatable ; String] The unique dataset identifier (idno element) in the source catalog. When harvested metadata are re-published in a new catalog, the identifier will likely be changed. The identifier element in provenance is used to maintain traceability. date_stamp [Optional ; Not repeatable ; String] The datestamp (in UTC date format) of the metadata record in the originating repository (this should correspond to the date the metadata were last updated in the source catalog). metadata_namespace [Optional ; Not repeatable ; String] @@@@@@@ tags [Optional ; Repeatable] As shown in section 1.7 of the Guide, tags, when associated with tag_groups, provide a powerful and flexible solution to enable custom facets (filters) in data catalogs. See section 1.7 for an example in R. &quot;tags&quot;: [ { &quot;tag&quot;: &quot;string&quot;, &quot;tag_group&quot;: &quot;string&quot; } ] tag [Required ; Not repeatable ; String] A user-defined tag. tag_group [Optional ; Not repeatable ; String] A user-defined group (optional) to which the tag belongs. Grouping tags allows implementation of controlled facets in data catalogs. lda_topics [Optional ; Not repeatable] We mentioned in Chapter 1 the importance of producing rich metadata, and the opportunities that machine learning offers to enrich (or “augment”) metadata in a largely automated manner. One application of machine learning, more specifically of natural language processing, to enrich metadata related to publications is the topic extraction using Latent Dirichlet Allocation (LDA) models. LDA models must be trained on large corpora of documents. They do not require any pre-defined taxonomy of topics. The approach consists of “clustering” words that are likely to appear in similar contexts (the number of “clusters” or “topics” is a parameter provided when training a model). Clusters of related words form “topics”. A topic is thus defined by a list of keywords, each one of them provided with a score indicating its importance in the topic. Typically, the top 10 words that represent a topic will be used to describe it. The description of the topics covered by a document can be indexed to improve searchability (possibly in a selective manner, by setting thresholds on the topic shares and word weights). Once an LDA topic model has been trained, it can be used to infer the topic composition of any text. In the case of indicators and time series, this text will be a concatenation of some metadata elements including the series’ name, definitions, keywords, concepts, and possibly others. This inference will then provide the share that each topic represents in the metadata. The sum of all represented topics is 1 (100%). &quot;lda_topics&quot;: [ { &quot;model_info&quot;: [ { &quot;source&quot;: &quot;string&quot;, &quot;author&quot;: &quot;string&quot;, &quot;version&quot;: &quot;string&quot;, &quot;model_id&quot;: &quot;string&quot;, &quot;nb_topics&quot;: 0, &quot;description&quot;: &quot;string&quot;, &quot;corpus&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ], &quot;topic_description&quot;: [ { &quot;topic_id&quot;: null, &quot;topic_score&quot;: null, &quot;topic_label&quot;: &quot;string&quot;, &quot;topic_words&quot;: [ { &quot;word&quot;: &quot;string&quot;, &quot;word_weight&quot;: 0 } ] } ] } ] The lda_topics element includes the following metadata fields. model_info [Optional ; Not repeatable] Information on the LDA model. source [Optional ; Not repeatable ; String] The source of the model (typically, an organization). author [Optional ; Not repeatable ; String] The author(s) of the model. version [Optional ; Not repeatable ; String] The version of the model, which could be defined by a date or a number. model_id [Optional ; Not repeatable ; String] The unique ID given to the model. nb_topics [Optional ; Not repeatable ; Numeric] The number of topics in the model (the number of topics to be extracted from a corpus is the key parameter of any LDA model). description [Optional ; Not repeatable ; String] A brief description of the model. corpus [Optional ; Not repeatable ; String] A brief description of the corpus on which the LDA model was trained. uri [Optional ; Not repeatable ; String] A link to a web page where additional information on the model is available. topic_description [Optional ; Repeatable] The topic composition extracted from selected elements of the series metadata (typically, the name, definitions, and concepts). topic_id [Optional ; Not repeatable ; String] The identifier of the topic; this will often be a sequential number (Topic 1, Topic 2, etc.). topic_score [Optional ; Not repeatable ; Numeric] The share of the topic in the metadata (%). topic_label [Optional ; Not repeatable ; String] The label of the topic, if any (not automatically generated by the LDA model). topic_words [Optional ; Not repeatable] The list of N keywords describing the topic (e.g., the top 5 words). word [Optional ; Not repeatable ; String] The word. word_weight [Optional ; Not repeatable ; Numeric] The weight of the word in the definition of the topic. embeddings [Optional ; Repeatable] In Chapter 1 (section 1.n), we briefly introduced the concept of word embeddings and their use in implementation of semantic search tools. Word embedding models convert text (words, phrases, documents) into large-dimension numeric vectors (e.g., a vector of 100 or 200 numbers) that are representative of the semantic content of the text. The vectors are generated by submitting a text to a pre-trained word embedding model (possibly via an API). The word vectors do not have to be stored in the series/indicator metadata to be exploited by search engines. When a semantic search tool is implemented in a catalog, the vectors will be stored in a database end processed by a tool like Milvus. A metadata element is however provided to store the vectors for preservation and sharing purposes. This block of metadata elements is repeatable, allowing multiple vectors to be stored. When using vectors in a search engine, it is critical to only use vectors generated by one same model. &quot;embeddings&quot;: [ { &quot;id&quot;: &quot;string&quot;, &quot;description&quot;: &quot;string&quot;, &quot;date&quot;: &quot;string&quot;, &quot;vector&quot;: null } ] The embeddings element contains four metadata fields: id [Optional ; Not repeatable ; String] A unique identifier of the word embedding model used to generate the vector. description [Optional ; Not repeatable ; String] A brief description of the model. This may include the identification of the producer, a description of the corpus on which the model was trained, the identification of the software and algorithm used to train the model, the size of the vector, etc. date [Optional ; Not repeatable ; String] The date the model was trained (or a version date for the model). vector [Required ; Not repeatable ; @@@@] The numeric vector representing the video metadata. additional [Optional ; Not repeatable] The additional element allows data curators to add their own metadata elements to the schema. All custom elements must be added within the additional block; embedding them elsewhere in the schema would cause schema validation to fail. 11.3 Complete example 11.3.1 In R library(nadar) # ---------------------------------------------------------------------------------- # Enter credentials (API confidential key) and catalog URL my_keys &lt;- read.csv(&quot;C:/confidential/my_API_keys.csv&quot;, header=F, stringsAsFactors=F) set_api_key(&quot;my_keys[1,1&quot;) set_api_url(&quot;https://.../index.php/api/&quot;) set_api_verbose(FALSE) # ---------------------------------------------------------------------------------- setwd(&quot;C:/my_videos&quot;) id = &quot;MDA_VDO_001&quot; thumb = &quot;vdo_001.jpg&quot; # Generate the metadata my_video = list( metadata_information = list( title = &quot;Mogadishu, Somalia: A Call for Help&quot;, idno = id, producers = list( list(name = &quot;John Doe&quot;, affiliation = &quot;National Library&quot;) ), production_date = &quot;2021-09-03&quot; ), video_description = list( idno = id, title = &quot;Mogadishu, Somalia: A Call for Help&quot;, alt_title = &quot;Somalia: Guterres in Mogadishu&quot;, date_published = &quot;2011-09-01&quot;, description = &quot;During a landmark visit, the United Nations High Commissioner for Refugees calls on the international community to rapidly increase aid to Somalia.&quot;, genre = &quot;Documentary&quot;, persons = list( list(name = &quot;António Guterres&quot;, role = &quot;High Commissioner for Refugees&quot;), list(name = &quot;Fadhumo&quot;, role = &quot;Somali internally displaced person (IDP)&quot;) ), main_entity = &quot;United Nations High Commission for Refugees (UNHCR), the UN Refugee Agency&quot;, country = list( list(name = &quot;Somalia&quot;, code = &quot;SOM&quot;) ), spatial_coverage = &quot;Mogadishu, Somalia&quot;, content_reference_time = &quot;2011-09&quot;, languages = list( list(name = &quot;English&quot;, code = &quot;EN&quot;) ), creator = &quot;United Nations High Commission for Refugees (UNHCR)&quot;, video_url = &quot;https://www.youtube.com/watch?v=7Aif1xjstws&quot;, embed_url = &quot;https://www.youtube.com/embed/7Aif1xjstws&quot;, transcript = list( list( language = &quot;English&quot;, transcript = &quot;Mogadishu is a dangerous place securityhas improved since al-shabaab militias withdrew last month but not a lot despite the insecurity hundreds of thousands of Somalis have been streaming into the capital from surrounding areas they&#39;re fleeing the worst famine to strike the region in 60 years in a landmark visit the UN High Commissioner for Refugees Antonio Gutierrez traveled to Mogadishu this week to visit with Somalis he urged the international community to rapidly increase aid to people who have been through so much already makes us very emotional is to feel that for 2020 as these people has been suffering the suffering enormously of course there is a large responsibility of Somalis in the way things have happened but let&#39;s also recognize that international community there sometimes also be part of the problem and not part of the solution some aid is getting through fatuma has just been registered to receive assistance from UNHCR she left her home and is now seeking help in the capital she is camped with thousands of others in a settlement not far from the shoreline UNHCR is providing plastic sheeting and other supplies there are also food distributions there are a total of four hundred thousand displaced people in Mogadishu 100,000 arrived in the past two months alone getting assistance to them despite the dangers is an urgent priority otherwise settlements like these are certain to you&quot; ) ), duration = &quot;PT2M14S&quot; # 2 minutes and 14 seconds ) ) # Publish in the NADA catalog video_add(idno = id, published = 1, overwrite = &quot;yes&quot;, metadata = my_video, thumbnail = thumb) In NADA, the video will now appear in the “All” tab and in the “Videos” tab. If the embed_url element was provided, the video can be played within the NADA page. 11.3.2 In Python # Python script "],["chapter12.html", "Chapter 12 Research projects and scripts 12.1 Rationale 12.2 Motivation for open analytics 12.3 Goal: discoverable code 12.4 Schema description 12.5 Generating compliant metadata", " Chapter 12 Research projects and scripts 12.1 Rationale Documenting, cataloguing and disseminating data has the potential to increase the volume and diversity of data analysis. There is also much value in documenting, cataloguing and disseminating data processing and analysis scripts. Technological solutions such as GitHub, Jupyter Notebooks or Jupiter Lab facilitate the preservation and sharing of code, and enable collaborative work around data analysis. Coding style guides like the Google style guides and the Guide to Reproducible Code in Ecology and Evolution by the British Ecological Society, contribute to foster the usability, adaptability, and reproducibility of code. But these tools and guidelines do not fully address the issue of cataloguing and discoverability of the data processing and analysis programs and scripts. We propose –as a complement to collaboration tools and style guides– a metadata schema to document data analysis projects and scripts. The production of structured metadata will contribute not only to discoverability, but also to the reproducibility, replicability, and auditability of data analytics. There are multiple reasons to make reproducibility, replicability, and auditability of data analytics a component of a data dissemination system. This will: Improve the quality of research and analysis. Public scrutiny enables contestability and independent quality control of the output of research and analysis; these are strong incentives for additional rigor in data analysis. Allow the re-purposing or expansion of analysis by the research community, thereby increasing the relevance, utility and value of both the data and of the analytical work. Strengthen the reputation and credibility of the analysis. Provide students and peers with rich training materials. In some cases, satisfy a requirement imposed by peer reviewed journals or financial sponsors of research activities. For example, the Data and Policy Code of the American Economic Association (accessed on June 29, 2020), states that It is the policy of the American Economic Association to publish papers only if the data and code used in the analysis are clearly and precisely documented, and access to the data and code is clearly and precisely documented and is non-exclusive to the authors. Authors of accepted papers that contain empirical work, simulations, or experimental work must provide, prior to acceptance, information about the data, programs, and other details of the computations sufficient to permit replication, as well as information about access to data and programs. Contribute to assuring the fairness of policy advice and interventions resulting from data analysis. Data analysis may be used to identify or target the beneficiaries of policies and programs, or may contribute otherwise to the design and implementation of development policies and projects. By doing so, they also contribute to identifying populations to be excluded from these interventions. Errors and biases may be introduced in analysis by accidental or intentional human errors, by the algorithms themselves, or they can result from flaws in the data. The analysis that informs such projects and policies should therefore be made auditable and contestable, i.e. documented and published. 12.2 Motivation for open analytics Stodden et al (2013) make a useful distinction between five levels of research openness: Reviewable research. The descriptions of the research methods can be independently assessed, and the results judged credible. This includes both traditional peer review and community review and does not imply reproducibility. Replicable research. Tools are made available that would allow one to duplicate the results of the research, for example by running the authors’ code to produce the plots shown in the publication. (Here tools might be limited in scope, e.g., only essential data or executables, and might only be made available to referees or only upon request.) Confirmable research. The main conclusions of the research can be attained independently without the use of software provided by the author. (But using the complete description of algorithms and methodology provided in the publication and any supplementary materials.) Auditable research. Sufficient records (including data and software) have been archived so that the research can be defended later if necessary or differences between independent confirmations resolved. The archive might be private. Open or Reproducible research. This is auditable research made openly available. This comprised well-documented and fully open code and data that are publicly available that would allow one to (a) fully audit the computational procedure, (b) replicate and also independently reproduce the results of the research, and (c) extend the results or apply the method to new problems. 12.3 Goal: discoverable code Search and filter by title, author, software, method, country, etc. Get links to analytical output and data. Example: search for a “project that implemented multiple imputation in R for a project related to poverty in Kenya”: search for poverty AND “multiple imputation” and filter the results by software / country. Note: the code will also be “attached” to the output page (paper) and to the dataset page of the catalog if they are available in the catalog. image Provide access to scripts with detailed information, including software and libraries used, distribution license, IT requirements, datasets used, list of outputs, and more. image 12.4 Schema description To make data processing and analysis scripts more discoverable and usable, we propose a metadata schema inspired by the schemas available to document datasets. The proposed schema contains two main blocks of metadata elements: the document description intended to document the metadata themselves (the term document refers to the file that will contain the metadata), and the project description used to document the research or analytical work and the related scripts. We also include in the schema the tags, provenance, and additional elements common to all schemas. { &quot;repositoryid&quot;: &quot;string&quot;, &quot;published&quot;: 0, &quot;overwrite&quot;: &quot;no&quot;, &quot;doc_desc&quot;: {}, &quot;project_desc&quot;: {}, &quot;provenance&quot;: [], &quot;tags&quot;: [], &quot;lda_topics&quot;: [], &quot;embeddings&quot;: [], &quot;additional&quot;: { } } 12.4.1 Document description doc_desc [Optional ; Not repeatable] The document description is a description of the metadata file being generated. It provides metadata about the metadata. This block is optional. It is used to document the research project metadata (not the project itself). This information is not needed to document the project; it only provides information, useful for archiving purposes, on the process of generating the project metadata. The information it contains are typically useful to a catalog administrator; they are not useful to the public and do not need to be displayed in the publicly-available catalog interface. This block is optional. It is recommended to enter at least the identification of the metadata producer, her/his affiliation, and the date the metadata were created. One reason for this is that metadata can be shared and harvested across catalogs/organizations, so the metadata produced by one organization can be found in other data centers (complying with standards and schema is precisely intended to facilitate inter-operability of catalogs and automated information sharing). Keeping track of who documented a resource is thus useful. &quot;doc_desc&quot;: { &quot;title&quot;: &quot;string&quot;, &quot;idno&quot;: &quot;string&quot;, &quot;producers&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;abbr&quot;: &quot;string&quot;, &quot;affiliation&quot;: &quot;string&quot;, &quot;role&quot;: &quot;string&quot; } ], &quot;prod_date&quot;: &quot;string&quot;, &quot;version&quot;: &quot;string&quot; } title [Optional ; Not Repeatable ; String] The title of the project. This will usually be the same as the element title in the project description section. idno [Optional ; Not Repeatable ; String] A unique identifier for the metadata document. producers [Optional ; Not Repeatable] A list of producers of the metadata (who may be but do not have to be the authors of the research project and scripts being documented). These can be persons or organizations. The following four elements are used to identify them and specify their specific role as and if relevant (this block of four elements is repeated for each contributor to the metadata): name [Optional ; Not Repeatable ; String] Name of the person or organization who documented the project. abbr: [Optional ; Not Repeatable ; String] The abbreviation of the organization that is referenced under ‘name’ above. affiliation [Optional ; Not Repeatable ; String] Affiliation of the person(s) or organization(s) who documented the project. role [Optional ; Not Repeatable ; String] This attribute is used to distinguish different stages of involvement in the metadata production process. prod_date [Optional ; Not Repeatable ; String] The date the metadata on this project was produced (not distributed or archived), preferably in ISO 8601 format (YYYY-MM-DD or YYY-MM). version [Optional ; Not Repeatable ; String] Documenting a research project is not a trivial exercise. It may happen that, having identified errors or omissions in the metadata or having received suggestions for improvement, a new version of the metadata is produced. This element is used to identify and describe the current version of the metadata. It is good practice to provide a version number, and information on what distinguishes this version from the previous one(s) if relevant. my_project = list( doc_desc = list( idno = &quot;META_RP_001&quot;, producers = list( list(name = &quot;John Doe&quot;, affiliation = &quot;National Data Center of Popstan&quot;) ), prod_date = &quot;2020-12-27&quot;, version = &quot;Version 1.0 - Original version of the documentation provided by the author of the project&quot; ), # ... ) 12.4.2 Project description project_desc [Required ; Not repeatable] The project description contains the metadata related to the project itself. All efforts should be made to provide as much and as detailed information as possible. &quot;project_desc&quot;: { &quot;title_statement&quot;: {}, &quot;abstract&quot;: &quot;string&quot;, &quot;review_board&quot;: &quot;string&quot;, &quot;output&quot;: [], &quot;approval_process&quot;: [], &quot;project_website&quot;: [], &quot;language&quot;: [], &quot;production_date&quot;: &quot;string&quot;, &quot;version_statement&quot;: {}, &quot;errata&quot;: [], &quot;process&quot;: [], &quot;authoring_entity&quot;: [], &quot;contributors&quot;: [], &quot;sponsors&quot;: [], &quot;curators&quot;: [], &quot;reviews_comments&quot;: [], &quot;acknowledgments&quot;: [], &quot;acknowledgment_statement&quot;: &quot;string&quot;, &quot;disclaimer&quot;: &quot;string&quot;, &quot;confidentiality&quot;: &quot;string&quot;, &quot;citation_requirement&quot;: &quot;string&quot;, &quot;related_projects&quot;: [], &quot;geographic_units&quot;: [], &quot;keywords&quot;: [], &quot;themes&quot;: [], &quot;topics&quot;: [], &quot;disciplines&quot;: [], &quot;repository_uri&quot;: [], &quot;license&quot;: [], &quot;copyright&quot;: &quot;string&quot;, &quot;technology_environment&quot;: &quot;string&quot;, &quot;technology_requirements&quot;: &quot;string&quot;, &quot;reproduction_instructions&quot;: &quot;string&quot;, &quot;methods&quot;: [], &quot;software&quot;: [], &quot;scripts&quot;: [], &quot;data_statement&quot;: &quot;string&quot;, &quot;datasets&quot;: [], &quot;contacts&quot;: [] } title_statement [Required ; Non repeatable] The title_statement is a group of five elements, two of them mandatory. &quot;title_statement&quot;: { &quot;idno&quot;: &quot;string&quot;, &quot;identifiers&quot;: [ { &quot;type&quot;: &quot;string&quot;, &quot;identifier&quot;: &quot;string&quot; } ], &quot;title&quot;: &quot;string&quot;, &quot;sub_title&quot;: &quot;string&quot;, &quot;alternate_title&quot;: &quot;string&quot;, &quot;translated_title&quot;: &quot;string&quot; } idno [Required ; Not Repeatable ; String] A unique identifier to the project. Define and use a consistent scheme to use. Avoid including spaces in the ID. The ID number of a research project is a unique number that is used to identify a particular project. This ID number is a vital reference. A research project can be the formal cause of a survey, scripts, tables and knowledge products. Do not include spaces in the idno element. Use a system that guarantees uniqueness of the ID (DOI, own reference number). identifiers [Optional ; Repeatable] This repeatable element is used to enter identifiers (IDs) other than the idno entered in the title_statement. It can for example be a Digital Object Identifier (DOI). Note that the identifier entered in idno can (and in some cases should) be repeated here. The element idno does not provide a type parameter; repeating it in this section makes it possible to add that information. type [Optional ; Not repeatable ; String] The type of unique ID, e.g. “DOI”. identifier [Required ; Not repeatable ; String] The identifier itself. title [Required ; Not Repeatable ; String] The title is the official name of the project as it may be stated in reports, papers or other documents. The title will in most cases be identical to the Document Title (see above). The title may correspond to the title of an academic paper, of a project impact evaluation, etc. Pay attention to capitalization in the title. sub_title [Optional ; Not Repeatable ; String] Subtitle is optional and rarely used. A short subtitle for the project. Often the sub title is used to qualify the title or rephrase the title. alternate_title [Optional ; Not Repeatable ; String] An alternate title of the project. This would be any alternate title that would help discover the research project. In countries with more than one official language, a translation of the title may be provided. Likewise, the translated title may simply be a translation into English from a country’s own language. translated_title [Optional ; Not Repeatable ; String] A translated version of the title (this will be used for example when a catalog documents all entries in English, but wants to preserve the title of a project in its original language when the original language is not English). my_project = list( # ... , project_desc = list( title_statement = list( idno = &quot;RR_WB_2020_001&quot;, identifiers = list( list(type = &quot;DOI&quot;, identifier = &quot;XXX-XXX-XXXX&quot;) ), date = &quot;2020&quot;, title = &quot;Predicting Food Crises - Econometric Model&quot; ), # ... ), # ... ) abstract [Optional ; Non repeatable ; String] The abstract should provide a clear summary of the purposes, objectives and content of the project. An abstract can make reference to the various outputs associated with the research project. Example extracted from https://microdata.worldbank.org/index.php/catalog/4218: my_project = list( # ... , project_desc = list( # ... , abstract = &quot;Food price inflation is an important metric to inform economic policy but traditional sources of consumer prices are often produced with delay during crises and only at an aggregate level. This may poorly reflect the actual price trends in rural or poverty-stricken areas, where large populations reside in fragile situations. This data set includes food price estimates and is intended to help gain insight in price developments beyond what can be formally measured by traditional methods. The estimates are generated using a machine-learning approach that imputes ongoing subnational price surveys, often with accuracy similar to direct measurement of prices. The data set provides new opportunities to investigate local price dynamics in areas where populations are sensitive to localized price shocks and where traditional data are not available.&quot;, # ... ), # ... ) review_board [Optional ; Non repeatable ; String] Information on whether and when the project was submitted, reviewed, and approved by an institutional review board (or independent ethics committee, ethical review board (ERB), research ethics board, or equivalent). output [Optional ; Repeatable] This element will describe and reference all substantial/intended products of the research project, which may include publications, reports, websites, datasets, interactive applications, presentations, visualizations, and others. An output may also be referred to as a “deliverable”. &quot;output&quot;: [ { &quot;type&quot;: &quot;string&quot;, &quot;title&quot;: &quot;string&quot;, &quot;authors&quot;: &quot;string&quot;, &quot;description&quot;: &quot;string&quot;, &quot;abstract&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot;, &quot;doi&quot;: &quot;string&quot; } ] The output is a repeatable block of seven elements, used to document all output of the research project: - type [Optional ; Non repeatable] Type of output. The type of output relates to the media which is used to convey or communicate the intended results, findings or conclusions of the research project. This field may be controlled by a controlled vocabulary. The kind on content could be “Working paper”, “Database”, etc. - title [Required ; Non repeatable] Formal title of the output. Depending upon the kind of output, the title will vary in formality. - authors [Optional ; Non repeatable] Authors of the output; if multiple, they will be listed in one same text field. - description [Optional ; Non repeatable] Brief description of the output (NOT an abstract) - abstract [Optional ; Non repeatable] If the output consists of a document, the abstract will be entered here. - uri [Optional ; Non repeatable] A link where the output or information on the output can be found. - doi [Optional ; Non repeatable]v Digital Object Identifier (DOI) of the output, if available. my_project = list( # ... , project_desc = list( # ... , output = list( list(type = &quot;working paper&quot;, title = &quot;Estimating Food Price Inflation from Partial Surveys&quot;, authors = &quot;Andrée, B. P. J.&quot;, description = &quot;World Bank Policy Research Working Paper&quot;, abstract = &quot;The traditional consumer price index is often produced at an aggregate level, using data from few, highly urbanized, areas. As such, it poorly describes price trends in rural or poverty-stricken areas, where large populations may reside in fragile situations. Traditional price data collection also follows a deliberate sampling and measurement process that is not well suited for monitoring during crisis situations, when price stability may deteriorate rapidly. To gain real-time insights beyond what can be formally measured by traditional methods, this paper develops a machine-learning approach for imputation of ongoing subnational price surveys. The aim is to monitor inflation at the market level, relying only on incomplete and intermittent survey data. The capabilities are highlighted using World Food Programme surveys in 25 fragile and conflict-affected countries where real-time monthly food price data are not publicly available from official sources. The results are made available as a data set that covers more than 1200 markets and 43 food types. The local statistics provide a new granular view on important inflation events, including the World Food Price Crisis of 2007–08 and the surge in global inflation following the 2020 pandemic. The paper finds that imputations often achieve accuracy similar to direct measurement of prices. The estimates may provide new opportunities to investigate local price dynamics in markets where prices are sensitive to localized shocks and traditional data are not available.&quot;, uri = &quot;http://hdl.handle.net/10986/36778&quot;), list(type = &quot;dataset&quot;, title = &quot;Monthly food price estimates&quot;, authors = &quot;Andrée, B. P. J.&quot;, description = &quot;A dataset of derived data, published as open data&quot;, abstract = &quot;Food price inflation is an important metric to inform economic policy but traditional sources of consumer prices are often produced with delay during crises and only at an aggregate level. This may poorly reflect the actual price trends in rural or poverty-stricken areas, where large populations reside in fragile situations. This data set includes food price estimates and is intended to help gain insight in price developments beyond what can be formally measured by traditional methods. The estimates are generated using a machine-learning approach that imputes ongoing subnational price surveys, often with accuracy similar to direct measurement of prices. The data set provides new opportunities to investigate local price dynamics in areas where populations are sensitive to localized price shocks and where traditional data are not available.&quot; uri = &quot;https://microdata.worldbank.org/index.php/catalog/4218&quot;), doi = &quot;https://doi.org/10.48529/2ZH0-JF55&quot;) ), # ... ) approval_process [Optional ; Repeatable] The approval_process is a group of six elements used to describe the formal approval process(es) (if any) that the project had to go through. This may for example include an approval by an Ethics Board to collect new data, followed by an internal review process to endorse the results. &quot;approval_process&quot;: [ { &quot;approval_phase&quot;: &quot;string&quot;, &quot;approval_authority&quot;: &quot;string&quot;, &quot;submission_date&quot;: &quot;string&quot;, &quot;reviewer&quot;: &quot;string&quot;, &quot;review_status&quot;: &quot;string&quot;, &quot;approval_date&quot;: &quot;string&quot; } ] approval_phase [Optional ; Non repeatable] A label that describes the approval phase. approval_authority [Optional ; Non repeatable] Identification of the person(s) or organization(s) whose approval was required or sought. submission_date [Optional ; Non repeatable] The date, entered in ISO 8601 format (YYYY-MM-DD), when the project (or a component of it) was submitted for approval. reviewer [Optional ; Non repeatable] Identification of the reviewer(s). review_status [Optional ; Non repeatable] Status of approval. approval_date [Optional ; Non repeatable] Date the approval was formally received, preferably entered in ISO 8601 format (YYYY-MM-DD). my_project = list( # ... , project_desc = list( # ... , approval_process = list( list(approval_phase = &quot;Authorization to conduct the survey&quot;, approval_authority = &quot;Internal Ethics Board, [Organization]&quot;, submission_date = &quot;2019-01-15&quot;, review_status = &quot;Approved (permission No ABC123)&quot;, approval_date = &quot;2020-04-30&quot;), list(approval_phase = &quot;Review of research output and authorization to publish&quot;, approval_authority = &quot;Internal Ethics Board, [Organization]&quot;, submission_date = &quot;2021-07-15&quot;, review_status = &quot;Approved&quot;, approval_date = &quot;2021-10-30&quot;) ), # ... ) # ... ) project_website [Optional ; Repeatable ; String] URL of the project website. &quot;project_website&quot;: [ &quot;string&quot; ] language [Optional ; Repeatable] A block of two elements describing the language(s) of the project. At least one of the two elements must be provided for each listed language. The use of ISO 639-2 (the alpha-3 code in Codes for the representation of names of languages) is recommended. &quot;language&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;code&quot;: &quot;string&quot; } ] name [Optional ; Not repeatable ; String] The name of the language. code [Optional ; Not repeatable ; String] The code of the language. Numeric codes must be entered as strings. my_project = list( # ... , project_desc = list( # ... , languages = list( list(name = &quot;English&quot;, code = &quot;EN&quot;), list(name = &quot;French&quot;, code = &quot;FR&quot;) ), # ... ) # ... ) production_date The date in ISO 8601 format (YYYY-MM-DD) the project was completed (this refers to the version that is being documented and released.) version_statement [Optional ; Repeatable] This repeatable block of four elements is used to list and describe the successive versions of the project. &quot;version_statement&quot;: { &quot;version&quot;: &quot;string&quot;, &quot;version_date&quot;: &quot;string&quot;, &quot;version_resp&quot;: &quot;string&quot;, &quot;version_notes&quot;: &quot;string&quot; } version [Optional ; Not repeatable ; String] A label describing the version. For example, “Version 1.2” [String] version_date [Optional ; Not repeatable ; String] Date (in ISO 8601 format, YYYY-MM-DD) the version was released [String] version_resp [Optional ; Not repeatable ; String] Person(s) or organization(s) responsible for this version. [String] version_notes [Optional ; Not repeatable ; String] Additional information on the version if any; it is good practice to describe what distinguishes this version from the previous one(s). The version must be entered as a string, even when composed only of numbers. my_project = list( # ... , project_desc = list( # ... , version_statement = list( list(version = &quot;v1.0&quot;, version_date = &quot;2021-12-27&quot;, version_resp = &quot;University of Popstan, Department of Economics&quot;, version_notes = &quot;First version approved for open dissemination&quot;) ), # ... ) errata [Optional ; Repeatable] This field is used to list and describe errata. &quot;errata&quot;: [ { &quot;date&quot;: &quot;string&quot;, &quot;description&quot;: &quot;string&quot; } ] date [Optional ; Not repeatable ; String] Date (in ISO 8601 format, YYYY-MM-DD) the erratum was released. description [Optional ; Not repeatable ; String] Description of the error(s) and measures taken to address it/them. my_project = list( # ... , project_desc = list( # ... , errata = list( list(date = &quot;2021-10-30&quot;, description = &quot;Outliers in the data for Afghanistan resulted in unrealistic model estimates of the food prices for January 2020. In the latest version of the &#39;model.R&#39; script, outliers are detected and dropped from the input data file. The published dataset has been updated.&quot; ) ), # ... ) ) process [Optional ; Repeatable] This element is used to document the life cycle of the research project, from its design and inception to its conclusion. This can include phases of fundraising, IRB, concept note review, data acquisition, analysis, publishing of a working paper, peer review, publishing in journal, presentation to conferences, publishing, evaluation, reporting to sponsors, etc. It is recommended to provide these steps in a chronological order. &quot;process&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;date_start&quot;: &quot;string&quot;, &quot;date_end&quot;: &quot;string&quot;, &quot;description&quot;: &quot;string&quot; } ] name: [Optional ; Not repeatable ; String] This is a header for the phase of the process. date_start [Optional ; Not repeatable ; String] Date the phase started (preferably in ISO 8601 format, YYYY-MM-DD) date_end [Optional ; Not repeatable ; String] Date the phase ended (preferably in ISO 8601 format, YYYY-MM-DD) description [Optional ; Not repeatable ; String] A brief description of the phase. my_project = list( # ... , project_desc = list( # ... , process = list( list(name = &quot;Presentation of the concept note at the Review Committee decision meeting&quot;, date_start = &quot;2018-02-23&quot;, date_end = &quot;2018-02-23&quot;, description = &quot;Presentation of the research objectives and method by the primary investigator to the Review Committee, which resulted in the approval of the concept note.&quot; ), list(name = &quot;Fundraising&quot;, date_start = &quot;2018-02-24&quot;, date_end = &quot;2018-02-30&quot;, description = &quot;Discussion with project sponsors, and conclusion of the funding agreement.&quot; ), list(name = &quot;Data acquisition and analytics&quot;, date_start = &quot;2018-03-15&quot;, date_end = &quot;2019-01-30&quot;, description = &quot;Implementation of web scraping, then data analysis&quot; ), list(name = &quot;Working paper&quot;, date_start = &quot;2019-01-30&quot;, date_end = &quot;2019-02-25&quot;, description = &quot;Production (and copy editing) of the working paper&quot; ), list(name = &quot;Presentation to conferences&quot;, date_start = &quot;2019-04-12&quot;, date_end = &quot;2019-04-12&quot;, description = &quot;Presentation of the paper by the primary investigator at the ... conference, London&quot; ), list(name = &quot;Curation and dissemination of data and code&quot;, date_start = &quot;2019-02-25&quot;, date_end = &quot;2019-03-18&quot;, description = &quot;Data and script documentation, and publishing in the National Microdata Library&quot; ) ), # ... ) ) authoring_entity [Optional ; Repeatable] This section will identify the person(s) and/or organization(s) in charge of the intellectual content of the research project, and specify their respective role. &quot;authoring_entity&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;role&quot;: &quot;string&quot;, &quot;affiliation&quot;: &quot;string&quot;, &quot;abbreviation&quot;: &quot;string&quot;, &quot;email&quot;: &quot;string&quot;, &quot;author_id&quot;: [] } ] name [Optional ; Not repeatable ; String] Name of the person or organization responsible for the research project. role [Optional ; Not repeatable ; String] Specific role of the person or organization mentioned in name. affiliation [Optional ; Not repeatable ; String] Agency or organization affiliation of the author/primary investigator mentioned in name. abbreviation [Optional ; Not repeatable ; String] Abbreviation used to identify the agency stated under affiliation. email [Optional ; Not repeatable ; String] Depending on the agency policies, a researcher may provide a personal email or an agency email to field inquires related to the project. author_id [Optional ; Repeatable] A block of two elements used to provide unique identifiers of the authors, as provided by different registers of researchers. For example, this can be an ORCID number (ORCID is a non-profit organization supported by a global community of member organizations, including research institutions, publishers, sponsors, professional associations, service providers, and other stakeholders in the research ecosystem.) type [Optional ; Not repeatable ; String] The type of ID; for example, “ORCID”. id [Required ; Not repeatable ; String] A unique identification number/code for the authoring entity, entered as a string variable. my_project = list( # ... , project_desc = list( # ... , authoring_entity = list( list(name = &quot;&quot;, role = &quot;&quot;, affiliation = &quot;&quot;, email = &quot;&quot;, author_id = list( list(type = &quot;&quot;, id = &quot;ORCID&quot;) ) ) ), # ... ) ) contributors [Optional ; Repeatable] This section is provided to record other contributors to the research project and provide recognition for the roles they provided. &quot;contributors&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;role&quot;: &quot;string&quot;, &quot;affiliation&quot;: &quot;string&quot;, &quot;abbreviation&quot;: &quot;string&quot;, &quot;email&quot;: &quot;string&quot;, &quot;url&quot;: &quot;string&quot; } ] name [Optional ; Not repeatable ; String] Name of the person, corporate body, or agency contributing to the intellectual content of the project (other than the PI). If a person, invert first and last name and use commas. role [Optional ; Not repeatable ; String] Title of the person (if any) responsible for the work’s substantive and intellectual content. affiliation [Optional ; Not repeatable ; String] Agency or organization affiliation of the contributor. abbreviation [Optional ; Not repeatable ; String] Abbreviation used to identify the agency stated under affiliation. email [Optional ; Not repeatable ; String] Depending on the agency policies, a researcher may provide a personal email or an agency email to field inquires related to the project. url [Optional ; Not repeatable ; String] Thhe URL that provides information on the contributor or its affiliate my_project = list( # ... , project_desc = list( # ... , contributors = list( list(name = &quot;&quot;, role = &quot;&quot;, affiliation = &quot;&quot;, email = &quot;&quot; ) ), # ... ) ) sponsors [Optional ; Repeatable] The source(s) of funds for production of the work. If different funding agencies sponsored different stages of the production process, use the ‘role’ attribute to distinguish them. &quot;sponsors&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;abbreviation&quot;: &quot;string&quot;, &quot;role&quot;: &quot;string&quot;, &quot;grant_no&quot;: &quot;string&quot; } ] name [Optional ; Not repeatable ; String] Name of the funding agency/sponsor. abbreviation [Optional ; Not repeatable ; String] Abbreviation of the funding/sponsoring agency. role [Optional ; Not repeatable ; String] Specific role of the funding/sponsoring agency. grant_no [Optional ; Not repeatable ; String] Grant or award number. my_project = list( # ... , project_desc = list( # ... , sponsors = list( list(name = &quot;ABC Foundation&quot;, abbr = &quot;ABCF&quot;, role = &quot;Purchase of the data&quot;, grant_no = &quot;ABC_001_XYZ&quot; ), list(name = &quot;National Research Foundation&quot;, abbr = &quot;NRF&quot;, role = &quot;Funding of staff and research assistant costs, and variable costs for participation in conferences&quot;, grant_no = &quot;NRF_G01&quot; ) ), # ... ) ) curators [Optional ; Repeatable] A list of persons and/or organizations in charge of curating the resources associated with the project. &quot;curators&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;role&quot;: &quot;string&quot;, &quot;affiliation&quot;: &quot;string&quot;, &quot;abbreviation&quot;: &quot;string&quot;, &quot;email&quot;: &quot;string&quot;, &quot;url&quot;: &quot;string&quot; } ] name [Optional ; Not repeatable ; String] The name of the person or organization. role [Optional ; Not repeatable ; String] The specific role of the person or organization in the curation of the project resources. affiliation [Optional ; Not repeatable ; String] The affiliation of the person or organization. abbreviation [Optional ; Not repeatable ; String] An acronym of the organization, if an organization was entered in name. email [Optional ; Not repeatable ; String] The email address of the person or organization. The use of personal email addresses must be avoided. url [Optional ; Not repeatable ; String] A link to the website of the person or organization. my_project = list( # ... , project_desc = list( # ... , curators = list( list(name = &quot;National Data Archive of Popstan&quot;, role = &quot;Documentation, preservation and dissemination of the data and reproducible code&quot;, email = &quot;helpdesk@nda. ...&quot;, url = &quot;popstan_nda,org&quot; ) ), # ... ) ) reviews_comments [Optional ; Repeatable] Many research projects will be subject to a review process, which may happen at different stages of the project implementation (from design to review of the final output). This block is intended to document the comments received by reviewers during this process. It is a repeatable block of metadata elements, which can be used to document comments with a fine granularity. &quot;reviews_comments&quot;: [ { &quot;comment_date&quot;: &quot;string&quot;, &quot;comment_by&quot;: &quot;string&quot;, &quot;comment_description&quot;: &quot;string&quot;, &quot;comment_response&quot;: &quot;string&quot; } ] comment_date [Optional ; Not repeatable ; String] The date the comment was provided, in ISO 8601 format (YYYY-MM-DD or YYYY-MM). comment_by [Optional ; Not repeatable ; String] The name of the person or organization that provided the comment. comment_description [Optional ; Not repeatable ; String] The comment itself, in its original formulation or in a summary version. comment_response [Optional ; Not repeatable ; String] The response provided by teh research team/person to the comment, in its original formulation or in a summary version. my_project = list( # ... , project_desc = list( # ... , reviews_comments = list( list(comment_date = &quot;&quot;, comment_by = &quot;&quot;, comment_description = &quot;&quot;, comment_response = &quot;&quot; ) ), # ... ) ) acknowledgments [Optional ; Repeatable] This repeatable block of elements is used to provide an itemized list of persons and organizations whose contribution to the project must be acknowledged. Note that specific metadata elements are available for listing financial sponsors and main contributors to the study. An alternative to this field is the acknowledgment_statement field (see below) which can be used to provide the acknowledgment in the form of an unstructured text. &quot;acknowledgments&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;affiliation&quot;: &quot;string&quot;, &quot;role&quot;: &quot;string&quot; } ] name [Optional ; Not repeatable ; String] The name of the person or agency being recognized for supporting the project. affiliation [Optional ; Not repeatable ; String] The affiliation of the person or agency being acknowledged. role [Optional ; Not repeatable ; String] A brief description of the role of the person or agency that is being recognized or acknowledged for supporting the project. my_project = list( # ... , project_desc = list( # ... , acknowledgements = list( list(name = &quot;&quot;, affiliation = &quot;&quot;, role = &quot;&quot; ), list(name = &quot;&quot;, affiliation = &quot;&quot;, role = &quot;&quot; ) ), # ... ) ) acknowledgement_statement [Optional ; Not repeatable ; String] This field is used to provide acknowledgments in the form of an unstructured text. An alternative to this field is the acknowledgments field which provides a solution to itemize the acknowledgments. disclaimer [Optional ; Not repeatable ; String] Disclaimers limit the responsibility or liability of the publishing organization or researchers associated with the research project. Disclaimers assure that any research in the public domain produced by an organization has limited repercussions to the publishing organization. A disclaimer is intended to prevent liability from any effects occurring as a result of the acts or omissions in the research. confidentiality [Optional ; Not repeatable ; String] A confidentiality statement binds the publisher to ethical considerations regarding the subjects of the research. In most cases, the individual identity of an individual that is the subject of research can not be released and special effort is required to assure the preservation of privacy. citation_requirement [Optional ; Not repeatable ; String] The citation requirement is specific to the output and is a preferred shorthand or means to refer to the publication or published good. related_projects [Optional ; Repeatable] The objective of this block is to provide links (URLs) to other, related projects which can be documented and disseminated in the same catalog or any other location on the internet. &quot;related_projects&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot;, &quot;note&quot;: &quot;string&quot; } ] name [Optional ; Not repeatable ; String] The name (title) of the related project. uri [Optional ; Not repeatable ; String] A link (URL) to the related project web page. note [Optional ; Not repeatable ; String] A brief description or other relevant information on the related project. my_project = list( # ... , project_desc = list( # ... , related_projects = list( list(name = &quot;&quot;, uri = &quot;&quot;, note = &quot;&quot;) ), # ... ) ) geographic_units [Optional ; Repeatable] The geographic areas covered by the project. When the project relates to one or more countries, or part of one or more countries, it is important to provide the country name. This means that for a project related to a specific province or town of a country, the country name will be entered in addition to the province or town (as separate entries in this repeatable block of elements). Note that the area does not have to be an administrative area; it can for example be an ocean. &quot;geographic_units&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;code&quot;: &quot;string&quot;, &quot;type&quot;: &quot;string&quot; } ] name [Optional ; Not repeatable ; String] The name of the geographic area. code [Optional ; Not repeatable ; String] The code of the geographic area. For countries, it is recommended to use the ISO 3166 country codes and names. type [Optional ; Not repeatable ; String] The type of geographic area. my_project = list( # ... , project_desc = list( # ... , geographic_units = list( list(name = &quot;India&quot;, code = &quot;IND&quot;, type = &quot;Country&quot;), list(name = &quot;New Delhi&quot;, type = &quot;City&quot;), list(name = &quot;Kerala&quot;, type = &quot;State&quot;), list(name = &quot;Nepal&quot;, code = &quot;NPL&quot;, type = &quot;Country&quot;), list(name = &quot;Kathmandu&quot;, type = &quot;City&quot;) ), # ... ) ) keywords [Optional ; Repeatable] &quot;keywords&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;vocabulary&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ] A list of keywords that provide information on the core scope and objectives of the research project. Keywords provide a convenient solution to improve the discoverability of the research, as it allows terms and phrases not found elsewhere in the metadata to be indexed and to make a project discoverable by text-based search engines. A controlled vocabulary will preferably be used (although not required), such as the UNESCO Thesaurus. The list provided here can combine keywords from multiple controlled vocabularies, and user-defined keywords. name [Required ; Not repeatable ; String] The keyword itself. vocabulary [Optional ; Not repeatable ; String] The controlled vocabulary (including version number or date) from which the keyword is extracted, if any. uri [Optional ; Not repeatable ; String] The URL of the controlled vocabulary from which the keyword is extracted, if any. my_project &lt;- list( # ... , project_desc = list( # ... , keywords = list( list(name = &quot;Migration&quot;, vocabulary = &quot;Unesco Thesaurus (June 2021)&quot;, uri = &quot;http://vocabularies.unesco.org/browser/thesaurus/en/page/concept427&quot;), list(name = &quot;Migrants&quot;, vocabulary = &quot;Unesco Thesaurus (June 2021)&quot;, uri = &quot;http://vocabularies.unesco.org/browser/thesaurus/en/page/concept427&quot;), list(name = &quot;Refugee&quot;, vocabulary = &quot;Unesco Thesaurus (June 2021)&quot;, uri = &quot;http://vocabularies.unesco.org/browser/thesaurus/en/page/concept427&quot;), list(name = &quot;Conflict&quot;), list(name = &quot;Asylum seeker&quot;), list(name = &quot;Forced displacement&quot;), list(name = &quot;Forcibly displaced&quot;), list(name = &quot;Internally displaced population (IDP)&quot;), list(name = &quot;Population of concern (PoC)&quot;) list(name = &quot;Returnee&quot;) list(name = &quot;UNHCR&quot;) ), # ... ), # ... ) themes [Optional ; Repeatable] &quot;themes&quot;: [ { &quot;id&quot;: &quot;string&quot;, &quot;name&quot;: &quot;string&quot;, &quot;parent_id&quot;: &quot;string&quot;, &quot;vocabulary&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ] A list of themes covered by the research project. A controlled vocabulary will preferably be used. Note that themes will rarely be used as the elements topics and disciplines are more appropriate for most uses. This is a block of five fields: id [Optional ; Not repeatable ; String] The ID of the theme, taken from a controlled vocabulary. name [Required ; Not repeatable ; String] The name (label) of the theme, preferably taken from a controlled vocabulary. parent_id [Optional ; Not repeatable ; String] The parent ID of the theme (ID of the item one level up in the hierarchy), if a hierarchical controlled vocabulary is used. vocabulary [Optional ; Not repeatable ; String] The name (including version number) of the controlled vocabulary used, if any. uri [Optional ; Not repeatable ; String] The URL to the controlled vocabulary used, if any. topics [Optional ; Repeatable] &quot;topics&quot;: [ { &quot;id&quot;: &quot;string&quot;, &quot;name&quot;: &quot;string&quot;, &quot;parent_id&quot;: &quot;string&quot;, &quot;vocabulary&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ] Information on the topics covered in the research project. A controlled vocabulary will preferably be used, for example the CESSDA Topics classification, a typology of topics available in 11 languages; or the Journal of Economic Literature (JEL) Classification System, or the World Bank topics classification. Note that you may use more than one controlled vocabulary. This element is a block of five fields: - id [Optional ; Not repeatable ; String] The identifier of the topic, taken from a controlled vocabulary. - name [Required ; Not repeatable ; String] The name (label) of the topic, preferably taken from a controlled vocabulary. - parent_id [Optional ; Not repeatable ; String] The parent identifier of the topic (identifier of the item one level up in the hierarchy), if a hierarchical controlled vocabulary is used. - vocabulary [Optional ; Not repeatable ; String] The name (including version number) of the controlled vocabulary used, if any. - uri [Optional ; Not repeatable ; String] The URL to the controlled vocabulary used, if any. my_project = list( # ... , project_desc = list( # ... , topics = list( list(name = &quot;Demography.Migration&quot;, vocabulary = &quot;CESSDA Topic Classification&quot;, uri = &quot;https://vocabularies.cessda.eu/vocabulary/TopicClassification&quot;), list(name = &quot;Demography.Censuses&quot;, vocabulary = &quot;CESSDA Topic Classification&quot;, uri = &quot;https://vocabularies.cessda.eu/vocabulary/TopicClassification&quot;), list(id = &quot;F22&quot;, name = &quot;International Migration&quot;, parent_id = &quot;F2 - International Factor Movements and International Business&quot;, vocabulary = &quot;JEL Classification System&quot;, uri = &quot;https://www.aeaweb.org/econlit/jelCodes.php?view=jel#J&quot;), list(id = &quot;O15&quot;, name = &quot;Human Resources - Human Development - Income Distribution - Migration&quot;, parent_id = &quot;O1 - Economic Development&quot;, vocabulary = &quot;JEL Classification System&quot;, uri = &quot;https://www.aeaweb.org/econlit/jelCodes.php?view=jel#J&quot;), list(id = &quot;O12&quot;, name = &quot;Microeconomic Analyses of Economic Development&quot;, parent_id = &quot;O1 - Economic Development&quot;, vocabulary = &quot;JEL Classification System&quot;, uri = &quot;https://www.aeaweb.org/econlit/jelCodes.php?view=jel#J&quot;), list(id = &quot;J61&quot;, name = &quot;Geographic Labor Mobility - Immigrant Workers&quot;, parent_id = &quot;J6 - Mobility, Unemployment, Vacancies, and Immigrant Workers&quot;, vocabulary = &quot;JEL Classification System&quot;, uri = &quot;https://www.aeaweb.org/econlit/jelCodes.php?view=jel#J&quot;) ), # ... ) ) disciplines [Optional ; Repeatable] &quot;disciplines&quot;: [ { &quot;id&quot;: &quot;string&quot;, &quot;name&quot;: &quot;string&quot;, &quot;parent_id&quot;: &quot;string&quot;, &quot;vocabulary&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ] Information on the academic disciplines related to the content of the research project. A controlled vocabulary will preferably be used, for example the one provided by the list of academic fields in Wikipedia. This is a block of five elements: id [Optional ; Not repeatable ; String] The identifier of the discipline, taken from a controlled vocabulary. name [Optional ; Not repeatable ; String] The name (label) of the discipline, preferably taken from a controlled vocabulary. parent_id [Optional ; Not repeatable ; String] The parent identifier of the discipline (identifier of the item one level up in the hierarchy), if a hierarchical controlled vocabulary is used. vocabulary [Optional ; Not repeatable ; String] The name (including version number) of the controlled vocabulary used, if any. uri [Optional ; Not repeatable ; String] The URL to the controlled vocabulary used, if any. my_project &lt;- list( # ... , project_desc = list( # ... , disciplines = list( list(name = &quot;Economics&quot;, vocabulary = &quot;Wikipedia List of academic fields (as of 21 June 2021)&quot;, uri = &quot;https://en.wikipedia.org/wiki/List_of_academic_fields&quot;), list(name = &quot;Agricultural economics&quot;, vocabulary = &quot;Wikipedia List of academic fields (as of 21 June 2021)&quot;, uri = &quot;https://en.wikipedia.org/wiki/List_of_academic_fields&quot;), list(name = &quot;Econometrics&quot;, vocabulary = &quot;Wikipedia List of academic fields (as of 21 June 2021)&quot;, uri = &quot;https://en.wikipedia.org/wiki/List_of_academic_fields&quot;) ), # ... ), # ... ) repository_uri In the process of producing the outputs of the research project, a researcher may want to share their source code for transparency and replicability. This repository provides information for finding the repository where the source code is kept. &quot;repository_uri&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;type&quot;: &quot;string&quot;, &quot;uri&quot;: null } ] name [Optional ; Not repeatable ; String] Name of the repository where code is hosted. type [Optional ; Not repeatable ; String] Repository type e.g.GitHub, Bitbucket, etc. uri [Required ; Not repeatable ; String] URI of the project source code/script repository my_project = list( # ... , project_desc = list( # ... , repository_uri = list( list(name = &quot;A comparative assessment of machine learning classification algorithms applied to poverty prediction&quot;, type = &quot;GitHub public repo&quot;, uri = &quot;https://github.com/worldbank/ML-classification-algorithms-poverty&quot;) ), # ... ) ) license [Optional ; Repeatable] Information on the license(s) attached to the research project resources, which defines their terms of use. &quot;license&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ] name [Required ; Not repeatable ; String] The name of the license. uri [Optional ; Not repeatable ; String] The URL of the license, where detailed information on the license can be obtained. note [Optional ; Not repeatable ; String] Additional information on the license. my_project &lt;- list( # ... , project_desc = list( # ... , license = list( list(name = &quot;Attribution 4.0 International (CC BY 4.0)&quot;, uri = &quot;https://creativecommons.org/licenses/by/4.0/&quot;) ), # ... ), # ... ) copyright [Optional ; Not repeatable ; String] Information on the copyright, if any, that applies to the research project metadata. technology_environment [Optional ; Not repeatable ; String] This field is used to provide a description (as detailed as possible) of the computational environment under which the scripts were implemented and are expected to be reproducible. A substantial challenge in reproducing analyses is installing and configuring the web of dependencies of specific versions of various analytical tools. Virtual machines (a computer inside a computer) enable you to efficiently share your entire computational environment with all the dependencies intact. (https://ropensci.github.io/reproducibility-guide/sections/introduction/) technology_requirements [Optional ; Not repeatable ; String] Software/hardware or other technology requirements needed to run the scripts and replicate the outputs reproduction_instructions [Optional ; Not repeatable ; String] Instructions to secondary analysts who may want to reproduce the scripts. methods [Optional ; Repeatable] A list of analytic, statistical, econometric, machine learning methods used in the project. The objective is to allow users to find projects based on a search on methods applied, e.g. answer a query like “poverty prediction using random forest”. &quot;methods&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;note&quot;: &quot;string&quot; } ] name [Required ; Not repeatable ; String] A short name for the method being described. note [Optional ; Not repeatable ; String] Any additional information on the method. my_project = list( # ... , project_desc = list( # ... , methods = list( list(name = &quot;linear regression&quot;, note = &quot;Implemented using R package &#39;stats&#39;&quot;), list(name = &quot;random forest&quot;, note = &quot;Used for both regression and classification&quot;), list(name = &quot;lasso regression (least asolute shrinkage and selection operator)&quot;, note = &quot;Implemented using R package glmnet&quot;), list(name = &quot;gradient boosting machine (GBM)&quot;), list(name = &quot;cross validation&quot;), list(name = &quot;mean square error, quadratic loss, L2 loss&quot;, note = &quot;Loss functions used to fit models&quot;) ), # ... ) ) software [Optional ; Repeatable] This field is used to list the software and the specialized packages and libraries/packages that were used to implement the project and that are required to reproduce the scripts. The libraries that are loaded by the scripts (e.g., by the R require or library command) are included (not all their own dependencies, which will be assumed to be installed automatically). &quot;software&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;version&quot;: &quot;string&quot;, &quot;library&quot;: [ &quot;string&quot; ] } ] name [Required ; Not repeatable ; String] The name of the software. version [Optional ; Not repeatable ; String] The version of the software. library [Optional ; Repeatable] A list of libraries/packages required to run the scripts. Note that the specific version of each package is not documented here; it is expected to be found in the script or in the reproduction instructions. my_project = list( # ... , project_desc = list( # ... , software = list( list(name = &quot;R&quot;, version = &quot;4.0.2&quot;, library = list(&quot;caret&quot;, &quot;dplyr&quot;, &quot;ggplot2&quot;), list(name = &quot;Stata&quot;, version = &quot;15&quot;), list(name = &quot;Python&quot;, version = &quot;3.7 (Anaconda install)&quot;, library = list(&quot;pandas&quot;, &quot;scikit-learn&quot;) ), # ... ) ) scripts [Optional ; Repeatable] This field is used to describe the scripts written by the project authors. All scripts are expected to have been written using software listed in the field software. &quot;scripts&quot;: [ { &quot;file_name&quot;: &quot;string&quot;, &quot;zip_package&quot;: &quot;string&quot;, &quot;title&quot;: &quot;string&quot;, &quot;authors&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;affiliation&quot;: &quot;string&quot;, &quot;role&quot;: &quot;string&quot; } ], &quot;date&quot;: &quot;string&quot;, &quot;format&quot;: &quot;string&quot;, &quot;software&quot;: &quot;string&quot;, &quot;description&quot;: &quot;string&quot;, &quot;methods&quot;: &quot;string&quot;, &quot;dependencies&quot;: &quot;string&quot;, &quot;instructions&quot;: &quot;string&quot;, &quot;source_code_repo&quot;: &quot;string&quot;, &quot;notes&quot;: &quot;string&quot;, &quot;license&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot;, &quot;note&quot;: &quot;string&quot; } ] } ] file_name [Optional ; Not repeatable ; String] Name of the script file (for R users, this will typically include files with extension [.R], for Stata users it will be files with extension [.do], for Python users …). But this can also include other files related and required to run the scripts (for example lookup CSV files, etc.) This does not include the data files, which are described ina specific field. zip_package [Optional ; Not repeatable] If the script files have been saved as or in a compressed file (zip, rar, of equivalent), we provide here the name of the zip file containing the script. title [Optional ; Not repeatable ; String] A title (label) given to the script file authors [Optional ; Repeatable] This is a repeatable block that allows entering a list of authors and co-authors of a script name [Optional ; Not repeatable ; String] Name of the author (person or organization) of the script affiliation [Optional ; Not repeatable ; String] The affiliation of the author. role [Optional ; Not repeatable ; String] Specific role of the person or organization in the production of the script. date [Optional ; Not repeatable ; String]* Date the script was produced, in ISO 8601 format (YYYY-MM-DD) format [Optional ; Not repeatable ; String] File format software [Optional ; Not repeatable ; String] Software used to run the script description [Optional ; Not repeatable ; String] Brief description of the script methods [Optional ; Not repeatable ; String] Statistical/analytic methods included in the script dependencies [Optional ; Not repeatable ; String] Any dependencies (packages/libraries) that the script relies on. This field is not needed if dependencies were described in the library element. instructions [Optional ; Not repeatable ; String] Instructions for running the script. Information on the sequence in which the scripts must be run is critical. source_code_repo [Optional ; Not repeatable ; String] Repository (e.g. GitHub repo) where the script has been published. notes [Optional ; Not repeatable ; String] Any additional information on the script. license [Optional ; Repeatable] License, if any, under which the script is published. name [Optional ; Not repeatable ; String] Name (label) of the license uri [Optional ; Not repeatable ; String] License URI my_project = list( # ... , project_desc = list( # ... , scripts = list( list(file_name = &quot;00_script.R&quot;, zip_package = &quot;all_scripts.zip&quot;, title = &quot;Project X - Master script&quot;, authors = list(name = &quot;John Doe&quot;, affiliation = &quot;IHSN&quot;, role = &quot;Writing, testing and documenting the script&quot;), date = &quot;2020-12-27&quot;, format = &quot;R script&quot;, software = &quot;R x64 4.0.2&quot;, description = &quot;Master script for automated reproduction of the analysis. Calls all other scripts in proper sequence to reproduce the full analysis.&quot;, methods = &quot;box-cox transformation of data&quot;, dependencies = &quot;&quot;, instructions = &quot;&quot;, source_code_repo = &quot;&quot;, notes = &quot;&quot;, license = list(name = &quot;CC BY 4.0&quot;, uri = &quot;https://creativecommons.org/licenses/by/4.0/deed.ast&quot;)), list(file_name = &quot;01_regression.R&quot;, zip_package = &quot;&quot;, title = &quot;Charts and maps&quot;, authors = list(name = &quot;&quot;, affiliation = &quot;&quot;, role = &quot;&quot;), date = &quot;&quot;, format = &quot;R script&quot;, software = &quot;R&quot;, description = &quot;This script runs all linear regressions and PCA presented in the working paper.&quot;, methods = &quot;linear regression; principal component analysis&quot;, dependencies = &quot;&quot;, instructions = &quot;&quot;, source_code_repo = &quot;&quot;, notes = &quot;&quot;, license = list(list(name = &quot;CC BY 4.0&quot;, uri = &quot;https://creativecommons.org/licenses/by/4.0/deed.ast&quot;))), list(file_name = &quot;02_visualization&quot;, zip_package = &quot;&quot;, title = &quot;&quot;, authors = list(name = &quot;&quot;, abbr = &quot;&quot;, role = &quot;&quot;), date = &quot;&quot;, format = &quot;&quot;, software = &quot;&quot;, description = &quot;&quot;, instructions = &quot;&quot;, source_code_repo = &quot;&quot;, notes = &quot;&quot;, license = list(list(name = &quot;CC BY 4.0&quot;, uri = &quot;https://creativecommons.org/licenses/by/4.0/deed.ast&quot;))), ), # ... ) ) data_statement [Optional ; Not repeatable ; String] An overall statement on the data used in the project. A separate field is provided to list and document the origin and key characteristics of the datasets. datasets [Optional ; Repeatable] This field is used to provide an itemized list of datasets used in the project. The data are not documented here (specific metadata are available for documenting data of different types, like the DDI for microdata, the ISO 19139 for geographic datasets, etc.) &quot;datasets&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;idno&quot;: &quot;string&quot;, &quot;note&quot;: &quot;string&quot;, &quot;access_type&quot;: &quot;string&quot;, &quot;license&quot;: &quot;string&quot;, &quot;license_uri&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ] name [Optional ; Not repeatable ; String] The dataset name (title) idno [Optional ; Not repeatable ; String] The unique identifier of the dataset note [Optional ; Not repeatable ; String] A brief description of the dataset. access_type [Optional ; Not repeatable ; String] The access policy pplied to the dataset. license [Optional ; Not repeatable ; String] The access license that applies to the dataset. license_uri [Optional ; Not repeatable ; String] The URL of a web page where more information on the license can be obtained. uri [Optional ; Not repeatable ; String] The URI where the dataset (or a detailed description of it) can be obtained. my_project = list( # ... , project_desc = list( # ... , datasets = list( list(name = &quot;Multiple Indicator Cluster Survey 2019, Round 6, Chad&quot;, idno = &quot;TCD_2019_MICS_v01_M&quot;, uri = &quot;https://microdata.worldbank.org/index.php/catalog/4150&quot;), list(name = &quot;World Bank Group Country Survey 2018, Chad&quot;, idno = &quot;TCD_2018_WBCS_v01_M&quot;, access_type = &quot;Public access&quot;, uri = &quot;https://microdata.worldbank.org/index.php/catalog/3058&quot;) ), # ... ) ) contacts [Optional ; Repeatable] The contacts element provides the public interface for questions associated with the research project. There could be various contacts provided depending upon the organization. It is important to assure that the proper contacts are provided to channel public inquiry. &quot;contacts&quot;: [ { &quot;name&quot;: &quot;string&quot;, &quot;role&quot;: &quot;string&quot;, &quot;affiliation&quot;: &quot;string&quot;, &quot;email&quot;: &quot;string&quot;, &quot;telephone&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ] name [Required ; Not repeatable ; String] The name of the contact person that should be contacted depending on the role defined below. role [Optional ; Not repeatable ; String] Role of the contact person. A research project may have contact persons depending on the output or some of the technical input. Some complex projects may have various data collection processes that have different processing channels and contacts. This section should provide for a key primary public interface that can refer the public inquiry or provide a collection of entry points. affiliation [Optional ; Not repeatable ; String] The organization or affiliation of the contact person. This is usually the organization that the contact person represents. email [Optional ; Not repeatable ; String] Email address of the responsible person, institution, or division in charge of the research project or output. telephone [Optional ; Not repeatable ; String] Phone number of the responsible institution or division of the research project or output. uri [Optional ; Not repeatable ; String] The URI of the agency or organization of the contact organization. This may be the same as the web page of the project or may be a permanent contact name at an institutional level and not project related. Eventually a project web site may be removed but there may still be need to have a contact. In this case, it is recommended to have a contact that is permanent. my_project = list( # ... , project_desc = list( # ... , contacts = list( list(name = &quot;Data helpdesk&quot;, affiliation = &quot;National Data Center&quot;, role = &quot;Support to data users&quot;, uri = &quot;helpdesk@ndc. ...&quot;) ), # ... ) ) 12.4.3 Provenance provenance [Optional ; Repeatable] Metadata can be programmatically harvested from external catalogs. The provenance group of elements is used to store information on the provenance of harvested metadata, and on alterations that may have been made to the harvested metadata. &quot;provenance&quot;: [ { &quot;origin_description&quot;: { &quot;harvest_date&quot;: &quot;string&quot;, &quot;altered&quot;: true, &quot;base_url&quot;: &quot;string&quot;, &quot;identifier&quot;: &quot;string&quot;, &quot;date_stamp&quot;: &quot;string&quot;, &quot;metadata_namespace&quot;: &quot;string&quot; } } ] origin_description [Required ; Not repeatable] The origin_description elements are used to describe when and from where metadata have been extracted or harvested. harvest_date [Required ; Not repeatable ; String] The date and time the metadata were harvested, entered in ISO 8601 format. altered [Optional ; Not repeatable ; Boolean] A boolean variable (“true” or “false”; “true by default) indicating whether the harvested metadata have been modified before being re-published. In many cases, the unique identifier of the study (element idno in the Document Description / Title Statement section) will be modified when published in a new catalog. base_url [Required ; Not repeatable ; String] The URL from where the metadata were harvested. identifier [Optional ; Not repeatable ; String] The unique dataset identifier (idno element) in the source catalog. When harvested metadata are re-published in a new catalog, the identifier will likely be changed. The identifier element in provenance is used to maintain traceability. date_stamp [Optional ; Not repeatable ; String] The date stamp (in UTC date format) of the metadata record in the originating repository (this should correspond to the date the metadata were last updated in the source catalog). metadata_namespace [Optional ; Not repeatable ; String] @@@@@@@ 12.4.4 Tags tags [Optional ; Repeatable] As shown in section 1.7 of the Guide, tags, when associated with tag_groups, provide a powerful and flexible solution to enable custom facets (filters) in data catalogs. See section 1.7 for an example in R. &quot;tags&quot;: [ { &quot;tag&quot;: &quot;string&quot;, &quot;tag_group&quot;: &quot;string&quot; } ] tag [Required ; Not repeatable ; String] A user-defined tag. tag_group [Optional ; Not repeatable ; String] A user-defined group (optional) to which the tag belongs. Grouping tags allows implementation of controlled facets in data catalogs. lda_topics [Optional ; Not repeatable] &quot;lda_topics&quot;: [ { &quot;model_info&quot;: [ { &quot;source&quot;: &quot;string&quot;, &quot;author&quot;: &quot;string&quot;, &quot;version&quot;: &quot;string&quot;, &quot;model_id&quot;: &quot;string&quot;, &quot;nb_topics&quot;: 0, &quot;description&quot;: &quot;string&quot;, &quot;corpus&quot;: &quot;string&quot;, &quot;uri&quot;: &quot;string&quot; } ], &quot;topic_description&quot;: [ { &quot;topic_id&quot;: null, &quot;topic_score&quot;: null, &quot;topic_label&quot;: &quot;string&quot;, &quot;topic_words&quot;: [ { &quot;word&quot;: &quot;string&quot;, &quot;word_weight&quot;: 0 } ] } ] } ] We mentioned in Chapter 1 the importance of producing rich metadata, and the opportunities that machine learning offers to enrich (or “augment”) metadata in a largely automated manner. One application of machine learning, more specifically of natural language processing, to enrich metadata related to publications is the topic extraction using Latent Dirichlet Allocation (LDA) models. LDA models must be trained on large corpora of documents. They do not require any pre-defined taxonomy of topics. The approach consists of “clustering” words that are likely to appear in similar contexts (the number of “clusters” or “topics” is a parameter provided when training a model). Clusters of related words form “topics”. A topic is thus defined by a list of keywords, each one of them provided with a score indicating its importance in the topic. Typically, the top 10 words that represent a topic will be used to describe it. The description of the topics covered by a document can be indexed to improve searchability (possibly in a selective manner, by setting thresholds on the topic shares and word weights). Once an LDA topic model has been trained, it can be used to infer the topic composition of any text. In the case of indicators and time series, this text will be a concatenation of some metadata elements including the series’ name, definitions, keywords, concepts, and possibly others. This inference will then provide the share that each topic represents in the metadata. The sum of all represented topics is 1 (100%). The lda_topics element includes the following metadata fields. An example in R was provided in Chapter 4 - Documents. model_info [Optional ; Not repeatable] Information on the LDA model. source [Optional ; Not repeatable ; String] The source of the model (typically, an organization). author [Optional ; Not repeatable ; String] The author(s) of the model. version [Optional ; Not repeatable ; String] The version of the model, which could be defined by a date or a number. model_id [Optional ; Not repeatable ; String] The unique ID given to the model. nb_topics [Optional ; Not repeatable ; Numeric] The number of topics in the model (the number of topics to be extracted from a corpus is the key parameter of any LDA model). description [Optional ; Not repeatable ; String] A brief description of the model. corpus [Optional ; Not repeatable ; String] A brief description of the corpus on which the LDA model was trained. uri [Optional ; Not repeatable ; String] A link to a web page where additional information on the model is available. topic_description [Optional ; Repeatable] The topic composition extracted from selected elements of the series metadata (typically, the name, definitions, and concepts). topic_id [Optional ; Not repeatable ; String] The identifier of the topic; this will often be a sequential number (Topic 1, Topic 2, etc.). topic_score [Optional ; Not repeatable ; Numeric] The share of the topic in the metadata (%). topic_label [Optional ; Not repeatable ; String] The label of the topic, if any (not automatically generated by the LDA model). topic_words [Optional ; Not repeatable] The list of N keywords describing the topic (e.g., the top 5 words). word [Optional ; Not repeatable ; String] The word. word_weight [Optional ; Not repeatable ; Numeric] The weight of the word in the definition of the topic. embeddings [Optional ; Repeatable] In Chapter 1 (section 1.n), we briefly introduced the concept of word embeddings and their use in implementation of semantic search tools. Word embedding models convert text (words, phrases, documents) into large-dimension numeric vectors (e.g., a vector of 100 or 200 numbers) that are representative of the semantic content of the text. The vectors are generated by submitting a text to a pre-trained word embedding model (possibly via an API). The word vectors do not have to be stored in the series/indicator metadata to be exploited by search engines. When a semantic search tool is implemented in a catalog, the vectors will be stored in a database end processed by a tool like Milvus. A metadata element is however provided to store the vectors for preservation and sharing purposes. This block of metadata elements is repeatable, allowing multiple vectors to be stored. When using vectors in a search engine, it is critical to only use vectors generated by one same model. &quot;embeddings&quot;: [ { &quot;id&quot;: &quot;string&quot;, &quot;description&quot;: &quot;string&quot;, &quot;date&quot;: &quot;string&quot;, &quot;vector&quot;: null } ] The embeddings element contains four metadata fields: id [Optional ; Not repeatable ; String] A unique identifier of the word embedding model used to generate the vector. description [Optional ; Not repeatable ; String] A brief description of the model. This may include the identification of the producer, a description of the corpus on which the model was trained, the identification of the software and algorithm used to train the model, the size of the vector, etc. date [Optional ; Not repeatable ; String] The date the model was trained (or a version date for the model). vector [Required ; Not repeatable ; @@@@] The numeric vector representing the series metadata. 12.4.5 Additional additional [Optional ; Not repeatable] @@@@ add this to the schema and do screenshot The additional element allows data curators to add their own metadata elements to the schema. All custom elements must be added within the additional block; embedding them elsewhere in the schema would cause schema validation to fail. 12.5 Generating compliant metadata For this example of documentation and publishing of reproducible research, we use the Replication data for: Does Elite Capture Matter? Local Elites and Targeted Welfare Programs in Indonesia published in the OpenICPSR website. The primary investigators for the project were Vivi Alatas, Abhijit Banerjee, Rema Hanna, Benjamin A. Olken, Ririn Purnamasari, and Matthew Wai-Poi. A service of the Inter-university Consortium for Political and Social Research (ICPSR), openICPSR is a self-publishing repository for social, behavioral, and health sciences research data. openICPSR is particularly well-suited for the deposit of replication data sets for researchers who need to publish their raw data associated with a journal article so that other researchers can replicate their findings. (from OpenICPSR website) 12.5.1 Full example, using a metadata editor image 12.5.2 Full example, using R library(jsonlite) library(httr) library(dplyr) library(nadar) # ----credentials and catalog URL -------------------------------------------------- my_keys &lt;- read.csv(&quot;C:/confidential/my_API_keys.csv&quot;, header=F, stringsAsFactors=F) set_api_key(&quot;my_keys[1,1&quot;) set_api_url(&quot;https://.../index.php/api/&quot;) set_api_verbose(FALSE) # ---------------------------------------------------------------------------------- setwd(&quot;C:\\my_project&quot;) thumb = &quot;elite_capture.JPG&quot; # Will be used as thumbnail in the data catalog id = &quot;IDN_2019_ECTWP_v01_RR&quot; # Generate the metadata my_project_metadata &lt;- list( # Information on metadata production doc_desc = list( producers = list( list(name = &quot;OD&quot;, affiliation = &quot;National Data Center&quot;) ), prod_date = &quot;2022-01-15&quot; ), # Documentation of the research project, and scripts project_desc = list( title_statement = list( idno = id, title = &quot;Does Elite Capture Matter? Local Elites and Targeted Welfare Programs in Indonesia&quot;, sub_title = &quot;Reproducible scripts&quot; ), production_date = list(&quot;2019&quot;), geographic_units = list( list(name=&quot;Indonesia&quot;, code=&quot;IDN&quot;, type=&quot;Country&quot;) ), authoring_entity = list( list(name = &quot;Vivi Alatas&quot;, role = &quot;Primary investigator&quot;, affiliation = &quot;World Bank&quot;, email = &quot;valatas@worldbank.org&quot;), list(name = &quot;Abhijit Banerjee&quot;, role = &quot;Primary investigator&quot;, affiliation = &quot;Department of Economics, MIT&quot;, email = &quot;banerjee@mit.edu&quot;), list(name = &quot;Rema Hanna&quot;, role = &quot;Primary investigator&quot;, affiliation = &quot;Harvard Kennedy School&quot;, email = &quot;rema_hanna@hks.harvard.edu&quot;), list(name = &quot;Benjamin A. Olken&quot;, role = &quot;Primary investigator&quot;, affiliation = &quot;Department of Economics, MIT&quot;, email = &quot;bolken@mit.edu&quot;), list(name = &quot;Ririn Purnamasari&quot;, role = &quot;Primary investigator&quot;, affiliation = &quot;World Bank&quot;, email = &quot;rpurnamasari@worldbank.org&quot;), list(name = &quot;Matthew Wai-Poi&quot;, role = &quot;Primary investigator&quot;, affiliation = &quot;World Bank&quot;, email = &quot;mwaipoi@worldbank.org&quot;) ), abstract = &quot;This paper investigates how elite capture affects the welfare gains from targeted government transfer programs in Indonesia, using both a high-stakes field experiment that varied the extent of elite influence and nonexperimental data on a variety of existing government programs. While the relatives of those holding formal leadership positions are more likely to receive benefits in some programs, we argue that the welfare consequences of elite capture appear small: eliminating elite capture entirely would improve the welfare gains from these programs by less than one percent.&quot;, keywords = list( list(name=&quot;proxy-means test (PMT)&quot;), list(name=&quot;experimental design&quot;) ), topics = list( list(id=&quot;D72&quot;, name = &quot;Political Processes: Rent-seeking, Lobbying, Elections, Legislatures, and Voting Behavior&quot;, vocabulary = &quot;JEL codes&quot;, uri = &quot;https://www.aeaweb.org/econlit/jelCodes.php&quot;), list(id = &quot;H53&quot;, name = &quot;National Government Expenditures and Welfare Programs&quot;, vocabulary = &quot;JEL codes&quot;, uri = &quot;https://www.aeaweb.org/econlit/jelCodes.php&quot;), list(id = &quot;I38&quot;, name = &quot;Welfare, Well-Being, and Poverty: Government Programs; Provision and Effects of Welfare Programs&quot;, vocabulary = &quot;JEL codes&quot;, uri = &quot;https://www.aeaweb.org/econlit/jelCodes.php&quot;), list(id = &quot;O15&quot;, name = &quot;Economic Development: Human Resources; Human Development; Income Distribution; Migration&quot;, vocabulary = &quot;JEL codes&quot;, uri = &quot;https://www.aeaweb.org/econlit/jelCodes.php&quot;), list(id = &quot;O17&quot;, name = &quot;Formal and Informal Sectors; Shadow Economy Institutional Arrangements&quot;, vocabulary = &quot;JEL codes&quot;, uri = &quot;https://www.aeaweb.org/econlit/jelCodes.php&quot;) ), output_types = list( list(type = &quot;Article&quot;, title = &quot;Does Elite Capture Matter Local Elites and Targeted Welfare Programs in Indonesia&quot;, description = &quot;AEA Papers and Proceedings 2019, 109: 334-339&quot;, uri = &quot;https://doi.org/10.1257/pandp.20191047&quot;, doi = &quot;10.1257/pandp.20191047&quot;), list(type = &quot;Working Paper&quot;, title = &quot;Does Elite Capture Matter? Local Elites and Targeted Welfare Programs in Indonesia&quot;, description = &quot;NBER Working Paper No. 18798, February 2013&quot;, uri = &quot;https://www.nber.org/papers/w18798&quot;) ), version_statement = list(version = &quot;1.0&quot;, version_date = &quot;2019&quot;), language = list( list(name = &quot;English&quot;, code = &quot;EN&quot;) ), methods = list( list(name = &quot;linear regression with large dummy-variable set (areg)&quot;), list(name = &quot;probit regression&quot;), list(name = &quot;Test linear hypotheses after estimation&quot;) ), software = list( list(name= &quot;Stata&quot;, version = &quot;14&quot;) ), reproduction_instructions = &quot;The master do file should run start to finish in less than five minutes from the master do file &#39;0MASTER 20190918.do&#39;. Original data is in data-PUBLISH/originaldata and is all that is needed to run the code; all data in data-PUBLISH/codeddata is created from the coding do files. All results are then created and saved in output-PUBLISH/tables. Key Subfolders: 1. code-PUBLISH: This folder contains all relevant code. The master do file is located here (&#39;0Master20190918.do&#39;) as well as the two folders that are necessary for the creation of datasets/coding (&#39;coding_matching&#39; folder) and for the analysis/table creation (&#39;analysis&#39; folder). Users should update the directory on the master file to reflect the location of the directory on their computers once downloaded. Following that, all the data and output files needed to replicate the main findings of the paper (Tables 1A-1D, Table 2 and the 4 Appendix Tables) will be generated. The sub do files provide specific notes on the variables created where relevant. 2. data-PUBLISH: This folder contains all relevant .dta files. The first folder, &#39;original data&#39; contains the &#39;Baseline&#39; folder that has the original baseline survey information. Under &#39;original data&#39; you will also find the &#39;Others&#39; folder with the randomization results, the 2008 PPLS data and the PODES 2008 village level administrative data. The &#39;Endline2&#39; folder contains the endline survey information. These datasets have been modified only to mask sensitive information. Finally, the &#39;codeddata&#39; folder that stores intermediate datasets that are created through the sub &#39;coding_matching&#39; do files. 3. log-PUBLISH: This folder contains the latest log file. When users run the master do file, a new log file will automatically be created and stored here. 4. output-PUBLISH: This folder contains all the tables of the main paper and appendix. When users run the master do file, these tables will be automatically overwritten.&quot;, confidentiality = &quot;The published materials do not contain confidential information.&quot;, datasets = list( list(name = &quot;Village survey (original data; baseline)&quot;, idno = &quot;&quot;, note = &quot;Stata 14 data files&quot;, access_type = &quot;Public&quot;, uri = &quot;https://www.openicpsr.org/openicpsr/project/119802/version/V1/view&quot;), list(name = &quot;Village survey (original data; endline)&quot;, idno = &quot;&quot;, note = &quot;Stata 14 data files&quot;, access_type = &quot;Public&quot;, uri = &quot;https://www.openicpsr.org/openicpsr/project/119802/version/V1/view&quot;), list(name = &quot;Randomization data&quot;, idno = &quot;&quot;, note = &quot;Stata 14 data files&quot;, access_type = &quot;Public&quot;, uri = &quot;https://www.openicpsr.org/openicpsr/project/119802/version/V1/view&quot;), list(name = &quot;2008 PPLS&quot;, idno = &quot;&quot;, note = &quot;Stata 14 data files&quot;, access_type = &quot;Public&quot;, uri = &quot;https://www.openicpsr.org/openicpsr/project/119802/version/V1/view&quot;), list(name = &quot;2008 PODES - Village level administrative data&quot;, idno = &quot;&quot;, note = &quot;Stata 14 data files&quot;, access_type = &quot;Public&quot;, uri = &quot;https://www.openicpsr.org/openicpsr/project/119802/version/V1/view&quot;), list(name = &quot;Coded data (intermediary data files generated by the scripts)&quot;, idno = &quot;&quot;, note = &quot;Stata 14 data files&quot;, access_type = &quot;Public&quot;, uri = &quot;https://www.openicpsr.org/openicpsr/project/119802/version/V1/view&quot;) ), sponsors = list( list(name=&quot;Australian Aid (World Bank Trust Fund)&quot;, abbr=&quot;AusAID&quot;, role=&quot;Financial support&quot;), list(name=&quot;3ie&quot;, grant_no=&quot;OW3.1055&quot;, role=&quot;Financial support&quot;), list(name=&quot;NIH&quot;, grant_no=&quot;P01 HD061315&quot;, role=&quot;Financial support&quot;) ), acknowledgements = list( list(name = &quot;Jurist Tan, Talitha Chairunissa, Amri Ilmma, Chaeruddin Kodir, He Yang, and Gabriel Zucker&quot;, role = &quot;Research assistance&quot;), list(name = &quot;Scott Guggenheim&quot;, role = &quot;Provided comments&quot;), list(name = &quot;Mitra Samya, BPS, TNP2K, and SurveyMeter&quot;, role = &quot;Field cooperation&quot;) ), disclaimer = &quot;Users acknowledge that the original collector of the data, ICPSR, and the relevant funding agency bear no responsibility for use of the data or for interpretations or inferences based upon such uses.&quot;, scripts = list( list(file_name = &quot;0MASTER-20190918.do&quot;, zip_package = &quot;119802-V1.zip&quot;, title = &quot;Master Stata do file&quot;, authors = list(list(name=&quot;Rema Hanna, Ben Olken (PIs) and Sam Solomon (RA)&quot;)), format = &quot;Stata do file&quot;, software = &quot;Stata 14&quot;, description = &quot;Master do file; this script calls all do files required to replicate the output from start to finish (in no more than a few minutes)&quot;, notes = &quot;Original data is in data-PUBLISH/originaldata and is all that is needed to run the code; all data in data-PUBLISH/codeddata is created from the coding do files. All results are then created and saved in output-PUBLISH/tables.&quot;), list(file_name = &quot;coding baseline.do&quot;, title = &quot;coding baseline variables&quot;, zip_package = &quot;119802-V1.zip&quot;, format = &quot;Stata do file&quot;, software = &quot;Stata 14&quot;, description = &quot;Coding/matching script 1/7&quot;), list(file_name = &quot;coding suseti pmt.do&quot;, title = &quot;coding pmt&quot;, zip_package = &quot;119802-V1.zip&quot;, format = &quot;Stata do file&quot;, software = &quot;Stata 14&quot;, description = &quot;Coding/matching script 2/7&quot;), list(file_name = &quot;coding elite relation.do&quot;, title = &quot;coding additional variables for analysis&quot;, zip_package = &quot;119802-V1.zip&quot;, format = &quot;Stata do file&quot;, software = &quot;Stata 14&quot;, description = &quot;Coding/matching script 3/7&quot;), list(file_name = &quot;matching hybrid.do&quot;, title = &quot;matching baseline survey data and matching results&quot;, zip_package = &quot;119802-V1.zip&quot;, format = &quot;Stata do file&quot;, software = &quot;Stata 14&quot;, description = &quot;Coding/matching script 4/7; Generates poverty density measure&quot;), list(file_name = &quot;coding existing social programs.do&quot;, title = &quot;coding existing social programs&quot;, zip_package = &quot;119802-V1.zip&quot;, format = &quot;Stata do file&quot;, software = &quot;Stata 14&quot;, description = &quot;Coding/matching script 5/7&quot;), list(file_name = &quot;coding kitchen-sink variables.do&quot;, title = &quot;coding miscellaneous variables&quot;, zip_package = &quot;119802-V1.zip&quot;, format = &quot;Stata do file&quot;, software = &quot;Stata 14&quot;, description = &quot;Coding/matching script 6/7&quot;), list(file_name = &quot;coding_partV_hybrid.do&quot;, title = &quot;coding for part V of analysis plan&quot;, zip_package = &quot;119802-V1.zip&quot;, format = &quot;Stata do file&quot;, software = &quot;Stata 14&quot;, description = &quot;Coding/matching script 7/7&quot;), list(file_name = &quot;0 Table 1AB.do&quot;, title = &quot;Table 1: formal vs. informal elites - Panels A and B: historical benefits&quot;, zip_package = &quot;119802-V1.zip&quot;, format = &quot;Stata do file&quot;, software = &quot;Stata 14&quot;, description = &quot;Analysis script 1/7&quot;), list(file_name = &quot;0 Table 1CD.do&quot;, title = &quot;Table 1: formal vs. informal elites - Panels C and D: PKH Experiment&quot;, zip_package = &quot;119802-V1.zip&quot;, format = &quot;Stata do file&quot;, software = &quot;Stata 14&quot;, description = &quot;Analysis script 2/7&quot;), list(file_name = &quot;0 Table 2 Appendix Table 3.do&quot;, title = &quot;Table 7: Social welfare simulations&quot;, zip_package = &quot;119802-V1.zip&quot;, format = &quot;Stata do file&quot;, software = &quot;Stata 14&quot;, description = &quot;Analysis script 3/7&quot;), list(file_name = &quot;0 Appendix Table 1A.do&quot;, title = &quot;Table 2A: Elite capture in historical programs&quot;, zip_package = &quot;119802-V1.zip&quot;, format = &quot;Stata do file&quot;, software = &quot;Stata 14&quot;, description = &quot;Analysis script 4/7&quot;), list(file_name = &quot;0 Appendix Table 1B.do&quot;, title = &quot;Table 2B: Elite capture in PKH experiment&quot;, zip_package = &quot;119802-V1.zip&quot;, format = &quot;Stata do file&quot;, software = &quot;Stata 14&quot;, description = &quot;Analysis script 5/7&quot;), list(file_name = &quot;0 Appendix Table 2.do&quot;, title = &quot;Appendix Table 12: Probit Model from Table 7&quot;, zip_package = &quot;119802-V1.zip&quot;, format = &quot;Stata do file&quot;, software = &quot;Stata 14&quot;, description = &quot;Analysis script 6/7&quot;), list(file_name = &quot;0 Appendix Table 4.do&quot;, title = &quot;Appendix Table 13: Social welfare simulations -- PKH - Additional model from Table 7&quot;, zip_package = &quot;119802-V1.zip&quot;, format = &quot;Stata do file&quot;, software = &quot;Stata 14&quot;, description = &quot;Analysis script 7/7&quot;), list(file_name = &quot;master_log_09182019.smcl&quot;, title = &quot;Log file - Run of master do file&quot;, zip_package = &quot;119802-V1.zip&quot;, format = &quot;Stata log file&quot;, software = &quot;Stata 14&quot;, description = &quot;Latest log file obtained by running the master do file&quot;) ) ) ) # Publish the project metadata in the NADA catalog script_add(idno = id, metadata = my_project_metadata, repositoryid = &quot;central&quot;, published = 1, thumbnail = thumb, overwrite = &quot;yes&quot;) # Add links to ICPSROpen website and AEA website as external resources: external_resources_add( title = &quot;Elite Capture Paper (Alatas et Al., 2019) - Project page - OpenICPSR&quot;, idno = id, dctype = &quot;web&quot;, file_path = &quot;https://www.openicpsr.org/openicpsr/project/116471/version/V1/view;jsessionid=31C3E76620D0DDD1CABADAA263A1E491&quot;, overwrite = &quot;yes&quot; ) external_resources_add( title = &quot;American Economic Association (AEA) paper: Does Elite Capture Matter? Local Elites and Targeted Welfare Programs in Indonesia&quot;, idno = id, dctype = &quot;doc/anl&quot;, file_path = &quot;https://www.aeaweb.org/articles?id=10.1257/pandp.20191047&quot;, overwrite = &quot;yes&quot; ) The metadata and all resources (script files, etc.) are now available in the NADA catalog. @@@@@ redo screenshot when displays external resources 12.5.3 Full example, using Python # Python example "],["chapter13.html", "Chapter 13 External resources 13.1 Example of use of external resources", " Chapter 13 External resources The metadata schemas presented in chapters 4 to 12 of the Guide are intended to document in detail resources of multiple types (data and scripts). When published in a NADA catalog, these metadata will be made visible and searchable. But publishing metadata in an HTML format is not enough. In most cases, you will also want to made files (data files, documents, or others) accessible in your catalog, and provide links to other, related resources. These files will have to be uploaded on your web server, and the links created, with some documentation. These related materials are what is referred to as “external resources”. External resources are not a specific type of data. They are resources of any type (data, document, web page, or any other type of resource that can be provided as an electronic file or a web link) that can be attached as a “related resource” to a catalog entry. A schema that is intentionally kept very simple, based on the Dublin Core standard, is used to describe these resources. This schema will never be used independently; it will always be used in combination with one of the other metadata standards and schemas documented in this Guide. The table below shows some examples of the kind of external resources that may be attached to the metadata of different data types. Data type Resources that may be documented and published as external resources Document MS-Excel version of tables included in a publication ; PDF/DOC version of the publication ; visualizations files (scripts and image) for visualizations included in the publication ; link to electronic annexes Microdata survey questionnaire ; survey report ; technical documentation (sampling, etc.) ; data entry application ; survey budget in Excel ; microdata files in different formats ; link to an external website Geographic dataset link to an interactive web application ; technical documentation in PDF ; data analysis scripts ; publicly accessible data files Time series link to a database query interface ; technical documents ; link to external websites ; visualization scripts Tables link to an organization website ; tabulation scripts Images image files in different formats and resolutions ; link to a photo album application ; link to a photographer website Audio recordings audio file in MP3 or other format ; transcript in PDF Videos video file in WAV or other format ; transcript in PDF Scripts publication ; link to a package/library web page ; link to datasets Note that a catalog entry (e.g. a document, or a table) can itself be provided as a link (i.e. as an external resource) for another catalog entry. In a NADA catalog, the external resources will not appear as catalog entries. Their list and description will be displayed (and the resources made accessible) in a “DOWNLOAD” tab for the entry to which they are attached. The schema used to document external resources only contains 16 elements. { &quot;dctype&quot;: &quot;doc/adm&quot;, &quot;dcformat&quot;: &quot;application/zip&quot;, &quot;title&quot;: &quot;string&quot;, &quot;author&quot;: &quot;string&quot;, &quot;dcdate&quot;: &quot;string&quot;, &quot;country&quot;: &quot;string&quot;, &quot;language&quot;: &quot;string&quot;, &quot;contributor&quot;: &quot;string&quot;, &quot;publisher&quot;: &quot;string&quot;, &quot;rights&quot;: &quot;string&quot;, &quot;description&quot;: &quot;string&quot;, &quot;abstract&quot;: &quot;string&quot;, &quot;toc&quot;: &quot;string&quot;, &quot;filename&quot;: &quot;string&quot;, &quot;created&quot;: &quot;2023-04-09T19:23:22Z&quot;, &quot;changed&quot;: &quot;2023-04-09T19:23:22Z&quot; } dctype [Optional, Not Repeatable, String] This element defines the type of external resource being documented. This element plays an important role in the cataloguing system (NADA), as it is used to determine where and how the resource will be published. Particular attention must be paid to the type “Microdata File” (dat/micro) and to other data types, when the datasets will be published in a data catalog but with access restrictions). The NADA catalog allows data to be published under different levels of accessibility: open data, direct access, public use files, licensed data, access in data enclave, or no access. Most standards include an element access_policy which is used to determine the type of access to a resource, and will apply to data of type dat/micro. The resource type dctype must be selected from a controlled vocabulary: doc/adm: Document, Administrative [doc/adm] doc/anl: Document, Analytical [doc/anl] doc/oth: Document, Other [doc/oth] doc/qst: Document, Questionnaire [doc/qst] doc/ref: Document, Reference [doc/ref] doc/rep: Document, Report [doc/rep] doc/tec: Document, Technical [doc/tec] aud: Audio [aud] dat: Database [dat] (not including microdata) map: Map [map] dat/micro: Microdata File [dat/micro] pic: Photo / image [pic] prg: Program / script [prg] tbl: Table [tbl] vid: Video [vid] web: Web Site [web] dcformat [Optional, Not Repeatable, String] The resource file format. This format can be entered using a controlled vocabulary. Options could include: application/x-compressed: Compressed, Generic application/zip: Compressed, ZIP application/x-cspro: Data, CSPro application/dbase: Data, dBase application/msaccess: Data, Microsoft Access application/x-sas: Data, SAS application/x-spss: Data, SPSS application/x-stata: Data, Stata text: Document, Generic text/html: Document, HTML application/msexcel: Document, Microsoft Excel application/mspowerpoint: Document, Microsoft PowerPoint application/msword: Document, Microsoft Word application/pdf: Document, PDF application/postscript: Document, Postscript text/plain: Document, Plain text/wordperfect: Document, WordPerfect image/gif: Image, GIF image/jpeg: Image, JPEG image/png: Image, PNG image/tiff: Image, TIFF title [Required, Not Repeatable, String] The title of the resource. author [Optional, Not Repeatable, String] The author(s) of the resource. If more than one, separate the names with a “;”. dcdate [Optional, Not Repeatable, String] The date the resource was produced or released, preferably entered in ISO 8601 format (YYYY-MM-DD or YYYY-MM or YYYY). country [Optional, Not Repeatable, String] The country name, if the resource is specific to a country. If more than one, enter the country names separated with a “;”. language [Optional, Not Repeatable, String] The language name. If more than one, enter the language names separated with a “;”. contributor [Optional, Not Repeatable, String] List of contributor (free text). If more than one, enter the names separated with a “;”. publisher [Optional, Not Repeatable, String] List of contributor (free text). If more than one, enter the names separated with a “;”. rights [Optional, Not Repeatable, String] The rights associated with the resource. description [Optional, Not Repeatable, String] A brief description of the resource (but not the abstract; see the next element). abstract [Optional, Not Repeatable, String] And abstract for the resource. toc [Optional, Not Repeatable, String] The table of content of the resource (if the resource is a publication), entered as free text. filename [Optional, Not Repeatable, String] A file name or a URL. 13.1 Example of use of external resources The “complete examples” provided in the previous chapters included some examples of the use of the “external_resources_add” command (from the Nadar R package) or “…” (from the PyNada Python library). We provide here one more example. # R example @@@@ # Python example @@@@ "],["annex-1-references-and-links.html", "Annex 1: References and links", " Annex 1: References and links Documents Asian Development Bank (ADB). 2001. Mapping the Spatial Distribution of Poverty Using Satellite Imagery in Thailand ISBN 978-92-9262-768-3 (print), 978-92-9262-769-0 (electronic), 978-92-9262-770-6 (ebook) Publication Stock No. TCS210112-2. DOI: http://dx.doi.org/10.22617/TCS210112-2 Balashankar, A., L.Subramanian, and S.P. Fraiberger. 2021. Fine-grained prediction of food insecurity using news streams British Ecological Society. 2017. Guide to Reproducible Code in Ecology and Evolution Google. Google’s Search Engine Optimization (SEO) Starter Guide Jurafsky, Daniel; H. James, Martin. 2000. Speech and language processing : an introduction to natural language processing, computational linguistics, and speech recognition. Upper Saddle River, N.J.: Prentice Hall. ISBN 978-0-13-095069-7 Mikolov, T., K.Chen, G.Corrado, and J.Dean. 2013. Efficient Estimation of Word Representations in Vector Space Min, B. and Z.O’Keeffe. 2021. http://www-personal.umich.edu/~brianmin/HREA/index.html Priest, G.. 2010. The Struggle for Integration and Harmonization of Social Statistics in a Statistical Agency - A Case Study of Statistics Canada Stodden et al. 2013. Setting the Default to Reproducible - Reproducibility in Computational and Experimental Mathematics Turnbull, D. and J. Berryman. 2016. Relevant Search: With applications for Solr and Elasticsearch Links (standards, schemas, controlled vocabularies) American Psychological Association (APA): APA Style (example of specific publications styles for a table) Consortium of European Social Science Data Archives (CESSDA) US Census Bureau, CsPro Users Guide: Parts of a Table Data Documentation Initiative (DDI) Alliance DDI Alliance, Data Documentation Initiative (DDI) Codebook Dublin Core Metadata Initiative (DCMI) eMathZone: Construction of a Statistical Table GoFair (Findable, Accessible, Interoperable and Reusable (FAIR)) International Household Survey Network (IHSN) International Press Telecommunications Council (IPTC) International Organization for Standardization (ISO) 19139: Geographic information — Metadata — XML schema implementation LabWrite: Designing Tables schema.org Microsoft Bing: Bing Webmaster Tools Help &amp; How-To Center, Bing Webmaster Guidelines Vedantu: Tabulation Links (tools) CKAN open-source data management system ElasticSearch GeoNetwork Milvus) NADA cataloguing application, web page NADA cataloguing application, demo page NADA cataloguing application, GitHub repository NADAR package Nesstar Publisher (DDI 1.n Metadata Editor R: The R Project for Statistical Computing R Bookdown: Write HTML, PDF, ePub, and Kindle books with R Markdown R geometa: Tools for Reading and Writing ISO/OGC Geographic Metadata Solr Links (others) WorldPop: https://www.worldpop.org/ "],["annex-2-mapping-standards-and-schemas-to-schema.html", "Annex 2: Mapping standards and schemas to schema.org", " Annex 2: Mapping standards and schemas to schema.org The use of structured data described in section 1.6.2 requires a mapping between the relevant elements of some of the metadata standards and schemas described in the Guide to the schema.org standard. We provide here a suggested selection and mapping for the core set of elements (we do not attempt to map all possible elements that are common to our schemas and schema.org). 1.1 Microdata schema.org/dataset DDI CodeBook Recommendation name description url sameAs identifier keywords license isAccessibleForFree hasPart / isPartOf creator type / url / name / contactPoint / funder includedInDataCatalog distribution temporalCoverage spatialCoverage Example: &lt;html&gt; &lt;head&gt; &lt;script type=&quot;application/ld+json&quot;&gt; { &quot;@context&quot;:&quot;https://schema.org/&quot;, &quot;@type&quot;:&quot;Dataset&quot;, &quot;name&quot;:&quot;Albania Living Standards Measurement Survey 2012 (LSMS 2010)&quot;, &quot;description&quot;:&quot;The Living Standards Measurement Survey (LSMS) is a multi-purpose household survey conducted to measure living conditions and poverty situation, and to help policymakers in monitoring and developing social programs. LSMS has been carried out in Albania in the context of continuing monitoring of poverty and the creation of policy evaluation system in the framework of the National Strategy for Development and Integration (previously the National Strategy for Economic and Social Development). The first Albania LSMS was conducted in 2002, followed by 2003, 2004, 2005, 2008 and 2012 surveys. In 2012, 6,671 households participated in the survey.&quot;, &quot;url&quot;:&quot;https://microdata.worldbank.org/index.php/catalog/1970&quot;, &quot;identifier&quot;: [&quot;ALB_2012_LSMS_v01_M_v01_A_PUF&quot;], &quot;keywords&quot;:[ &quot;demographic characteristics&quot;, &quot;education&quot;, &quot;communication&quot;, &quot;labor&quot;, &quot;employment&quot;, &quot;non-farm business&quot;, &quot;migration&quot;, &quot;remittances&quot;, &quot;subjective poverty&quot;, &quot;health&quot;, &quot;fertility&quot;, &quot;non-food expenditures&quot;, &quot;dwelling&quot;, &quot;utilities&quot;, &quot;durable goods&quot;, &quot;daily food consumption&quot; ], &quot;license&quot; : &quot;&quot;, &quot;isAccessibleForFree&quot; : true, &quot;creator&quot;:[ { &quot;@type&quot;:&quot;Organization&quot;, &quot;url&quot;: &quot;http://www.instat.gov.al/en/&quot;, &quot;name&quot;:&quot;Institute of Statistics of Albania&quot;, &quot;contactPoint&quot;:{ &quot;@type&quot;:&quot;ContactPoint&quot;, &quot;email&quot;:&quot;info@instat.gov.al&quot; }, { &quot;@type&quot;:&quot;Organization&quot;, &quot;url&quot;: &quot;https://www.worldbank.org/&quot;, &quot;name&quot;:&quot;World Bank&quot;, &quot;contactPoint&quot;:{ &quot;@type&quot;:&quot;ContactPoint&quot;, &quot;contactType&quot;: &quot;LSMS technical support&quot;, &quot;email&quot;:&quot;lsms@worldbank.org&quot; } ], &quot;funder&quot;:{ &quot;@type&quot;: &quot;Organization&quot;, &quot;name&quot;: &quot;World Bank&quot; }, &quot;includedInDataCatalog&quot;:{ &quot;@type&quot;:&quot;World Bank Microdata Library&quot;, &quot;name&quot;:&quot;https://microdata.worldbank.org/index.php/home&quot; }, &quot;distribution&quot;:[ { &quot;@type&quot;:&quot;DataDownload&quot;, &quot;encodingFormat&quot;:&quot;SPSS Windows (.sav)&quot;, &quot;contentUrl&quot;:&quot;http://www.instat.gov.al/en/figures/micro-data/&quot; } ], &quot;temporalCoverage&quot;:&quot;2012&quot;, &quot;spatialCoverage&quot;:{ &quot;@type&quot;:&quot;Place&quot;, &quot;name&quot;: &quot;Albania&quot; } } } &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt; &lt;/html&gt; 1.2 Geographic data schema.org/dataset ISO 19139 Recommendation name description url sameAs identifier keywords license isAccessibleForFree hasPart / isPartOf creator type / url / name / contactPoint / funder includedInDataCatalog distribution temporalCoverage spatialCoverage Example: 1.3 Indicators (and database) schema.org/dataset INDICATOR schema Recommendation name description url sameAs identifier keywords license isAccessibleForFree hasPart / isPartOf creator type / url / name / contactPoint / funder includedInDataCatalog distribution temporalCoverage spatialCoverage Example: 1.4 Tables schema.org/dataset TABLES schema Recommendation name description url sameAs identifier keywords license isAccessibleForFree hasPart / isPartOf creator type / url / name / contactPoint / funder includedInDataCatalog distribution temporalCoverage spatialCoverage Example: 1.5 Images The complete list of elements available in schema.org to document an image object is available at https://schema.org/ImageObject. We only show in the table below a selection of the ones we consder the most relevant and frequently available. Images can be documented either using the IPTC-based schema, or the Dublin Core (DCMI)-based schema. schema.org/dataset IMAGE schema (IPTC) Recommendation name abstract creator provider sourceOrganization dateCreated keywords contentLocation contentReferenceTime copyrightHolder copyrightNotice copyrightYear creditText isAccessibleForFree license acquireLicensePage contentUrl schema.org/dataset IMAGE schema (DCMI) Recommendation name abstract creator provider sourceOrganization dateCreated keywords contentLocation contentReferenceTime copyrightHolder copyrightNotice copyrightYear creditText isAccessibleForFree license acquireLicensePage contentUrl Example: Residents get water from an artesian well, Sindh, Pakistan "],["annex-3-mapping-the-microdata-schema-to-the-ddi-codebook-2.html", "Annex 3: Mapping the microdata schema to the DDI Codebook 2.5", " Annex 3: Mapping the microdata schema to the DDI Codebook 2.5 JSON Schema DDI/XML CodeBook 2.5 Title doc_desc docDscr doc_desc/title docDscr/citation/titlStmt/titl Document title doc_desc/idno docDscr/citation/titlStmt/IDNo Unique ID number for the document doc_desc/producers docDscr/citation/prodStmt/producer Producers - name . Name - abbr - abbr Abbreviation - affiliation - affiliation Affiliation - role - role Role doc_desc/prod_date docDscr/citation/prodStmt/prodDate Date of Production doc_desc/version_statement docDscr/citation/verStmt Version Statement doc_desc/version_statement/version docDscr/citation/verStmt/version Version doc_desc/version_statement/version_date docDscr/citation/verStmt/version/@date Version Date doc_desc/version_statement/version_resp docDscr/citation/verStmt/verResp Version Responsibility Statement doc_desc/version_statement/version_notes docDscr/citation/verStmt/notes Version Notes study_desc stdyDscr study_desc/title_statement stdyDscr/citation/titlStmt study_desc/title_statement/idno stdyDscr/citation/titlStmt/IDNo Unique user defined ID study_desc/title_statement/identifiers Other identifiers - type Identifier type - identifier Identifier study_desc/title_statement/title stdyDscr/citation/titlStmt/titl Survey title study_desc/title_statement/sub_title stdyDscr/citation/titlStmt/subTitl Survey subtitle study_desc/title_statement/alternate_title stdyDscr/citation/titlStmt/altTitl Abbreviation or Acronym study_desc/title_statement/translated_title stdyDscr/citation/titlStmt/parTitl Translated Title study_desc/authoring_entity stdyDscr/citation/rspStmt/AuthEnty Authoring entity/Primary investigators - name . Agency Name - affiliation - affiliation Affiliation study_desc/oth_id stdyDscr/citation/rspStmt/othId Other Identifications/Acknowledgments - name . Name - role - role Role - affiliation - affiliation Affiliation study_desc/production_statement stdyDscr/citation/prodStmt Production Statement study_desc/production_statement/producers stdyDscr/citation/prodStmt/producer Producers - name . Name - abbr - abbr Abbreviation - affiliation - affiliation Affiliation - role - role Role study_desc/production_statement/copyright stdyDscr/citation/prodStmt/copyright Copyright study_desc/production_statement/prod_date stdyDscr/citation/prodStmt/prodDate Production Date study_desc/production_statement/prod_place stdyDscr/citation/prodStmt/prodPlac Production Place study_desc/production_statement/funding_agencies stdyDscr/citation/prodStmt/fundAg Funding Agency/Sponsor - name . Funding Agency/Sponsor - abbr - abbr Abbreviation - grant - stdyDscr/citation/prodStmt/fundAg Grant Number - role - role Role study_desc/distribution_statement stdyDscr/citation/distStmt Distribution Statement study_desc/distribution_statement/distributors stdyDscr/citation/distStmt/distrbtr Distributor - name . Organization name - abbr - abbr Abbreviation - affiliation - affiliation Affiliation - uri - uri URI study_desc/distribution_statement/contact stdyDscr/citation/distStmt/contact Contact - name . Name - affiliation - affiliation Affiliation - email - email Email - uri - uri URI study_desc/distribution_statement/depositor stdyDscr/citation/distStmt/depositr Depositor - name . Name - abbr - abbr Abbreviation - affiliation - affiliation Affiliation - uri URI study_desc/distribution_statement/deposit_date stdyDscr/citation/distStmt/depDate Date of Deposit study_desc/distribution_statement/distribution_date stdyDscr/citation/distStmt/distDate Date of Distribution study_desc/series_statement stdyDscr/citation/serStmt Series Statement study_desc/series_statement/series_name stdyDscr/citation/serStmt/serName Series Name study_desc/series_statement/series_info stdyDscr/citation/serStmt/serInfo Series Information study_desc/version_statement stdyDscr/citation/verStmt Version Statement study_desc/version_statement/version stdyDscr/citation/verStmt/version Version study_desc/version_statement/version_date stdyDscr/citation/verStmt/version/@date Version Date study_desc/version_statement/version_resp stdyDscr/citation/verStmt/verResp Version Responsibility Statement study_desc/version_statement/version_notes stdyDscr/citation/verStmt/notes Version Notes study_desc/bib_citation stdyDscr/citation/biblCit Bibliographic Citation study_desc/bib_citation_format stdyDscr/citation/biblCit/@format Bibliographic Citation Format study_desc/holdings stdyDscr/citation/holdings Holdings Information - name . Name - location - location Location - callno - callno Callno - uri - uri URI study_desc/study_notes stdyDscr/citation/notes Study notes study_desc/study_authorization stdyDscr/studyAuthorization Study Authorization study_desc/study_authorization/date stdyDscr/studyAuthorization/@date Authorization Date study_desc/study_authorization/agency stdyDscr/studyAuthorization/authorizingAgency Authorizing Agency - name . Funding Agency/Sponsor - affiliation - affiliation Affiliation - abbr - abbr Abbreviation study_desc/study_authorization/authorization_statement stdyDscr/studyAuthorization/authorizationStatement Authorization Statement study_desc/study_info stdyDscr/stdyInfo Study Scope study_desc/study_info/study_budget stdyDscr/stdyInfo/studyBudget Study Budget study_desc/study_info/keywords stdyDscr/stdyInfo/subject/keyword - keyword . Keyword - vocab - vocab Vocabulary - uri - vocabURI uri study_desc/study_info/topics stdyDscr/stdyInfo/subject/topcClas Topic Classification - topic . Topic - vocab - vocab Vocab - uri - vocabURI URI study_desc/study_info/abstract stdyDscr/stdyInfo/abstract Abstract study_desc/study_info/time_periods stdyDscr/stdyInfo/sumDscr/timePrd Time periods (YYYY/MM/DD) - start Start date - end End date - cycle Cycle study_desc/study_info/coll_dates stdyDscr/stdyInfo/sumDscr/collDate Dates of Data Collection (YYYY/MM/DD) - start Start date - end End date - cycle Cycle study_desc/study_info/nation stdyDscr/stdyInfo/sumDscr/nation Country - name . Name - abbreviation - abbr Country code study_desc/study_info/bbox stdyDscr/sumDscr/geoBndBox Geographic bounding box - west - westBL West - east - eastBL East - south - southBL South - north - northBL North study_desc/study_info/bound_poly stdyDscr/sumDscr/boundPoly/polygon/point Geographic Bounding Polygon - lat gringLat Latitude - lon gringLon longitude study_desc/study_info/geog_coverage stdyDscr/stdyInfo/sumDscr/geogCover Geographic Coverage study_desc/study_info/geog_coverage_notes stdyDscr/sumDscr/geogCover/txt Geographic Coverage notes study_desc/study_info/geog_unit stdyDscr/stdyInfo/sumDscr/geogUnit Geographic Unit study_desc/study_info/analysis_unit stdyDscr/stdyInfo/sumDscr/anlyUnit Unit of Analysis study_desc/study_info/universe stdyDscr/stdyInfo/sumDscr/universe Universe study_desc/study_info/data_kind stdyDscr/stdyInfo/sumDscr/dataKind Kind of Data study_desc/study_info/notes stdyDscr/stdyInfo/notes Study notes study_desc/study_info/quality_statement stdyDscr/stdyInfo/qualityStatement Quality Statement study_desc/study_info/quality_statement/compliance_description stdyDscr/stdyInfo/qualityStatement/standardsCompliance/complianceDescription Standard compliance description study_desc/study_info/quality_statement/standards stdyDscr/stdyInfo/qualityStatement/standardsCompliance/standard Standards - name standardName Name - producer producer * Producer study_desc/study_info/quality_statement/other_quality_statement stdyDscr/stdyInfo/qualityStatement/otherQualityStatement Other quality statement study_desc/study_info/ex_post_evaluation stdyDscr/stdyInfo/exPostEvaluation Ex-Post Evaluation study_desc/study_info/ex_post_evaluation/completion_date stdyDscr/stdyInfo/exPostEvaluation/@completionDate Evaluation completion date study_desc/study_info/ex_post_evaluation/type stdyDscr/stdyInfo/@type Evaluation type study_desc/study_info/ex_post_evaluation/evaluator stdyDscr/stdyInfo/exPostEvaluation/evaluator Evaluators - name . Funding Agency/Sponsor - affiliation - affiliation Affiliation - abbr - abbr Abbreviation - role - role Role study_desc/study_info/ex_post_evaluation/evaluation_process stdyDscr/stdyInfo/exPostEvaluation/evaluationProcess Evaluation process study_desc/study_info/ex_post_evaluation/outcomes stdyDscr/stdyInfo/exPostEvaluation/outcomes Outcomes study_desc/study_development stdyDscr/studyDevelopment Study Development study_desc/study_development/development_activity stdyDscr/studyDevelopment/developmentActivity Development activity - activity_type . Development activity type - activity_description - description Development activity description - participants - participants Participants - resources - resources Development activity resources - outcome - outcome Development Activity Outcome study_desc/method stdyDscr/method Methodology and Processing study_desc/method/data_collection stdyDscr/method/dataColl Data Collection study_desc/method/data_collection/time_method stdyDscr/method/dataColl/timeMeth Time Method study_desc/method/data_collection/data_collectors stdyDscr/method/dataColl/dataCollector Data Collectors - name . Name - affiliation Affiliation - abbr Abbreviation - role Role study_desc/method/data_collection/collector_training stdyDscr/method/dataColl/collectorTraining Collector training - type @type Training type - training . Training study_desc/method/data_collection/frequency stdyDscr/method/dataColl/frequenc Frequency of Data Collection study_desc/method/data_collection/sampling_procedure stdyDscr/method/dataColl/sampProc Sampling Procedure study_desc/method/data_collection/sample_frame stdyDscr/method/dataColl/sampleFrame Sample Frame study_desc/method/data_collection/sample_frame/name stdyDscr/method/dataColl/sampleFrame/sampleFrameName Sample frame name study_desc/method/data_collection/sample_frame/valid_period stdyDscr/method/dataColl/sampleFrame/validPeriod Valid periods (YYYY/MM/DD) - event Event - date Date study_desc/method/data_collection/sample_frame/custodian stdyDscr/method/dataColl/sampleFrame/custodian Custodian study_desc/method/data_collection/sample_frame/universe stdyDscr/method/dataColl/sampleFrame/universe Universe study_desc/method/data_collection/sample_frame/frame_unit stdyDscr/method/dataColl/sampleFrame/frameUnit Frame unit study_desc/method/data_collection/sample_frame/frame_unit/is_primary stdyDscr/method/dataColl/sampleFrame/frameUnit/@isPrimary Is Primary study_desc/method/data_collection/sample_frame/frame_unit/unit_type stdyDscr/method/dataColl/sampleFrame/frameUnit/unitType Unit Type study_desc/method/data_collection/sample_frame/frame_unit/num_of_units stdyDscr/method/dataColl/sampleFrame/frameUnit/@numberOfUnits Number of units study_desc/method/data_collection/sample_frame/reference_period stdyDscr/method/dataColl/sampleFrame/referencePeriod Reference periods (YYYY/MM/DD) - event Event - date Date study_desc/method/data_collection/sample_frame/update_procedure stdyDscr/method/dataColl/sampleFrame/updateProcedure Update procedure study_desc/method/data_collection/sampling_deviation stdyDscr/method/dataColl/deviat Deviations from the Sample Design study_desc/method/data_collection/coll_mode stdyDscr/method/dataColl/collMode Mode of data collection study_desc/method/data_collection/research_instrument stdyDscr/method/dataColl/resInstru Type of Research Instrument study_desc/method/data_collection/instru_development stdyDscr/method/dataColl/instrumentDevelopment Instrument development study_desc/method/data_collection/instru_development_type stdyDscr/method/dataColl/instrumentDevelopment/@type Instrument development type study_desc/method/data_collection/sources stdyDscr/method/dataColl/sources Sources - name Source name - origin Origin of Source - characteristics Characteristics of Source Noted study_desc/method/data_collection/coll_situation stdyDscr/method/dataColl/collSitu Characteristics of Data Collection Situation - Notes on data collection study_desc/method/data_collection/act_min stdyDscr/method/dataColl/actMin Supervision study_desc/method/data_collection/control_operations stdyDscr/method/dataColl/ConOps Control Operations study_desc/method/data_collection/weight stdyDscr/method/dataColl/weight Weighting study_desc/method/data_collection/cleaning_operations stdyDscr/method/dataColl/cleanOps Cleaning Operations study_desc/method/method_notes stdyDscr/method/notes Methodology notes study_desc/method/analysis_info stdyDscr/method/anlyInfo Data Appraisal study_desc/method/analysis_info/response_rate stdyDscr/method/anlyInfo/respRate Response Rate study_desc/method/analysis_info/sampling_error_estimates stdyDscr/method/anlyInfo/EstSmpErr Estimates of Sampling Error study_desc/method/analysis_info/data_appraisal stdyDscr/method/anlyInfo/dataAppr Data Appraisal study_desc/method/study_class stdyDscr/method/stdyClas Class of the Study study_desc/method/data_processing stdyDscr/method/dataProcessing Data Processing - type Data processing type - description Data processing description study_desc/method/coding_instructions stdyDscr/method/codingInstructions Coding Instructions - related_processes Related processes - type Coding instructions type - txt Coding instructions text - command Command - formal_language Identify the language of the command code study_desc/data_access stdyDscr/dataAccs/setAvail/dataAccs study_desc/data_access/dataset_availability stdyDscr/dataAccs/setAvail Data Set Availability study_desc/data_access/dataset_availability/access_place stdyDscr/dataAccs/setAvail/accsPlac Location of Data Collection study_desc/data_access/dataset_availability/access_place_url stdyDscr/dataAccs/setAvail/accsPlac/@URI URL for Location of Data Collection study_desc/data_access/dataset_availability/original_archive stdyDscr/dataAccs/setAvail/origArch Archive where study is originally stored study_desc/data_access/dataset_availability/status stdyDscr/dataAccs/setAvail/avlStatus Availability Status study_desc/data_access/dataset_availability/coll_size stdyDscr/dataAccs/setAvail/collSize Extent of Collection study_desc/data_access/dataset_availability/complete stdyDscr/dataAccs/setAvail/complete Completeness of Study Stored study_desc/data_access/dataset_availability/file_quantity stdyDscr/dataAccs/setAvail/fileQnty Number of Files study_desc/data_access/dataset_availability/notes stdyDscr/dataAccs/setAvail/notes Notes study_desc/data_access/dataset_use stdyDscr/dataAccs/useStmt Data Set Availability study_desc/data_access/dataset_use/conf_dec stdyDscr/dataAccs/useStmt/confDec Confidentiality Declaration - txt . Confidentiality declaration text - required - required Is signing of a confidentiality declaration required? - form_url - URI Confidentiality declaration form URL - form_id - formNo Form ID study_desc/data_access/dataset_use/spec_perm stdyDscr/dataAccs/useStmt/specPerm Special Permissions - txt Special permissions description - required - required Indicate if special permissions are required to access a resource - form_url - URI Form URL - form_id - formNo Form ID study_desc/data_access/dataset_use/restrictions stdyDscr/dataAccs/useStmt/restrctn Restrictions study_desc/data_access/dataset_use/contact stdyDscr/dataAccs/useStmt/contact Contact - name . Name - affiliation - affiliation Affiliation - uri - URI URI - email - email Email study_desc/data_access/dataset_use/cit_req stdyDscr/dataAccs/useStmt/citReq Citation requirement study_desc/data_access/dataset_use/deposit_req stdyDscr/dataAccs/useStmt/deposReq Deposit requirement study_desc/data_access/dataset_use/conditions stdyDscr/dataAccs/useStmt/conditions Conditions study_desc/data_access/dataset_use/disclaimer stdyDscr/dataAccs/useStmt/disclaimer Disclaimer study_desc/data_access/notes stdyDscr/dataAccs/setAvail/notes Notes data_files variables variable_groups Variable groups "],["annex-4-mapping-the-geographic-schema-to-dcatschema.html", "Annex 4: Mapping the geographic schema to DCAT/schema.org", " Annex 4: Mapping the geographic schema to DCAT/schema.org [to do] "],["annex-5-mapping-the-indicatortime-series-schema-to-schema.html", "Annex 5: Mapping the indicator/time series schema to schema.org", " Annex 5: Mapping the indicator/time series schema to schema.org [to do] "],["annex-6-mapping-the-table-schema-to-schema.html", "Annex 6: Mapping the table schema to schema.org", " Annex 6: Mapping the table schema to schema.org [to do] "],["annex-7-mapping-the-image-schema-to-dublin-core-iptc-and-schema.html", "Annex 7: Mapping the image schema to Dublin Core, IPTC, and schema.org", " Annex 7: Mapping the image schema to Dublin Core, IPTC, and schema.org [to do] "],["annex-8-mapping-the-audio-schema-to-dublin-core-and-schema.html", "Annex 8: Mapping the audio schema to Dublin Core and schema.org", " Annex 8: Mapping the audio schema to Dublin Core and schema.org [to do] "],["annex-9-mapping-the-video-schema-to-dublin-core-and-schema.html", "Annex 9: Mapping the video schema to Dublin Core and schema.org", " Annex 9: Mapping the video schema to Dublin Core and schema.org [to do] "],["annex-10-mapping-the-researchscript-schema-to-dublin-core-and-schema.html", "Annex 10: Mapping the research/script schema to Dublin Core and schema.org", " Annex 10: Mapping the research/script schema to Dublin Core and schema.org [to do] "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
